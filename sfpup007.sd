%%                                  
/*
Date Written: 09/12/2011

Name: sfpup007.sd

Copyright (c) 2011, SCIPS.com Inc.

Modify
Date                   By                  Comment
--------------------------------------------------------------
09/12/2011            REL                 This program is for the interface with gsn.  i
                                          It will collect all field that gsn needs by policy_no on a location basis.
==============================================================
*/

Program
  Name = "sfpup007";
  Type = "File";
  Domain = "dummy";
  Padcharacter = Space;
  array [30] of unsigned ascii number l_limit[9];
  array [4] of signed ascii number l_misc_premium[9];
  unsigned ascii number l_counter[6],
                        l_claim_count[4],
                        l_bpsclass_sub_code[4];

  wdate l_eff_date,
        I_EFF_DATE,
        l_starting_date,
        l_prior_policy_eff_date,
        l_ending_date;

  wdate function get_previous_pol_eff_date();
--  number function check_prior_policy_no();

  unSigned ascii number  l_claims_count[4],
                         l_class_code[5],
                         l_prior_policy_number[9],
                         l_cppbusiness_only_once[1],
                         L_liability_is_policy_wide[1],
                         l_sfpend_forms_only_once[1],
                         l_calculate_money_once[1],
                         l_identity_theft[1],
                         l_type_of_policy[2],
                         l_hold_pol_year[4],
                         l_hold_end_sequence[4],
                         l_hold_policy_no[9],
                         l_hold_prem_no[4],
                         l_hold_build_no[4],
                         l_hold_line_of_business[4],
                         l_policy_no[9],                 --used because of scope rules in cyberscience.
                         l_res_condo[1],
                         l_sfpend_premium[9],
                         l_pol_year[4],
                         l_end_sequence[4],
                         L_identity_theft_only_once[1],
                         l_prem_no[4],
                         l_build_no[4],
                         l_hired_only_once[1],
                         l_hiredcomp_only_once[1],
                         l_nonowned_only_once[1],
                         l_nonmedpay_only_once[1],
                         l_BRpip_only_once[1],
                         l_doc_only_once[1],
                         l_docliab_only_once[1] ,
                         l_nonliab_only_once[1],
                         l_package_only_once[1],
                         l_line_of_business[4],
                         l_state[2],
                         l_loop[2],
                         l_liability_code[2],
                         l_total_premium[9],
                         l_broadened_pip[9],
                         l_process_umbrella_once[1],
                         l_year_built[4],
                         l_sub_code[4],
                         l_do_only_once[1],
                         l_misc[1] ,  --this is for misc premium
                         l_do_terrorism_only_once[1],
                         l_terrorism_only_once[1];

  signed ascii number l_premium[9],
                      l_save_premium[9],
                      l_annual_premium[9],
                      l_current_total_premium[9],
                      l_short_rate[4]=0/dec=2;

  STRING L_POLICY_INDICATOR[20],
         l_iso_prop_class_code[5],
         l_iso_liab_class_code[5],
         l_iso_crime_class_code[5],
         l_insured_name[152];

  local file sfsline_by_subline = alias for sfsline;

  unsigned ascii number l_policy_suffix[3];

  string l_fac_indicator[1],
         l_building_deductible[6],
         l_iso_statement_line[3],
         l_prior_policy_number_prefix[5],
         l_lob_subline[2],
         l_hold_lob_subline[2],
         l_wind_deductible[6],
         l_company_id[10] = "",
         l_county_str[40],
         l_construction_class[6],
         l_protection[6],
         l_protection1[6],
         l_coinsurance_factor[4],
         l_deductible[6],
         l_liability_deductible[6],
         l_occupancy_type[2],
         l_site_description[100],
         l_form[4],
         l_enter[1],
         l_iso_class_code[6],
         l_base_class_code[6],         --used if the cinland and for item that do not have class code need to use the base.
         l_iso_sic_code[6],
         l_no_units[3];

  signed ascii number l_percent_of_prsmaster[6]/dec=4,
                      l_prsmaster_total[9]/dec=2;

  local file sfpmaster_check_endorsement = alias for sfpmaster;

  include "prorata.var"
  include "sfsrevname.var"

initialization
  l_STARTING_DATE = Date(COMMANDLINE[1,8])
  l_ENDING_DATE   = Date(COMMANDLINE[9,16])
  l_hold_policy_no = 0
  l_hold_pol_year = 0
  l_hold_end_sequence = 0
  write("<014>")
  access sfplocation,
     set sfplocation:policy_no  = "", approximate    --sets the file to beginning of the file.

  access sfpname,
     set sfpname:policy_no    = sfplocation:policy_no,
         sfpname:pol_year     = sfplocation:pol_year,
         sfpname:end_sequence = sfplocation:end_sequence, generic

  access sfsline,
     set sfsline:Company_id       = sfpname:company_id,
         sfsline:line_of_business = sfpname:line_of_business,
         sfsline:lob_subline      = "00" , exact

  access sfppoint,
     set sfppoint:policy_no       = sfpname:policy_no,
         sfppoint:pol_year        = sfpname:pol_year, exact

  access capvehicle,
     set capvehicle:policy_no  = "", approximate    --sets the file to beginning of the file.

  access gsn_master,
     set gsn_master:policy_no        = sfplocation:policy_no,
         gsn_master:pol_year         = sfplocation:pol_year,
         gsn_master:end_sequence     = sfplocation:end_sequence,
         gsn_master:prem_no          = sfplocation:prem_no,
         gsn_master:build_no         = sfplocation:build_no,
         gsn_master:line_of_business = l_line_of_business, generic

  do process_scips_premium_file

  access sfplocation,
     set sfplocation:policy_no  = "", approximate    --sets the file to beginning of the file.

  while sfplocation:errornumber = 0
    {
      access sfpmaster,
         set sfpmaster:policy_no    = sfplocation:policy_no,
             sfpmaster:pol_year     = sfplocation:pol_year,
             sfpmaster:end_sequence = sfplocation:end_sequence, generic

      access sfpname,
         set sfpname:policy_no    = sfplocation:policy_no,
             sfpname:pol_year     = sfplocation:pol_year,
             sfpname:end_sequence = sfplocation:end_sequence, generic

      access sfsline,
         set sfsline:Company_id       = sfpname:company_id,
             sfsline:line_of_business = sfpname:line_of_business,
             sfsline:lob_subline      = "00" , exact

      access sfppoint,
         set sfppoint:policy_no       = sfpname:policy_no,
             sfppoint:pol_year        = sfpname:pol_year, exact

      If ((sfpmaster:PREMIUM_TRANS_DATE < l_starting_date and
           sfpmaster:trans_eff => l_starting_date and
           sfpmaster:trans_eff <= l_ending_date) or

          -- TRANSACTED WITHIN THE START DATE and THE END DATE WITH
          --   EFFECTIVE DATES NOT > THE G_ending_date

          (sfpmaster:PREMIUM_TRANS_DATE  => l_starting_date and
           sfpmaster:PREMIUM_TRANS_DATE  <= l_ending_date and
           sfpmaster:trans_eff   <= l_ending_date)) and

           sfpmaster:policy_no    = sfplocation:policy_no and
           sfpmaster:pol_year     = sfplocation:pol_year and
           sfpmaster:end_sequence = sfplocation:end_sequence and
           sfpmaster:trans_code   < 17 then
        {
          l_policy_no    = sfplocation:policy_no
          l_pol_year     = sfplocation:pol_year
          l_end_sequence = sfplocation:end_sequence
          l_build_no     = sfplocation:build_no
          l_prem_no      = sfplocation:prem_no
          if (sfppoint:converted one of "Y" or
             (sfppoint:converted one of "N" and
              sfpmaster:end_sequence < sfppoint:end_sequence)) then           --check to make sure the transaction was updated if not do not have it included.
            {
              l_company_id       = sfpname:company_id
              l_line_of_business = sfpname:line_of_business   --this need to be after check for minimum because the line of business would be on the next policy.

              if l_hold_policy_no    <> l_policy_no or
                 l_hold_pol_year     <> l_pol_Year or
                 l_hold_end_sequence <> l_end_sequence then
                {
                  for l_loop = 1 to 30
                    {
                      l_limit[l_loop]   = 0
                    }
                }

              if l_build_no     <> sfplocation:build_no or   --this keep subcode same for each end_sequence.. I use this in bop because of the two sublines. 60 40 split
                 l_prem_no      <> sfplocation:prem_no or
                 l_end_sequence <> sfplocation:end_sequence then
                {
                  l_sub_code = 0
                }

              access gsn_master,
                 set gsn_master:policy_no        = sfplocation:policy_no,
                     gsn_master:pol_year         = sfplocation:pol_year,
                     gsn_master:end_sequence     = sfplocation:end_sequence,
                     gsn_master:prem_no          = sfplocation:prem_no,
                     gsn_master:build_no         = sfplocation:build_no,
                     gsn_master:line_of_business = l_line_of_business, generic

              if gsn_master:policy_no        <> sfplocation:policy_no or
                 gsn_master:pol_year         <> sfplocation:pol_year or
                 gsn_master:end_sequence     <> sfplocation:end_sequence or
                 gsn_master:prem_no          <> sfplocation:prem_no or
                 gsn_master:build_no         <> sfplocation:build_no or
                 gsn_master:line_of_business <> l_line_of_business then
                {
                  access sfscompany,
                     set sfscompany:company_id = l_company_id , exact

                  do add_to_gsn_master
                }
            } -- if it was updated within the period
        }   -- if transacted in the period
      next sfplocation
    }


  access capvehicle,
     set capvehicle:policy_no  = "", approximate    --sets the file to beginning of the file.

  while capvehicle:errornumber = 0
    {
      access sfpmaster,
         set sfpmaster:policy_no    = capvehicle:policy_no,
             sfpmaster:pol_year     = capvehicle:pol_year,
             sfpmaster:end_sequence = capvehicle:end_sequence, generic

      access sfpname,
         set sfpname:policy_no    = capvehicle:policy_no,
             sfpname:pol_year     = capvehicle:pol_year,
             sfpname:end_sequence = capvehicle:end_sequence, generic

      l_company_id       = sfpname:company_id
      l_line_of_business = sfpname:line_of_business

      access sfsline,
         set sfsline:Company_id       = l_company_id,
             sfsline:line_of_business = l_line_of_business,
             sfsline:lob_subline      = "00" , exact

      access sfppoint,
         set sfppoint:policy_no       = sfpname:policy_no,
             sfppoint:pol_year        = sfpname:pol_year, exact

      if l_end_sequence <> capvehicle:end_sequence or
         l_pol_year     <> capvehicle:pol_year or
         l_policy_no    <> capvehicle:policy_no then
        {
          l_hired_only_once     = 0
          l_brpip_only_once     = 0
          l_hiredcomp_only_once = 0
          l_nonowned_only_once  = 0
          l_nonmedpay_only_once = 0
          l_doc_only_once       = 0
          l_docliab_only_once   = 0
          l_nonliab_only_once   = 0
          l_package_only_once   = 0
        }

      l_policy_no    = capvehicle:policy_no
      l_pol_year     = capvehicle:pol_year
      l_end_sequence = capvehicle:end_sequence

      l_prem_no      = capvehicle:vehicle_no
      l_build_no     = 1


      If ((sfpmaster:premium_trans_date < l_starting_date and
           sfpmaster:trans_eff => l_starting_date and
           sfpmaster:trans_eff <= l_ending_date) or

--           TRANSACTED WITHIN THE START DATE and THE END DATE WITH
--             EFFECTIVE DATES NOT > THE G_ending_date

          (sfpmaster:premium_trans_date => l_starting_date and
           sfpmaster:premium_trans_date <= l_ending_date and
           sfpmaster:trans_eff <= l_ending_date)) and
           sfpmaster:trans_eff <> sfpmaster:trans_exp and
           sfpmaster:policy_no    = l_policy_no and
           sfpmaster:pol_year     = l_pol_year and
           sfpmaster:end_sequence = l_end_sequence and
           sfsline:stmt_lob <> 999 and
           sfpmaster:trans_code < 17 then
        {
           if (sfppoint:converted one of "Y" or
              (sfppoint:converted one of "N" and
               sfpmaster:end_sequence < sfppoint:end_sequence)) then           --check to make sure the transaction was updated if not do not have it included.
            {
              access gsn_master,
                 set gsn_master:policy_no        = capvehicle:policy_no,
                     gsn_master:pol_year         = capvehicle:pol_year,
                     gsn_master:end_sequence     = capvehicle:end_sequence,
                     gsn_master:prem_no          = l_prem_No,
                     gsn_master:build_no         = l_build_no,
                     gsn_master:line_of_business = l_line_of_business,generic

              if gsn_master:policy_no        <> capvehicle:policy_no or
                 gsn_master:pol_year         <> capvehicle:pol_year or
                 gsn_master:end_sequence     <> capvehicle:end_sequence or
                 gsn_master:prem_no          <> l_prem_no or
                 gsn_master:build_no         <> l_build_no or
                 gsn_master:line_of_business <> l_line_of_business then
                {
                  access sfscompany,
                     set sfscompany:company_id = l_company_id , exact

                  switch (sfsline:lob_code)
                    case "AUTO"       :  begin
                                           l_iso_class_code = ""
                                           do get_auto_info
                                           do add_to_gsn_master
                                         end
                  end
                }
            }
        }
      next capvehicle
    }

do process_gsn_master_premium_by_subline
--do check_diffence_between_files

update

procedure definition

procedure check_diffence_between_files

BEGIN
  access gsn_master_premium,
     set gsn_master_premium:company_id = "", approximate

  while gsn_master_premium:errornumber = 0
    {
      if gsn_master_premium:policy_no one of 2869,5484 then
         {
      if ((gsn_master_premium:trans_date < l_starting_date and
           gsn_master_premium:trans_eff => l_starting_date and
           gsn_master_premium:trans_eff <= l_ending_date) or
          (gsn_master_premium:trans_date => l_starting_date and
           gsn_master_premium:trans_date <= l_ending_date and
           gsn_master_premium:trans_eff <= l_ending_date)) then
        {
          access gsn_master_compare,
             set gsn_master_compare:company_id       = l_company_id,
                 gsn_master_compare:policy_no        = gsn_master_premium:policy_no,
                 gsn_master_compare:pol_year         = gsn_master_premium:pol_year,
                 gsn_master_compare:end_sequence     = gsn_master_premium:end_sequence,
                 gsn_master_compare:line_of_business = gsn_master_premium:line_of_business,
                 gsn_master_compare:lob_subline      = gsn_master_premium:lob_subline,
                 gsn_master_compare:trans_date       = gsn_master_premium:trans_date,
                 gsn_master_compare:trans_code       = gsn_master_premium:trans_code, exact

          if gsn_master_compare:company_id       = l_company_id and
             gsn_master_compare:policy_no        = gsn_master_premium:policy_no and
             gsn_master_compare:pol_year         = gsn_master_premium:pol_year and
             gsn_master_compare:end_sequence     = gsn_master_premium:end_sequence and
             gsn_master_compare:line_of_business = gsn_master_premium:line_of_business and
             gsn_master_compare:lob_subline      = gsn_master_premium:lob_subline and
             gsn_master_compare:trans_date       = gsn_master_premium:trans_date and
             gsn_master_compare:trans_code       = gsn_master_premium:trans_code then
            {
               if gsn_master_compare:premium <> gsn_master_premium:premium then
                 {
                   access gsn_master,
                      set gsn_master:policy_no        = gsn_master_compare:policy_no,
                          gsn_master:pol_year         = gsn_master_compare:pol_year,
                          gsn_master:end_sequence     = gsn_master_compare:end_sequence,
                          gsn_master:prem_no          = gsn_master_compare:prem_no,
                          gsn_master:build_no         = gsn_master_compare:build_no,
                          gsn_master:line_of_business = gsn_master_compare:line_of_business,
                          gsn_master:lob_subline      = gsn_master_compare:lob_subline,
                          gsn_master:sub_code         = gsn_master_compare:sub_code, exact
/*                   write("<014>")
                   write("%c-->gsn_master:policy_no-->%x<--",02001,gsn_master:policy_no)
                   write("%c-->gsn_mastercompare:policy_no-->%x<--",03001,gsn_master_compare:policy_no)
                   write("%c-->gsn_master:premium-->%x<--",04001,gsn_master:premium)
                   write("%c-->gsn_mastercompare:premium-->%x<--",05001,gsn_master_compare:premium)*/
--                   Read (23,1,"Press Enter to Continue ",L_ENTER,1)

                   if gsn_master:policy_no        = gsn_master_compare:policy_no and
                      gsn_master:pol_year         = gsn_master_compare:pol_year and
                      gsn_master:end_sequence     = gsn_master_compare:end_sequence and
                      gsn_master:prem_no          = gsn_master_compare:prem_no and
                      gsn_master:build_no         = gsn_master_compare:build_no and
                      gsn_master:line_of_business = gsn_master_compare:line_of_business and
                      gsn_master:lob_subline      = gsn_master_compare:lob_subline and
                      gsn_master:sub_code         = gsn_master_compare:sub_code then
                     {
                       change gsn_master
                         begin
                           gsn_master:premium = gsn_master_compare:premium
                         end
                     }  --if validation of the access make sure it has a good read on the file before you change.
                 }  --if gsn_master_compare:premium <> gsn_master_premium:premium
            } -- if statement
        }

        }  --if 2869, 5484

      next gsn_master_premium
    }
END

procedure process_gsn_master_premium_by_subline

--this procedure will get the gsn master file in the same format as the gsn_master_premium file that was created.
--I will then be able to see which subline have issues.

BEGIN
  local file gsn_master_just_added = alias for gsn_master;
  l_company_id = "GGUND"

  access gsn_master_just_added,
     set gsn_master_just_added:policy_no        = "", generic

  while gsn_master_just_added:errornumber = 0
    {
      if ((gsn_master_just_added:trans_date     < l_starting_date and
           gsn_master_just_added:trans_eff_date => l_starting_date and
           gsn_master_just_added:trans_eff_date <= l_ending_date) or

          (gsn_master_just_added:trans_date     => l_starting_date and
           gsn_master_just_added:trans_date     <= l_ending_date and
           gsn_master_just_added:trans_eff_date <= l_ending_date)) and

           gsn_master_just_added:trans_code < 17 then
        {
--          write("%c-->prsmaster:policy_no-->%x<--",02011,gsn_master_just_added:policy_no)
          access gsn_master_compare,
             set gsn_master_compare:company_id       = l_company_id,
                 gsn_master_compare:policy_no        = gsn_master_just_added:policy_no,
                 gsn_master_compare:pol_year         = gsn_master_just_added:pol_year,
                 gsn_master_compare:end_sequence     = gsn_master_just_added:end_sequence,
                 gsn_master_compare:line_of_business = gsn_master_just_added:line_of_business,
                 gsn_master_compare:lob_subline      = gsn_master_just_added:lob_subline,
                 gsn_master_compare:trans_date       = gsn_master_just_added:trans_date,
                 gsn_master_compare:trans_code       = gsn_master_just_added:trans_code, exact

          if gsn_master_compare:company_id       <> l_company_id or
             gsn_master_compare:policy_no        <> gsn_master_just_added:policy_no or
             gsn_master_compare:pol_year         <> gsn_master_just_added:pol_year or
             gsn_master_compare:end_sequence     <> gsn_master_just_added:end_sequence or
             gsn_master_compare:line_of_business <> gsn_master_just_added:line_of_business or
             gsn_master_compare:lob_subline      <> gsn_master_just_added:lob_subline or
             gsn_master_compare:trans_date       <> gsn_master_just_added:trans_date or
             gsn_master_compare:trans_code       <> gsn_master_just_added:trans_code then
            {
              add gsn_master_compare
                begin
                  gsn_master_compare:company_id       = l_company_id
                  gsn_master_compare:policy_no        = gsn_master_just_added:policy_no
                  gsn_master_compare:pol_year         = gsn_master_just_added:pol_year
                  gsn_master_compare:end_sequence     = gsn_master_just_added:end_sequence
                  gsn_master_compare:line_of_business = gsn_master_just_added:line_of_business
                  gsn_master_compare:lob_subline      = gsn_master_just_added:lob_subline
                  gsn_master_compare:trans_date       = gsn_master_just_added:trans_date
                  gsn_master_compare:trans_code       = gsn_master_just_added:trans_code
                  gsn_master_compare:TRANS_EFF        = gsn_master_just_added:TRANS_EFF_DATE
                  gsn_master_compare:EFF_DATE         = gsn_master_just_added:POLICY_EFF_DATE
                  gsn_master_compare:prem_no          = gsn_master_just_added:prem_no
                  gsn_master_compare:build_no         = gsn_master_just_added:BUILD_NO
                  gsn_master_compare:sub_code         = gsn_master_just_added:sub_code
                  gsn_master_compare:premium          = gsn_master_just_added:premium
               end
            }
          else
            if gsn_master_compare:company_id       = l_company_id and
               gsn_master_compare:policy_no        = gsn_master_just_added:policy_no and
               gsn_master_compare:pol_year         = gsn_master_just_added:pol_year and
               gsn_master_compare:end_sequence     = gsn_master_just_added:end_sequence and
               gsn_master_compare:line_of_business = gsn_master_just_added:line_of_business and
               gsn_master_compare:lob_subline      = gsn_master_just_added:lob_subline and
               gsn_master_compare:trans_date       = gsn_master_just_added:trans_date and
               gsn_master_compare:trans_code       = gsn_master_just_added:trans_code and
               gsn_master_compare:trans_eff        = gsn_master_just_added:trans_eff_date and
               gsn_master_compare:eff_date         = gsn_master_just_added:policy_eff_date then
              {
                change gsn_master_compare
                  begin
                    gsn_master_compare:company_id       = l_company_id
                    gsn_master_compare:policy_no        = gsn_master_just_added:policy_no
                    gsn_master_compare:pol_year         = gsn_master_just_added:pol_year
                    gsn_master_compare:end_sequence     = gsn_master_just_added:end_sequence
                    gsn_master_compare:line_of_business = gsn_master_just_added:line_of_business
                    gsn_master_compare:lob_subline      = gsn_master_just_added:lob_subline
                    gsn_master_compare:trans_date       = gsn_master_just_added:trans_date
                    gsn_master_compare:trans_code       = gsn_master_just_added:trans_code
                    gsn_master_compare:TRANS_EFF        = gsn_master_just_added:TRANS_EFF_DATE
                    gsn_master_compare:EFF_DATE         = gsn_master_just_added:POLICY_EFF_DATE
                    gsn_master_compare:prem_no          = gsn_master_just_added:prem_no
                    gsn_master_compare:build_no         = gsn_master_just_added:BUILD_NO
                    gsn_master_compare:sub_code         = gsn_master_just_added:sub_code
                    gsn_master_compare:premium          = gsn_master_compare:premium + gsn_master_just_added:premium
                 end
              }
         }
      next gsn_master_just_added
    }
END

procedure process_scips_premium_file

--this procedure will create a new file from premium that has the following key
--COMPANY_ID+POLICY_NO+POL_YEAR+END_SEQUENCE+LINE_OF_BUSINESS+LOB_SUBLINE+TRANS_DATE+TRANS_CODE
--this will then allow me to access this file by subline and trans_date to verify that my total for all my location are correct


BEGIN
  local unsigned ascii number l_count_change[8];
  access prsmaster,
     set prsmaster:company_id = "", generic

  while prsmaster:errornumber = 0
    {
      if ((prsmaster:trans_date < l_starting_date and
           prsmaster:trans_eff => l_starting_date and
           prsmaster:trans_eff <= l_ending_date) or

          (prsmaster:trans_date => l_starting_date and
           prsmaster:trans_date <= l_ending_date and
           prsmaster:trans_eff <= l_ending_date)) and

           prsmaster:trans_eff <> prsmaster:trans_exp and
           prsmaster:trans_code < 17 then
        {
--          write("%c-->prsmaster:policy_no-->%x<--",02011,prsmaster:policy_no)
          access gsn_master_premium,
             set gsn_master_premium:company_id       = prsmaster:company_id,
                 gsn_master_premium:policy_no        = prsmaster:policy_no,
                 gsn_master_premium:pol_year         = prsmaster:pol_year,
                 gsn_master_premium:end_sequence     = prsmaster:end_sequence,
                 gsn_master_premium:line_of_business = prsmaster:line_of_business,
                 gsn_master_premium:lob_subline      = prsmaster:lob_subline,
                 gsn_master_premium:trans_date       = prsmaster:trans_date,
                 gsn_master_premium:trans_code       = prsmaster:trans_code, exact

          if gsn_master_premium:company_id       <> prsmaster:company_id or
             gsn_master_premium:policy_no        <> prsmaster:policy_no or
             gsn_master_premium:pol_year         <> prsmaster:pol_year or
             gsn_master_premium:end_sequence     <> prsmaster:end_sequence or
             gsn_master_premium:line_of_business <> prsmaster:line_of_business or
             gsn_master_premium:lob_subline      <> prsmaster:lob_subline or
             gsn_master_premium:trans_date       <> prsmaster:trans_date or
             gsn_master_premium:trans_code       <> prsmaster:trans_code then
            {
              add gsn_master_premium
                begin
                  gsn_master_premium:company_id       = prsmaster:company_id
                  gsn_master_premium:policy_no        = prsmaster:policy_no
                  gsn_master_premium:pol_year         = prsmaster:pol_year
                  gsn_master_premium:end_sequence     = prsmaster:end_sequence
                  gsn_master_premium:line_of_business = prsmaster:line_of_business
                  gsn_master_premium:lob_subline      = prsmaster:lob_subline
                  gsn_master_premium:trans_date       = prsmaster:trans_date
                  gsn_master_premium:trans_code       = prsmaster:trans_code
                  gsn_master_premium:trans_eff        = prsmaster:trans_eff
                  gsn_master_premium:eff_date         = prsmaster:eff_date
                  gsn_master_premium:premium          = prsmaster:premium
                end
            }
          else
            {
              change gsn_master_premium
                begin
                  gsn_master_premium:company_id       = prsmaster:company_id
                  gsn_master_premium:policy_no        = prsmaster:policy_no
                  gsn_master_premium:pol_year         = prsmaster:pol_year
                  gsn_master_premium:end_sequence     = prsmaster:end_sequence
                  gsn_master_premium:line_of_business = prsmaster:line_of_business
                  gsn_master_premium:lob_subline      = prsmaster:lob_subline
                  gsn_master_premium:trans_date       = prsmaster:trans_date
                  gsn_master_premium:trans_code       = prsmaster:trans_code
                  gsn_master_premium:trans_eff        = prsmaster:trans_eff
                  gsn_master_premium:eff_date         = prsmaster:eff_date
                  gsn_master_premium:premium          = gsn_master_premium:premium + prsmaster:premium
                end
               l_count_change = l_count_change + 1
             }
        }
      next prsmaster
    }
END


procedure check_for_minimum_premium

BEGIN
  local file sfpmaster_minimum  = alias for sfpmaster;
  local file sfpname_minimum  = alias for sfpname;
  local unsigned ascii number l_do_only_once[1];
  local wdate l_minimum_date;
  local unsigned ascii number l_count = 0;

  access sfscontrol,
     set sfscontrol:company_id       = l_company_id,
         sfscontrol:state            = l_state,
         sfscontrol:line_of_business = l_line_of_business, generic

  while sfscontrol:company_id        = l_company_id and
        sfscontrol:state             = l_state and
        sfscontrol:line_of_business  = l_line_of_business
    {
      if sfscontrol:eff_date <= sfpname:eff_date then
        {
          l_minimum_date =  sfscontrol:eff_date
        }
      next sfscontrol
    }
  access sfscontrol,
     set sfscontrol:company_id       = l_company_id,
         sfscontrol:state            = l_state,
         sfscontrol:line_of_business = l_line_of_business,
         sfscontrol:eff_date         = l_minimum_date, exact

  if sfscontrol:minimum_premium >= l_current_total_premium then
    {
      switch (l_hold_line_of_business)
       case 5,50,51 : BEGIN
                          access gsn_master_minimum,
                             set gsn_master_minimum:policy_no    = l_hold_policy_no,
                                 gsn_master_minimum:pol_year     = l_hold_pol_year,
                                 gsn_master_minimum:end_sequence = l_hold_end_sequence, generic

                          access sfpmaster_minimum,
                             set sfpmaster_minimum:policy_no    = l_hold_policy_no,
                                 sfpmaster_minimum:pol_year     = l_hold_pol_year,
                                 sfpmaster_minimum:end_sequence = l_hold_end_sequence, exact

                          access sfpname_minimum,
                             set sfpname_minimum:policy_no    = l_hold_policy_no,
                                 sfpname_minimum:pol_year     = l_hold_pol_year,
                                 sfpname_minimum:end_sequence = l_hold_end_sequence, exact

                          l_do_only_once = 0
                          if l_current_total_premium < sfscontrol:MINIMUM_PREMIUM then
                            {
                              while gsn_master_minimum:policy_no    = l_hold_policy_no and
                                    gsn_master_minimum:pol_year     = l_hold_pol_year and
                                    gsn_master_minimum:end_sequence = l_hold_end_sequence
                                {
                                  if gsn_master_minimum:lob_subline one of "60","70" and
                                     gsn_master_minimum:premium <> 0 then
                                    {
                                      if gsn_master_minimum:trans_code not one of 11,16 then
                                        {
                                          change gsn_master_minimum
                                            {
                                              switch (gsn_master_minimum:sub_code)
                                                case 1 : begin
                                                           gsn_master_minimum:premium = sfscontrol:MINIMUM_PREMIUM * 0.60
                                                           gsn_master_minimum:annual_premium = sfscontrol:MINIMUM_PREMIUM * 0.60
                                                           gsn_master_minimum:save_current_premium = sfscontrol:MINIMUM_PREMIUM * 0.60
                                                         end
                                                case 2 : begin
                                                           gsn_master_minimum:premium = sfscontrol:MINIMUM_PREMIUM * 0.40
                                                           gsn_master_minimum:annual_premium = sfscontrol:MINIMUM_PREMIUM * 0.40
                                                           gsn_master_minimum:save_current_premium = sfscontrol:MINIMUM_PREMIUM * 0.40
                                                         end
                                              end
                                           }  --end of change
                                        }
                                      else
                                        if gsn_master_minimum:trans_code one of 11 then
                                          {
                                            switch (gsn_master_minimum:sub_code)
                                              case 1 : begin
                                                         l_premium = sfscontrol:MINIMUM_PREMIUM * 0.60
                                                         l_annual_premium = sfscontrol:MINIMUM_PREMIUM * 0.60
                                                       end
                                              case 2 : begin
                                                         l_premium = sfscontrol:MINIMUM_PREMIUM * 0.40
                                                         l_annual_premium = sfscontrol:MINIMUM_PREMIUM * 0.40
                                                       end
                                            end
                                            if sfpmaster_minimum:trans_eff = sfpname_minimum:eff_date then
                                              {
                                                l_annual_premium = l_annual_premium * -1
                                                l_premium = l_premium * -1
                                              }
                                            else
                                              {
                                                --this is the prorata calculation
                                                I_EFF_DATE = Dateadd(SFPMASTER_minimum:TRANS_EXP,0,-1)
                                                I_SHORT_RATE = SFPMASTER_minimum:SHORT_RATE
                                                I_TOTAL_DAYS = I_EFF_DATE - SFPMASTER_minimum:TRANS_EXP
                                                I_CX_DAYS = I_EFF_DATE - SFPMASTER_minimum:TRANS_EFF
                                                Include "prorata.pro"
                                                --end of the prorata calculation

                                                l_premium = l_annual_premium * I_pro_rata * -1
                                                l_annual_premium = l_annual_premium * -1
/*                                                if gsn_master_previous:policy_no = 5718 and
                                                   l_lob_subline one of "70" then
                                                  {
                                                    write("%c<014>%x%x",1001,"gsn_master_minimum:policy_no",       gsn_master_minimum:policy_no)
                                                    write("%c%x%x",2001,"gsn_master_minimum:pol_year",        gsn_master_minimum:pol_year)
                                                    write("%c%x%x",3001,"gsn_master_minimum:end_sequence",    gsn_master_minimum:end_sequence)
                                                    write("%c%x%x",4001,"gsn_master_minimum:prem_no",         gsn_master_minimum:prem_no)
                                                    write("%c%x%x",5001,"gsn_master_minimum:build_no",        gsn_master_minimum:build_no)
                                                    write("%c%x%x",6001,"gsn_master_minimum:line_of_business",gsn_master_minimum:line_of_business)
                                                    write("%c%x%x",7001,"gsn_master_minimum:lob_subline",     gsn_master_minimum:lob_subline)
                                                    write("%c%x%x",8001,"gsn_master_minimum:sub_code",        gsn_master_minimum:sub_code)
                                                    write("%c%x%x",9001,"gsn_master_minimum:premium ",        gsn_master_minimum:premium)
                                                    write("%c%x%x",10001,"gsn_master_minimum:annual  ",       gsn_master_minimum:annual_premium)
                                                    write("%c%x%x",11001,"l_premium                    ",      l_premium )
                                                    write("%c%x%x",12001,"l_annual premium              ",      l_annual_premium )
                                                    write("%c%x%x",13001,"i_pro_rate                    ",I_pro_rata )
                                                    Read (23,1,"Press Enter to Continue ",L_ENTER,1)
                                                  }*/
                                                change gsn_master_minimum
                                                  {
                                                    gsn_master_minimum:premium              = l_premium
                                                    gsn_master_minimum:annual_premium       = l_annual_premium
                                                    gsn_master_minimum:save_current_premium = l_annual_premium
                                                  }  --end of change
                                              }
                                          }   --if trans_code one of 11
                                    }  --end of if
                                  next gsn_master_minimum
                                }
                            }
                        END
       end
     }

END

procedure get_umbrella

BEGIN
  access cppumbrella,
     set cppumbrella:policy_no    = sfplocation:policy_no,
         cppumbrella:pol_year     = sfplocation:pol_year,
         cppumbrella:end_sequence = sfplocation:end_sequence,exact
END

Procedure get_liability

BEGIN
  access cppliability,
     set cppliability:policy_no     = sfplocation:policy_no,
         CPPLIABility:pol_year      = sfplocation:pol_year,
         CPPLIABility:end_sequence  = sfplocation:end_sequence,
         cppliability:prem_no       = sfplocation:prem_no,
         cppliability:build_no      = sfplocation:build_No, generic
END

procedure get_auto_info

BEGIN
  local unsigned ascii number l_table[1] = 1;
  Access casclass,
     Set casclass:COMPANY_ID       = capvehicle:COMPANY_ID,
         casclass:STATE            = capvehicle:STATE,
         casclass:LINE_OF_BUSINESS = capvehicle:LINE_OF_BUSINESS,
         casclass:type             = capvehicle:type,
         casclass:table            = l_table,
         casclass:class_code       = capvehicle:class_code, generic

   l_class_code     = capvehicle:class_code
   l_iso_class_code = casclass:iso_class_code
--   write("%c-->iso_class_code%x<--",02021,l_iso_class_code)
END

procedure get_contractor_info

BEGIN
  access scpcontractor_alias,
     set scpcontractor_alias:policy_no        = sfplocation:policy_no,
         scpcontractor_alias:pol_year         = sfplocation:pol_year,
         scpcontractor_alias:end_sequence     = sfplocation:end_sequence, generic    --used for accessing the classcode first location

    access scpcontractor,
       set scpcontractor:policy_no        = sfplocation:policy_no,
           scpcontractor:pol_year         = sfplocation:pol_year,
           scpcontractor:end_sequence     = sfplocation:end_sequence,
           scpcontractor:prem_no          = sfplocation:prem_no,
           scpcontractor:build_no         = sfplocation:build_no, generic


  l_iso_class_code = ""
  l_iso_sic_code   = ""
  access scpclasscode,
     set scpclasscode:policy_no        = scpcontractor_alias:policy_no,
         scpclasscode:pol_year         = scpcontractor_alias:pol_year,
         scpclasscode:end_sequence     = scpcontractor_alias:end_sequence, generic

  while scpclasscode:policy_no        = scpcontractor:policy_no and
        scpclasscode:pol_year         = scpcontractor:pol_year and
        scpclasscode:end_sequence     = scpcontractor:end_sequence
    {
      Access SCSCLASSCODE,
         Set SCSCLASSCODE:COMPANY_ID       = l_COMPANY_ID,
             SCSCLASSCODE:STATE            = L_STATE,
             SCSCLASSCODE:LINE_OF_BUSINESS = l_LINE_OF_BUSINESS,
             SCSCLASSCODE:CLASS_CODE       = scpCLASSCODE:CLASS_CODE, approximate

      l_eff_date = 00.00.0000

      while SCSCLASSCODE:COMPANY_ID       = l_COMPANY_ID and
            SCSCLASSCODE:STATE            = L_STATE and
            SCSCLASSCODE:LINE_OF_BUSINESS = l_LINE_OF_BUSINESS and
            SCSCLASSCODE:CLASS_CODE       = scpCLASSCODE:CLASS_CODE
        begin
           If sfpNAME:EFF_DATE >= SCSCLASSCODE:EFF_DATE Then
             {
               l_eff_date               = SCSCLASSCODE:eff_date
             }
           Next SCSCLASSCODE
        End

      Access SCSCLASSCODE,
         Set SCSCLASSCODE:COMPANY_ID       = l_COMPANY_ID,
             SCSCLASSCODE:STATE            = L_STATE,
             SCSCLASSCODE:LINE_OF_BUSINESS = l_LINE_OF_BUSINESS,
             SCSCLASSCODE:CLASS_CODE       = scpCLASSCODE:CLASS_CODE,
             scsclasscode:eff_date         = l_eff_date, exact

      if scpclasscode:class_code <> 0 then
        {
          l_class_code     = scpclasscode:class_code
          l_iso_class_code = scsclasscode:iso_liab_class_code
        }
      l_iso_sic_code   = scsclasscode:sic

      next scpclasscode
    }
  Access scpLIABLIMITS,
     Set scpLIABLIMITS:policy_NO    = sfpname:policy_NO ,
         scpliablimits:pol_year     = sfpname:pol_year,
         scpliablimits:end_sequence = sfpname:end_sequence, Generic
END

procedure get_bop_info

Begin
  access bopgeneral,
     set bopgeneral:policy_no    = l_policy_no,
         bopgeneral:pol_year     = l_pol_year,
         bopgeneral:end_sequence = l_end_sequence,
         bopgeneral:prem_no      = l_prem_no,
         bopgeneral:build_no     = l_build_no, exact

  Access BPSCLASS,
     Set BPSCLASS:COMPANY_ID       = bopGENERAL:COMPANY_ID,
         BPSCLASS:STATE            = bopGENERAL:STATE,
         BPSCLASS:LINE_OF_BUSINESS = bopGENERAL:LINE_OF_BUSINESS,
         BPSCLASS:class_code       = bopgeneral:class_code, generic

  if l_policy_no one of 500002151 then
    {
      write("%c--><014>%x<--",02001,bpsclass:company_id)
      write("%c-->%x<--",03001,BPSCLASS:STATE)
      write("%c-->%x<--",04001,BPSCLASS:LINE_OF_BUSINESS)
      write("%c-->%x<--",05001,BPSCLASS:class_code)
      write("%c-->%x<--",09031,bopgeneral:company_id)
      write("%c-->%x<--",10031,bopgeneral:state)
      write("%c-->%x<--",11031,bopgeneral:line_of_business)
      write("%c-->%x<--",12031,bopgeneral:class_code)

      write("%c-->%x<--",02031,bopgeneral:policy_no)

      write("%c-->%x<--",03031,bopgeneral:pol_year)
      write("%c-->%x<--",04031,bopgeneral:end_sequence)
      write("%c-->%x<--",05031,bopgeneral:prem_no)
      write("%c-->%x<--",06031,bopgeneral:build_no)



--      Read (23,1,"Press Enter to Continue ",L_ENTER,1)
    }

  while bpsclass:COMPANY_ID       = bopGENERAL:COMPANY_ID and
        BPSCLASS:STATE            = bopGENERAL:STATE and
        BPSCLASS:LINE_OF_BUSINESS = bopGENERAL:LINE_OF_BUSINESS and
        BPSCLASS:class_code       = bopgeneral:class_code
    {
      if bpsclass:eff_date <= sfpname:eff_date then
        {
          l_eff_date          = bpsclass:eff_date
          l_bpsclass_sub_code = bpsclass:sub_code
        }
      next bpsclass
    }
   Access BPSCLASS,
      Set BPSCLASS:COMPANY_ID       = bopGENERAL:COMPANY_ID,
          BPSCLASS:STATE            = bopGENERAL:STATE,
          BPSCLASS:LINE_OF_BUSINESS = bopGENERAL:LINE_OF_BUSINESS,
          BPSCLASS:class_code       = bopgeneral:class_code,
          bpsclass:sub_code         = l_bpsclass_sub_code,
          bpsclass:eff_date         = l_eff_date, exact


   l_iso_class_code = ""
   l_iso_sic_code   = ""
   l_class_code     = 0

   l_class_code     = bopgeneral:class_code
   l_iso_class_code = bpsclass:iso_class_code
   l_iso_sic_code   = bpsclass:sic
/*   if l_policy_no one of 500002151 then
     {
       write("%c-->%x<--",02001,l_eff_date)
       write("%c-->%x<--",03001,l_bpsclass_sub_code)
       write("%c-->%x<--",04001,bpsclass:class_code)
       write("%c-->%x<--",05001,bpsclass:line_of_business)
       write("%c-->%x<--",06001,bpsclass:state)
       write("%c-->%x<--",07001,bpsclass:company_id)
       write("%c-->%x<--",08001,bopgeneral:prem_no)
       write("%c-->%x<--",09001,bopgeneral:build_no)

       write("%c-->iso_class_code%x<--",02021,l_iso_class_code)

     }*/
END

procedure check_if_claim_was_made(number p_policy_no,
                                  rwdate p_eff_date,
                                  rwdate p_exp_date)

BEGIN
  access lrssetup,
     set lrssetup:policy_no  = p_policy_no, exact

  l_claims_count = 0
  while lrssetup:policy_no = p_policy_no
    {
      if lrssetup:loss_date >= p_eff_date and
         lrssetup:loss_date <= p_exp_date  then
        {
          l_claim_count = l_claim_count + 1
        }
      next lrssetup
    }
END

procedure check_for_fac    --the is fac reinsurance

BEGIN
  l_fac_indicator = "N"
  if bopgeneral:reinsurance = "Y" then
    {
      l_fac_indicator = "Y"
    }
END

procedure check_for_county(number p_state, number p_county)

BEGIN
  unsigned ascii number l_state[2] = p_state ;
  unsigned ascii number l_county[3] = p_county;
  access sfsstate,
     set sfsstate:company_id = sfpname:company_id,
         sfsstate:state      = l_state,
         sfsstate:county     = l_county, generic

  l_county_str  = SFSSTATE:DESCRIPTION
END

procedure fill_in_locals_by_LOB

BEGIN
  unsigned ascii number l_loop[2];
  l_construction_class  = ""
  l_deductible          = ""
  l_occupancy_type      = ""
  l_no_units            = ""
  l_premium             = 0
  l_building_deductible = ""
  l_wind_deductible     = ""
  l_form                = ""
  l_liability_code      = 0
  l_coinsurance_factor  = ""
  l_protection          = ""
  for l_loop = 1 to 30
    {
      l_limit[l_loop]   = 0
    }

  switch (sfsline:lob_code)
    case "AUTO" :  BEGIN
                    ACCESS CAPPIP,
                       set cappip:policy_no    = capvehicle:policy_no,
                           cappip:pol_year     = capvehicle:pol_year,
                           cappip:end_sequence = capvehicle:end_sequence,
                           cappip:vehicle_no   = capvehicle:vehicle_no, exact
                    l_Limit[14] = capvehicle:medical_payments
                    l_Limit[6]  = sfpmaster:liability
                    l_Limit[28] = sfpmaster:um_uim_limit[1]
                    l_Limit[29] = sfpmaster:um_uim_limit[2]
                    l_Limit[5]  = capPIP:MEDICAL_EXPENSE_LIMIT
                    l_res_condo = 0
                  END

    case "SMP","PROPERTY" : BEGIN
                       l_construction_class = str(cppgeneral:construction)
                       l_deductible         = str(cppgeneral:DEDUCTIBLE)
                       if cppgeneral:res_condo = 1 then
                         {
                           l_res_condo = 1
                         }
                       else
                         {
                           l_res_condo = 0
                         }
                       l_occupancy_type     = "0"
                       l_no_units           = "1"
                       l_wind_deductible    = str(cppgeneral:wind_deductible)
                       l_form               = str(sfpmaster:form)
                       l_liability_code     = sfpmaster:liability_code
                       l_coinsurance_factor = str(cppgeneral:coinsurance)
                       l_protection         = str(cppgeneral:protection)
                       l_limit[11]          = cppliablimits:OCCURRENCE
                       l_limit[12]          = cppliablimits:general_aggregate
                       l_limit[13]          = cppliablimits:products
                       l_limit[14]          = cppliablimits:medical_payments
                       l_limit[15]          = cppliablimits:fire_legal
                       l_limit[16]          = cppliablimits:ADVERTISING_PERSONAL_INJURY

                       l_limit[4] = 0
                       l_limit[5] = 0
                       l_limit[6] = 0
                       l_limit[7] = 0
                       l_limit[8] = 0
                       l_limit[9] = 0

                       access sfsliability,
                          set sfsliability:company_id       = l_company_id,
                              sfsliability:state            = l_state,
                              sfsliability:line_of_business = l_line_of_business,
                              sfsliability:liability_code   = l_liability_code, generic

                 END
    case "LIABILITY" : BEGIN
                         do get_liability
                         l_construction_class = str(cppgeneral:construction)
                         l_deductible         = str(sfpMASTER:DEDUCTIBLE)
                         l_occupancy_type     = "0"
                         l_form               = str(sfpmaster:form)
                         l_limit[11]          = cppliablimits:OCCURRENCE
                         l_limit[12]          = cppliablimits:general_aggregate
                         l_limit[13]          = cppliablimits:products
                         l_limit[14]          = cppliablimits:medical_payments
                         l_limit[15]          = cppliablimits:fire_legal
                         l_limit[16]          = cppliablimits:ADVERTISING_PERSONAL_INJURY
                         l_liability_code     = sfpmaster:liability_code
                         l_protection         = str(cppgeneral:protection)
                         access sfsliability,
                            set sfsliability:company_id       = l_company_id,
                                sfsliability:state            = l_state,
                                sfsliability:line_of_business = l_line_of_business,
                                sfsliability:liability_code   = l_liability_code, generic
                                             l_limit[1] = 0
                         l_limit[1] = 0
                         l_limit[2] = 0
                         l_limit[3] = 0
                         l_limit[4] = 0
                         l_limit[5] = 0
                         l_limit[6] = 0
                         l_limit[7] = 0
                         l_limit[8] = 0
                         l_limit[9] = 0
                         l_limit[10] = 0

                         l_limit[17] = 0
                         l_limit[18] = 0
                         l_limit[19] = 0
                         l_limit[20] = 0
                         l_limit[21] = 0
                         l_limit[22] = 0
                         l_limit[23] = 0
                         l_limit[24] = 0
                         l_limit[25] = 0
                         l_limit[26] = 0
                         l_limit[27] = 0
                         l_limit[28] = 0
                         l_limit[29] = 0
                         l_limit[29] = 0
                         l_limit[30] = 0
                         l_res_condo = 0
                       END
    case "BOP" : BEGIN
                    l_construction_class   = str(bopgeneral:construction)
                    l_deductible           = str(sfpMASTER:DEDUCTIBLE)
                    l_liability_deductible = str(sfpmaster:deductible)
                    l_occupancy_type       = str(bopGENERAL:BOP_TYPE)
                    l_form                 = str(sfpmaster:form)
                    l_limit[1]             = bopgeneral:building_limit
                    l_limit[2]             = bopgeneral:property_limit  --contents
                    l_limit[3]             = bopGENERAL:OTHER_STRUCTURES  --other structures
                    l_liability_code       = sfpmaster:liability_code
                    l_protection           = str(bopgeneral:protection)
                    access sfsliability,
                       set sfsliability:company_id       = l_company_id,
                           sfsliability:state            = l_state,
                           sfsliability:line_of_business = l_line_of_business,
                           sfsliability:liability_code   = l_liability_code, generic

                    l_limit[6]           = sfsliability:limit    --liability

                    l_limit[10]          = bopGENERAL:SIGNS_LIMIT + bopGENERAL:GLASS_LIMIT + bopGENERAL:BURGLARY_LIMIT_ON + bopGENERAL:BURGLARY_LIMIT_OFF +
                                           bopGENERAL:MONEY_LIMIT_ON + bopGENERAL:MONEY_LIMIT_OFF + bopGENERAL:AR_LIMIT + bopGENERAL:UTILITY_LIMIT +
                                           bopGENERAL:MECHANICAL_LIMIT + bopGENERAL:Loss_INCOME_limit + bopGENERAL:SUPPLIES_LIMIT + bopGENERAL:POLLUTION_LIMIT +
                                           bopGENERAL:CUSTOMER_PROP_LIMIT + bopGENERAL:WATER_BACKUP_LIMIT + bopGENERAL:FIRE_LIMIT
                    l_res_condo = 0
                end
    CASE "UMBRELLA" : BEGIN
                        l_Limit[12]   = cppumbrella:general_aggregate
                        l_Limit[9]    = cppumbrella:PRODUCTS
                        l_Limit[8]    = cppumbrella:PERSONAL_ADD_INJURY
                        l_Limit[7]    = cppumbrella:occurrence
                        l_res_condo = 0
                      END
    case "SCP" : BEGIN
                   l_construction_class = str(scpCONTRACTOR:construction)
                   l_deductible         = str(sfpMASTER:DEDUCTIBLE)
                   l_wind_deductible    = str(scpcontractor:wind_deductible)
                   l_occupancy_type     = ""
                   l_form               = str(sfpmaster:form)
                   l_limit[1]           = scpcontractor:building_limit
                   l_limit[2]           = scpcontractor:PROPERTY_LIMIT
                   l_limit[3]           = scpcontractor:personal_limit
                   l_protection         = str(scpcontractor:protection)
                   l_site_description   = scpCONTRACTOR:BUSINESS_DESC[1] + scpCONTRACTOR:BUSINESS_DESC[2]
                   l_liability_code     = scpLIABLIMITS:AGGREGATE

                   access scpliablimits,
                      set scpliablimits:policy_no     = l_policy_no,
                          scpliablimits:pol_year      = l_pol_year,
                          scpliablimits:end_sequence  = l_end_sequence, exact

                   l_limit[11]          = scpliablimits:OCCURRENCE
                   l_limit[12]          = scpliablimits:general_aggregate
                   l_limit[13]          = scpliablimits:aggregate
                   l_limit[14]          = scpliablimits:medical_payments
                   l_limit[15]          = scpliablimits:fire_legal
                   l_limit[16]          = scpliablimits:PERSONAL_INJURY

                   l_limit[10]          = scpCONTRACTOR:AR_LIMIT +
                                          scpCONTRACTOR:GLASS_LIMIT +
                                          scpCONTRACTOR:SIGNS_ATTACHED_LIMIT +
                                          scpCONTRACTOR:DEBRIS_LIMIT +
                                          scpCONTRACTOR:OFF_PREM_LIMIT +
                                          scpCONTRACTOR:OUTDOOR_PROPERTY_LIMIT +
                                          scpCONTRACTOR:WATER_BKUP_LIMIT +
                                          scpCONTRACTOR:OUTDOOR_PROPERTY_LIMIT +
                                          scpCONTRACTOR:PERSONAL_EFFECTS +
                                          scpCONTRACTOR:WATER_BKUP_LIMIT +
                                          scpCONTRACTOR:COMPUTER_LIMIT +
                                          scpcontractor:OFF_PREM_LIMIT_PER +
                                          scpcontractor:employee_tools_limit +
                                          scpcontractor:personal_property_of_others +
                                          scpcontractor:pollution_limit
                   l_res_condo = 0
                 END
  }

END

procedure add_to_gsn_master

BEGIN
  local file cppliability_all_locations  = alias for cppliability;
  unsigned ascii number l_add_products[1],
                        l_add_premise[1],
                        l_add_crime[1],
                        l_add_inland[1],
                        l_add_glass[1],
                        l_stored_loc[2],
                        l_add_irpm_only_once[1];
  string l_crime_form[1];

  access sfsdefault,
     set sfsdefault:sfs_code = "SFS", exact

        write("%c<014>%S%x",01001,"l_policy_no",l_policy_no)
        write("%c%S%x",02001,"l_pol_year",l_pol_year)
        write("%c%S%x",03001,"l_end_sequence",l_end_sequence)
        write("%c%S%x",04001,"l_holdpolicy_no",l_hold_policy_no)
        write("%c%S%x",05001,"l_hold pol_year",l_hold_pol_year)
        write("%c%S%x",06001,"l_hold end_sequence",l_hold_end_sequence)
--        Read (23,1,"Press Enter to Continue ",L_ENTER,1)

  if l_hold_policy_no    <> l_policy_no or
     l_hold_pol_year     <> l_pol_Year or
     l_hold_end_sequence <> l_end_sequence then
    {
      --put the check for deleted location here.
      if (l_hold_policy_no <> l_policy_no and
          l_hold_policy_no <> 0) or
         (l_hold_end_sequence <> l_end_sequence and
          l_hold_policy_no = l_policy_no) then
        {
          do check_for_minimum_premium
          do check_for_deleted_location
        }

      --calculate the prsmaster:total and sfplocation:totals
      l_current_total_premium    = 0
      L_identity_theft_only_once = 0
      l_terrorism_only_once      = 0
      l_sfpend_forms_only_once = 0
      l_percent_of_prsmaster   = 0
      l_hold_policy_no         = l_policy_no
      l_hold_pol_Year          = l_pol_year
      l_hold_end_sequence      = l_end_sequence
      l_hold_prem_no           = l_prem_no
      l_hold_build_no          = l_build_no
      l_hold_line_of_business  = l_line_of_business
      l_hold_lob_subline       = l_lob_subline
      l_sub_code               = 0
      l_do_only_once           = 0
      l_calculate_money_once   = 0
      l_do_terrorism_only_once = 0
      l_misc                   = 0
      l_liability_deductible   = ""
      l_deductible             = ""
      l_iso_statement_line     = ""
      l_county_str             = ""
      l_process_umbrella_once  = 0
      l_liability_is_policy_wide = 0  --used for contractors to only total liabiity once
      l_identity_theft = 0            --used for contractors to only total theft once
    }

  switch (sfpmaster:trans_code)
    case 10 : l_policy_indicator = "NEW"
    case 11 : l_policy_indicator = "CANCELLED"
    case 12 : l_policy_indicator = "INCREASE COVERAGE"
    case 13 : l_policy_indicator = "DECREASE COVERAGE"
    case 14 : BEGIN
                if sfpname:eff_date >= 01.25.2016 then
                  l_policy_indicator = "RENEWAL"
                else
                  l_policy_indicator = "NEW"
              END
    case 15 : l_policy_indicator = "AUDIT"
    case 16 : l_policy_indicator = "REINSTATEMENT"
  END


  do check_if_claim_was_made(sfpname:policy_no,sfpname:eff_date, sfpname:exp_date)
  do check_for_fac

  switch (sfsline:lob_code)
    case "BOP" : BEGIN
                   do get_bop_info
                   do check_for_county(bopgeneral:state,bopgeneral:county)
                   l_year_built = bopGENERAL:CONSTRUCTION_YEAR
                   l_state = bopgeneral:state
                   do fill_in_locals_by_LOB
                   l_type_of_policy = 10
                 END
    case "SMP","PROPERTY","CINLAND" : BEGIN
                                        access CPPLIABLIMITS,
                                           set CPPLIABLIMITS:policy_no    = l_policy_no,
                                               CPPLIABLIMITS:pol_year     = l_pol_year,
                                               CPPLIABLIMITS:end_sequence = l_end_sequence,exact
                                        do get_correct_state_and_county
                                        l_year_built = 0
                                        do fill_in_locals_by_LOB
                                        if sfsline:lob_subline one of "SMP" then
                                          begin
                                            switch(cppgeneral:symbol)
                                              case " H" : l_type_of_policy = 21
                                              case " A" : l_type_of_policy = 22
                                              case " O" : l_type_of_policy = 23
                                              case " M" : l_type_of_policy = 24
                                              case " I" : l_type_of_policy = 26
                                              case " S" : l_type_of_policy = 27
                                              case " P" : l_type_of_policy = 29
                                              case " C" : l_type_of_policy = 30
                                              default  : l_type_of_policy = 20
                                            end
                                          end
                                        else
                                          l_type_of_policy = 10
                                      ENd
    case "LIABILITY" : BEGIN
                         do get_liability
                         do check_for_county(cppLIABILITY:state,cppLIABILITY:county)
                         l_year_built = 0
                         l_state = cppgeneral:state
                         l_type_of_policy = 10
                         do fill_in_locals_by_LOB
                       END
    case "UMBRELLA" : BEGIN
                        do get_umbrella
                        do check_for_county(cppUMBRELLA:state,cppUMBRELLA:county)
                        l_year_built = 0
                        l_state = cppumbrella:state
                        l_type_of_policy = 10
                        do fill_in_locals_by_LOB
                      END
    case "AUTO"     : BEGIN
                        do check_for_county(capvehicle:state,capvehicle:county)
                        l_year_built = 0
                        l_state = capvehicle:state
                        l_type_of_policy = 10
                        do fill_in_locals_by_LOB
                      END
  END

  if sfsline:LOB_CODE one of "PROPERTY","SMP","CINLAND","LIABILITY" then
    {
      access sfsline_by_subline,
         set sfsline_by_subline:company_id       = sfsline:company_id,
             sfsline_by_subline:line_of_business = sfsline:line_of_business, generic

      while sfsline_by_subline:company_id       = sfsline:company_id and
            sfsline_by_subline:line_of_business = sfsline:line_of_business
        {
          l_lob_subline = sfsline_by_subline:lob_subline
          switch (sfsline_by_subline:lob_code)
            case "FIRE"  : begin
                             l_premium = 0
                             l_cppbusiness_only_once = 0
                             access cppgeneral,
                                set cppgeneral:policy_no    = l_policy_no,
                                    cppgeneral:pol_year     = l_pol_year,
                                    cppgeneral:end_sequence = l_end_sequence,
                                    cppgeneral:prem_no      = l_prem_no,
                                    cppgeneral:build_no     = l_build_no, generic
                             do collect_misc_premium  --make sure it only does it once
                             l_premium = l_misc_premium[1]
                             while cppgeneral:policy_no    = l_policy_no and
                                   cppgeneral:pol_year     = l_pol_year and
                                   cppgeneral:end_sequence = l_end_sequence and
                                   cppgeneral:prem_no      = l_prem_no and
                                   cppgeneral:build_no     = l_build_no
                               {
                                 do check_for_county(cppgeneral:state,cppgeneral:county)
                                 l_misc_premium[1] = 0  --so it only add on the first location
                                 l_loop = 1
                                 do access_cpsclass(cppgeneral:state,
                                                    cppgeneral:group_no,
                                                    cppgeneral:sub_group,
                                                    cppgeneral:property_class_code)

                                 l_class_code = cppgeneral:property_class_code
                                 if trun(l_iso_prop_class_code) = "" then
                                   {
                                     do access_cpstransitional(cppgeneral:state,
                                                               cppgeneral:group_no,
                                                               cppgeneral:sub_group,
                                                               cppgeneral:property_class_code,
                                                               cppgeneral:sub_code)
                                   }
                                 l_iso_class_code = l_iso_prop_class_code
                                 l_base_class_code = l_iso_class_code
                                 while l_loop <= 10
                                   {
                                     if l_loop <= 4 then
                                       {
                                         l_limit[1] = cppgeneral:limit[1]
                                       }
                                     else
                                       {
                                         l_limit[2] = cppgeneral:limit[2]       --contents  screen cppmtmso299
                                       }

                                     l_premium  = l_premium + cppgeneral:premium[l_loop]
                                     l_loop = l_loop + 6                  --cppgeneral:premium at 1 and 7
                                   }
                                 next cppgeneral
                               }
                             access cppbusiness,
                                set cppbusiness:policy_no    = l_policy_no,
                                    cppbusiness:pol_year     = l_pol_year,
                                    cppbusiness:end_sequence = l_end_sequence,
                                    cppbusiness:prem_no      = l_prem_no,
                                    cppbusiness:build_no     = l_build_no, generic

                             while cppbusiness:policy_no    = l_policy_no and
                                   cppbusiness:pol_year     = l_pol_year and
                                   cppbusiness:end_sequence = l_end_sequence and
                                   cppbusiness:prem_no      = l_prem_no and
                                   cppbusiness:build_no     = l_build_no
                               {
                                 l_limit[25] = l_limit[25] + cppbusiness:limit
                                 l_premium = l_premium + cppbusiness:bi_premium[1]
                                 next cppbusiness
                               }

                             access cppendorse,
                                set cppendorse:policy_no     = l_policy_no,
                                    cppendorse:pol_year      = l_pol_year,
                                    cppendorse:end_sequence  = l_end_sequence,
                                    cppendorse:prem_no       = l_prem_no,
                                    cppendorse:build_no      = l_build_no,
                                    cppendorse:code          = "MCP109", generic

                             l_limit[26] = 0
                             while cppendorse:policy_no    = l_policy_no and
                                   cppendorse:pol_year     = l_pol_year  and
                                   cppendorse:end_sequence = l_end_sequence and
                                   cppendorse:prem_no      = l_prem_no and
                                   cppendorse:build_no     = l_build_no and
                                   cppendorse:code         = "MCP109"
                               {
                                 if cppendorse:code one of "MCP109" then
                                   {
                                     l_limit[26] = l_limit[26] + cppendorse:limit[1]
                                   }
                                 next cppendorse
                               }
                             access cppproperty,
                                set cppproperty:policy_no    = l_policy_no,
                                    cppproperty:pol_year     = l_pol_year,
                                    cppproperty:end_sequence = l_end_sequence,
                                    cppproperty:prem_no      = l_prem_no,
                                    cppproperty:build_no     = l_build_no, generic

                             while cppproperty:policy_no    = l_policy_no and
                                   cppproperty:pol_year     = l_pol_year and
                                   cppproperty:end_sequence = l_end_sequence and
                                   cppproperty:prem_no      = l_prem_no and
                                   cppproperty:build_no     = l_build_no
                               {
                                 l_premium = l_premium + cppPROPERTY:INFLATION_PREMIUM[1] +
                                                     cppproperty:inflation_premium[2] +
                                                     cppPROPERTY:PEAK_SEASON_PREM +
                                                     cppPROPERTY:GLASS_PREM +
                                                     cppPROPERTY:SIGNS_ATTACHED_PREM +
                                                     cppPROPERTY:SIGNS_NOT_ATTACHED_PREM +
                                                     cppPROPERTY:BUILDING_CODE_PREM +
                                                     cppPROPERTY:LOSS_UTILITY_PREM +
                                                     cppPROPERTY:MECHANICAL_BREAKDOWN_PREM +
                                                     cppPROPERTY:DEBRIS_REMOVAL_PREM +
                                                     cppPROPERTY:OFF_PREM_OTHER_LOC_PREM +
                                                     cppPROPERTY:OFF_PREM_IN_TRANSIT_PREM +
                                                     cppPROPERTY:OUTDOOR_PROPERTY_PREM +
                                                     cppPROPERTY:PERSONAL_EFFECTS_PREM +
                                                     cppPROPERTY:PERSONAL_PROPERTY_OTHER_PREM +
                                                     cppPROPERTY:VALUABLE_PAPERS_PREM +
                                                     cppPROPERTY:PRECIOUS_METALS_PREM +
                                                     cppPROPERTY:WATER_BACKUP_PREMIUM +
                                                     cppproperty:loss_assessment_prem +
                                                     cppproperty:mcp505_premium +
                                                     cppproperty:ar_prem


                                 l_limit[10] = l_limit[10] + cppproperty:ar_limit +
                                                       cppPROPERTY:GLASS_LIMIT +
                                                       cppproperty:SIGNS_NOT_ATTACHED +
                                                       cppproperty:LOSS_UTILITY +
                                                       cppproperty:DEBRIS_REMOVAL +
                                                       cppproperty:MECHANICAL_BREAKDOWN +
                                                       cppproperty:OFF_PREM_OTHER_LOCATION +
                                                       cppproperty:OFF_PREM_IN_TRANSIT +
                                                       cppproperty:loss_assessment +
                                                       cppproperty:off_prem_in_transit_manual +
                                                       cppproperty:OUTDOOR_PROPERTY +
                                                       cppproperty:PERSONAL_EFFECTS +
                                                       cppproperty:personal_property_of_others +
                                                       cppproperty:VALUABLE_PAPERS +
                                                       cppproperty:PRECIOUS_METALS   --add water backup limit
                                 next cppproperty
                               }
                             do gsn_master_add
                           end
            case "ECVMM" : begin
                             l_premium = 0
                             l_cppbusiness_only_once = 0
                             access cppgeneral,
                                set cppgeneral:policy_no    = l_policy_no,
                                    cppgeneral:pol_year     = l_pol_year,
                                    cppgeneral:end_sequence = l_end_sequence,
                                    cppgeneral:prem_no      = l_prem_no,
                                    cppgeneral:build_no     = l_build_no, generic

                             while cppgeneral:policy_no    = l_policy_no and
                                   cppgeneral:pol_year     = l_pol_year and
                                   cppgeneral:end_sequence = l_end_sequence and
                                   cppgeneral:prem_no      = l_prem_no and
                                   cppgeneral:build_no     = l_build_no
                               {
                                 for l_counter = 2 to 3        --need to for ec and VMM it is separate on screen so give it to gsn separated. 2 and 3 is used because of ec is cppgeneral:premium[2] and vmm is cppgeneral:premim[3]
                                   {
                                     l_loop = l_counter   --start while out at 2
                                     while l_loop <= 10
                                       {
                                         if l_loop <= 4 then
                                           {
                                             l_limit[1]    = cppgeneral:limit[1]
                                           }
                                         else
                                           {
                                             l_limit[2]   = cppgeneral:limit[2]       --contents  screen cppmtmso299
                                           }

                                         l_premium     = l_premium + cppgeneral:premium[l_loop]
                                         l_loop = l_loop + 6              --cppgeneral:premium at 1 and 7
                                       }
                                   }
                                 next cppgeneral
                               }

                             access cppbusiness,
                                set cppbusiness:policy_no    = l_policy_no,
                                    cppbusiness:pol_year     = l_pol_year,
                                    cppbusiness:end_sequence = l_end_sequence,
                                    cppbusiness:prem_no      = l_prem_no,
                                    cppbusiness:build_no     = l_build_no, generic

                             while cppbusiness:policy_no    = l_policy_no and
                                   cppbusiness:pol_year     = l_pol_year and
                                   cppbusiness:end_sequence = l_end_sequence and
                                   cppbusiness:prem_no      = l_prem_no and
                                   cppbusiness:build_no     = l_build_no
                               {
                                 l_premium = l_premium + cppbusiness:bi_premium[2] + cppbusiness:bi_premium[3]
                                 next cppbusiness
                               }
                             do gsn_master_add
                           END
            case "OTHER" : begin
                             l_premium = 0
                             access cppgeneral,
                                set cppgeneral:policy_no    = l_policy_no,
                                    cppgeneral:pol_year     = l_pol_year,
                                    cppgeneral:end_sequence = l_end_sequence,
                                    cppgeneral:prem_no      = l_prem_no,
                                    cppgeneral:build_no     = l_build_no, generic

                             while cppgeneral:policy_no    = l_policy_no and
                                   cppgeneral:pol_year     = l_pol_year and
                                   cppgeneral:end_sequence = l_end_sequence and
                                   cppgeneral:prem_no      = l_prem_no and
                                   cppgeneral:build_no     = l_build_no
                               {
                                 l_loop = 4
                                 while l_loop <= 10
                                   {
                                     if l_loop = 4 then
                                       {
                                         l_limit[1] = cppgeneral:limit[1]
                                       }
                                     else
                                       {
                                         l_limit[2] = cppgeneral:limit[2]       --contents  screen cppmtmso299
                                       }
                                     l_premium     = l_premium + cppgeneral:premium[l_loop]
                                     l_loop = l_loop + 6                 --cppgeneral:premium at 1 and 7
                                   }
                                 next cppgeneral
                               }

                             access cppbusiness,
                                set cppbusiness:policy_no    = l_policy_no,
                                    cppbusiness:pol_year     = l_pol_year,
                                    cppbusiness:end_sequence = l_end_sequence,
                                    cppbusiness:prem_no      = l_prem_no,
                                    cppbusiness:build_no     = l_build_no, generic

                             while cppbusiness:policy_no    = l_policy_no and
                                   cppbusiness:pol_year     = l_pol_year and
                                   cppbusiness:end_sequence = l_end_sequence and
                                   cppbusiness:prem_no      = l_prem_no and
                                   cppbusiness:build_no     = l_build_no
                               {
                                 l_premium = l_premium + cppbusiness:bi_premium[4] + cppbusiness:bi_premium[5]
                                 next cppbusiness
                               }
                             do gsn_master_add
                           end
            case "GLASS" : BEGIN
                             l_premium = 0
                             access cppglass,
                                set cppglass:policy_no     = l_policy_no,
                                    cppglass:pol_year      = l_pol_year,
                                    cppglass:end_sequence  = l_end_sequence,
                                    cppglass:prem_no       = l_prem_no,
                                    cppglass:build_no      = l_build_no, generic
                             do check_for_county(cppgeneral:state,cppgeneral:county)
                             while cppglass:policy_no     = l_policy_no and
                                   cppglass:pol_year      = l_pol_year and
                                   cppglass:end_sequence  = l_end_sequence and
                                   cppglass:prem_no       = l_prem_no and
                                   cppglass:build_no      = l_build_no
                               {
                                 l_limit[24] = cppglass:limit
                                 l_premium   = l_premium + cppglass:glass_premium
                                 next cppglass
                               }
                             do gsn_master_add
                           END
            CASE "CRIME" : Begin
                             l_premium = 0
                             l_iso_class_code = l_iso_CRIMe_class_code
                             if trun(l_iso_crime_class_code) = "" then
                               {
                                 l_iso_class_code = l_iso_prop_class_code
                               }
                             access cppcrime1,
                                set cppcrime1:policy_no    = l_policy_no,
                                    cppcrime1:pol_year     = l_pol_year,
                                    cppcrime1:end_sequence = l_end_sequence,
                                    cppcrime1:prem_no      = l_prem_no,
                                    cppcrime1:build_no     = l_build_no, generic

                             while cppcrime1:policy_no    = l_policy_no and
                                   cppcrime1:pol_year     = l_pol_year and
                                   cppcrime1:end_sequence = l_end_sequence and
                                   cppcrime1:prem_no      = l_prem_no and
                                   cppcrime1:build_no     = l_build_no
                               {
                                 if cppcrime1:premium > 0 then
                                   {
                                     if cppcrime1:code one of "MCP171","MCP172","MCP173","MCP175","MCP177","MCP179","MCP181","MCP183" then
                                       {
                                         switch (cppcrime1:code)
                                           case "MCP171" : begin
                                                             l_crime_form = "A"
                                                             l_stored_loc = 17
                                                           end
                                           case "MCP172" : begin
                                                             l_crime_form = "B"
                                                             l_stored_loc = 18
                                                           end
                                           case "MCP173" : begin
                                                             l_crime_form = "C"
                                                             l_stored_loc = 19
                                                           end
                                           case "MCP175" : begin
                                                             l_crime_form = "D"
                                                             l_stored_loc = 20
                                                           end
                                           case "MCP177" : begin
                                                             l_crime_form = "E"
                                                             l_stored_loc = 21
                                                           end
                                           case "MCP181" : begin
                                                             l_crime_form = "L"
                                                             l_stored_loc = 22
                                                             l_deductible = str(cppCRIME:DEDUCTIBLE)
                                                           end
                                         END  --SWITCH

                                       }
                                     access cppcrime,
                                        set cppcrime:policy_no    = l_policy_no,
                                            cppcrime:pol_year     = l_pol_year,
                                            cppcrime:end_sequence = l_end_sequence,
                                            cppcrime:prem_no      = l_prem_no,
                                            cppcrime:build_no     = l_build_no,
                                            cppcrime:crime_form   = l_crime_form, exact

                                     while cppcrime:policy_no    = l_policy_no and
                                           cppcrime:pol_year     = l_pol_year and
                                           cppcrime:end_sequence = l_end_sequence and
                                           cppcrime:prem_no      = l_prem_no and
                                           cppcrime:build_no     = l_build_no and
                                           cppcrime:CRIME_FORM   = l_crime_form
                                       {
                                         do check_for_county(cppcrime:state,cppcrime:county)
                                         l_limit[l_stored_loc] = l_limit[l_stored_loc] + cppCRIME:LIMIT[1]
                                         next cppCRIME
                                       }

                                     l_premium = l_premium + cppCRIME1:PREMIUM
                                     l_sub_code = l_sub_code + 1
                                   }  --if cppcrime1
                                 next cppcrime1
                               }
                             do gsn_master_add
                           END
            case "INLAND" : BEGIN
                              l_premium = 0
                              access cppinland,
                                 set cppinland:policy_no     = l_policy_no,
                                     cppinland:pol_year      = l_pol_year,
                                     cppinland:end_sequence  = l_end_sequence,
                                     cppinland:prem_no       = l_prem_no,
                                     cppinland:build_no      = l_build_no, generic

                              if l_iso_class_code = "" then
                                {
                                  l_iso_class_code = l_base_class_code
                                }
                              do check_for_county(cppinland:state,cppinland:county)
                              while cppinland:policy_no     = l_policy_no and
                                    cppinland:pol_year      = l_pol_year and
                                    cppinland:end_sequence  = l_end_sequence and
                                    cppinland:prem_no       = l_prem_no and
                                    cppinland:build_no      = l_build_no
                               {
                                 l_premium = cppINLAND:premium
                                 access cppendorse,
                                    set cppendorse:policy_no     = l_policy_no,
                                        cppendorse:pol_year      = l_pol_year,
                                        cppendorse:end_sequence  = l_end_sequence,
                                        cppendorse:prem_no       = l_prem_no,
                                        cppendorse:build_no      = l_build_no,
                                        cppendorse:code          = cppinland:code, generic

                                 l_total_premium = 0

                                 l_limit[27] = 0
                                 while cppendorse:policy_no    = l_policy_no and
                                       cppendorse:pol_year     = l_pol_year  and
                                       cppendorse:end_sequence = l_end_sequence and
                                       cppendorse:prem_no      = l_prem_no and
                                       cppendorse:build_no     = l_build_no and
                                       cppendorse:code         = cppinland:code
                                   {
                                     if cppendorse:code one of "MIM012","MIM100","MIM101","MIM110","MIM112","MIM113","MIM114","MIM116","MIM121" then
                                       {
                                         l_limit[27] = l_limit[27] + cppendorse:limit[1]
                                       }
                                     l_premium = cppendorse:premium[1] * cppinland:package_mod * cppinland:COMPANY_DEVIATION * cppinland:IRPM
                                     l_total_PREMIUM = L_TOTAL_PREMIUM  + l_premium
                                     l_sub_code = l_sub_code + 1
                                     do gsn_master_add
                                     next cppendorse
                                   }
                                 if l_total_premium > cppinland:premium then
                                   {
                                     l_premium = l_total_premium - l_premium
                                   }
                                 next cppinland
                               }
                            END
            case "BOILER" : BEGIN
                              l_premium = 0
                              do get_correct_state_and_county
                              access cppproperty,
                                 set cppproperty:policy_no    = l_policy_no,
                                     cppproperty:pol_year     = l_pol_year,
                                     cppproperty:end_sequence = l_end_sequence,
                                     cppproperty:prem_no      = l_prem_no,
                                     cppproperty:build_no     = l_build_no, generic

                              while cppproperty:policy_no    = l_policy_no and
                                    cppproperty:pol_year     = l_pol_year and
                                    cppproperty:end_sequence = l_end_sequence and
                                    cppproperty:prem_no      = l_prem_no and
                                    cppproperty:build_no     = l_build_no
                                {
                                  l_premium  = l_premium + cppproperty:boiler_premium[1] + cppproperty:boiler_premium[2]
                                  next cppproperty
                                }
                              do gsn_master_add
                            END
             case "TERROR" : BEGIN
                               do get_correct_state_and_county
                               l_premium = 0
                               if l_do_terrorism_only_once one of 0 then
                                 {
                                   if sfpmaster:terrorism_premium <> 0 then
                                     {
                                       l_do_terrorism_only_once = 1
                                     }
                                   l_premium = sfpmaster:terrorism_premium
                                   do gsn_master_add
                                }
                             END

            case "PREMISE" : begin   --should alway have this may not always have products do get class code here
                               l_premium = 0
                               access CPPLIABLIMITS,
                                  set CPPLIABLIMITS:policy_no    = l_policy_no,
                                      CPPLIABLIMITS:pol_year     = l_pol_year,
                                      CPPLIABLIMITS:end_sequence = l_end_sequence,exact

                               access cppliability_all_locations,
                                  set cppliability_all_locations:policy_no     = l_policy_no,
                                      cppliability_all_locations:pol_year      = l_pol_year,
                                      cppliability_all_locations:end_sequence  = l_end_sequence,
                                      cppliability_all_locations:prem_no       = l_prem_no,
                                      cppliability_all_locations:build_no      = l_build_no, generic


                               do check_for_county(CPPLIability:state,CPPLIABility:county)

                               while cppliability_all_locations:policy_no    = l_policy_no and
                                     cppliability_all_locations:pol_year     = l_pol_year and
                                     cppliability_all_locations:end_sequence = l_end_sequence and
                                     cppliability_all_locations:prem_no      = l_prem_no and
                                     cppliability_all_locations:build_No     = l_build_no
                                 {
                                   l_class_code = cppliability_all_locations:class_code
                                   if cppliability_all_locations:minimum_premium[1] <> 0 then
                                     {
                                       l_premium = cppliability_all_locations:minimum_premium[1]
                                     }
                                   else
                                     {
                                       l_premium = cppliability_all_locations:prem[1] +
                                                   cppliability_all_locations:independent_contractor_premium +
                                                   cppliability_all_locations:total_misc +
                                                   cppliability_all_locations:total_endorsements
                                     }

                                   do access_cpsclass(cppliability_all_locations:state,
                                                      cppliability_all_locations:group_no,
                                                      cppliability_all_locations:sub_group,
                                                      cppliability_all_locations:class_code)
                                   l_iso_class_code = l_iso_liab_class_code
                                   l_sub_code = l_sub_code + 1
                                   do gsn_master_add
                                   l_add_premise = 1
                                   next cppliability_all_locations
                                 }
                               if l_add_premise not one of 1 then
                                 {
                                   l_sub_code = l_sub_code + 1
                                   do gsn_master_add
                                 }
                             END
            case "PRODUCT" : begin
                               l_premium = 0
                               l_add_products = 0
                               access cppliability_all_locations,
                                  set cppliability_all_locations:policy_no     = l_policy_no,
                                      cppliability_all_locations:pol_year      = l_pol_year,
                                      cppliability_all_locations:end_sequence  = l_end_sequence,
                                      cppliability_all_locations:prem_no       = l_prem_no,
                                      cppliability_all_locations:build_No      = l_build_no, generic

                               while cppliability_all_locations:policy_no    = l_policy_no and
                                     cppliability_all_locations:pol_year     = l_pol_year and
                                     cppliability_all_locations:end_sequence = l_end_sequence and
                                     cppliability_all_locations:prem_no      = l_prem_no and
                                     cppliability_all_locations:build_No     = l_build_no
                                 {
                                   l_class_code = cppliability_all_locations:class_code
                                   l_premium = cppliability_all_locations:prem[2]
                                   do access_cpsclass(cppliability_all_locations:state,
                                                      cppliability_all_locations:group_no,
                                                      cppliability_all_locations:sub_group,
                                                      cppliability_all_locations:class_code)

                                   l_iso_class_code = l_iso_liab_class_code
                                   l_sub_code = l_sub_code + 1
                                   do gsn_master_add
                                   l_add_products = 1
                                   next cppliability_all_locations
                                 }
                               if L_add_products not one of 1 then   --not Products on location
                                 {
                                   l_sub_code = l_sub_code + 1
                                   do gsn_master_add
                                 }
                             END

             case "IRPM" : begin
                             l_premium = 0
                             l_add_irpm_only_once = 0
                             l_premium = sfpmaster:total[8]
                             if l_premium > 0 then
                               {
                                 l_add_irpm_only_once = 1
                               }
                             do gsn_master_add
                           END
          }  -- switch
          next sfsline_by_subline
        }  --while
    }


  if sfsline:LOB_CODE one of "BOP" then
    {
      do process_bop
    }

  if sfsline:LOB_CODE one of "SCP" then
    {
      do process_scp    --contractors
    }

  if sfsline:LOB_CODE one of "UMBRELLA" then
    {
      if l_process_umbrella_once = 0 then
        {
          l_process_umbrella_once = 1
          do process_UMBRELLA    --UMBRELLA
        }
    }
  if sfsline:LOB_CODE one of "AUTO" then
    {
      do process_AUTO    --AUTO
    }
end

procedure collect_misc_premium

BEGIN
  Access sfpMISC,
     Set sfpMISC:policy_NO    = l_policy_NO,
         sfpmisc:pol_Year     = l_pol_Year,
         sfpmisc:end_sequence = l_end_sequence, Generic
  if L_misc one of 0 then
    {
      While sfpMISC:policy_NO    = l_policy_NO and
            sfpmisc:pol_year     = l_pol_year and
            sfpmisc:end_sequence = l_end_sequence
        Begin
          switch (sfpMISC:LOB_END_CODE)
            case "P" : L_MISC_PREMIUM[1] = L_MISC_PREMIUM[1] + sfpMISC:PREMIUM
            case "L" : l_misc_premium[2] = L_MISC_PREMIUM[2] + sfpMISC:PREMIUM  --liability
            case "I" : l_misc_premium[3] = L_MISC_PREMIUM[3] + sfpMISC:PREMIUM  --inland marine
            case "U" : l_misc_premium[4] = L_MISC_PREMIUM[4] + sfpMISC:PREMIUM  --umbrella
          End
          l_misc = 1
          Next sfpMISC
        END
   }
End

procedure get_correct_state_and_county

BEGIN
  access cppgeneral,
     set cppgeneral:policy_no    = sfplocation:policy_no,
         cppgeneral:pol_year     = sfplocation:pol_year,
         cppgeneral:end_sequence = sfplocation:end_sequence,
         cppgeneral:prem_no      = sfplocation:prem_no,
         cppgeneral:build_no     = sfplocation:build_no, generic

 if cppgeneral:policy_no    = sfplocation:policy_no and
    cppgeneral:pol_year     = sfplocation:pol_year and
    cppgeneral:end_sequence = sfplocation:end_sequence and
    cppgeneral:prem_no      = sfplocation:prem_no and
    cppgeneral:build_no     = sfplocation:build_no then
   {
     do check_for_county(cppgeneral:state,cppgeneral:county)
     l_state = cppgeneral:state
   }
     do get_liability
     if cppliability:policy_no     = sfplocation:policy_no and
        CPPLIABility:pol_year      = sfplocation:pol_year and
        CPPLIABility:end_sequence  = sfplocation:end_sequence and
        cppliability:prem_no       = sfplocation:prem_no and
        cppliability:build_no      = sfplocation:build_No then
       {
         do check_for_county(cppliability:state,cppliability:county)
         l_state = cppliability:state
       }
     access cppinland,
        set cppinland:policy_no     = sfplocation:policy_no,
            cppinland:pol_year      = sfplocation:pol_year,
            cppinland:end_sequence  = sfplocation:end_sequence,
            cppinland:prem_no       = sfplocation:prem_no,
            cppinland:build_no      = sfplocation:build_no, generic

     if cppinland:policy_no     = sfplocation:policy_no and
        cppinland:pol_year      = sfplocation:pol_year and
        cppinland:end_sequence  = sfplocation:end_sequence and
        cppinland:prem_no       = sfplocation:prem_no and
        cppinland:build_no      = sfplocation:build_no then
       {
         do check_for_county(cppinland:state,cppinland:county)
         l_state = cppinland:state
       }
END

procedure process_auto

BEGIN
  access sfsline_by_subline,
     set sfsline_by_subline:company_id       = sfsline:company_id,
         sfsline_by_subline:line_of_business = sfsline:line_of_business, generic

  while sfsline_by_subline:company_id       = sfsline:company_id and
        sfsline_by_subline:line_of_business = sfsline:line_of_business
    {
      l_lob_subline = sfsline_by_subline:lob_subline
      switch (sfsline_by_subline:lob_code)
         case "LIAB"  : begin      --policy_level
                          l_premium = capvehicle:vehicle_totals[1]
                          do gsn_master_add
                         end

        case "TERROR"  : begin
                           l_premium = sfpmaster:terrorism_premium
                           do gsn_master_add
                         end
        case "COMP"  : begin
                           l_premium = capvehicle:vehicle_totals[7]
                           do gsn_master_add
                         end
        case "COLL"  : begin
                           l_premium = capvehicle:vehicle_totals[8]
                           do gsn_master_add
                         end
        case "TOW"  : begin
                           l_premium = capvehicle:vehicle_totals[10]
                           do gsn_master_add
                         end
        case "RENT"  : begin
                           l_premium = capvehicle:vehicle_totals[9]
                               do gsn_master_add
                         end
        case "UMUIM"  : begin
                           l_premium = capvehicle:vehicle_totals[3] + capvehicle:vehicle_totals[17]
                               do gsn_master_add
                         end
        case "MEDPAY"  : begin
                           l_premium = capvehicle:vehicle_totals[2]
                               do gsn_master_add
                         end
        case "BPIP"  : begin
                           l_premium = capvehicle:vehicle_totals[5]
                           do gsn_master_add
                         end
        case "BRPIP"  : begin
                          if L_BRPIP_only_once = 0 then
                            {
                              L_BRPIP_only_once = 1
                              do broaded_pip
                              l_premium = l_broadened_pip
                              do gsn_master_add
                            }
                         end
        case "ADDLPIP"  : begin
                           l_premium = capvehicle:vehicle_totals[6]
                           do gsn_master_add
                         end

        case "PEDPIP"  : begin
                           l_premium = capvehicle:vehicle_totals[4]
                           do gsn_master_add
                         end
         case "MEDEXP"  : begin
                           l_premium = capvehicle:vehicle_totals[13]
                              do gsn_master_add
                         end
         case "MISC"  : begin  --policy_level only do it once
                           l_premium = sfpmaster:total[18] + sfpmaster:total[15]
                           do gsn_master_add
                         end
         case "EXPIP"  : begin
                           l_premium = capvehicle:vehicle_totals[11]
                               do gsn_master_add
                         end
         case "HIRED"  : begin    --policy level
                           if l_hired_only_once = 0 then
                             {
                               l_hired_only_once = 1
                               l_premium = sfpmaster:other_totals[3]
                               do gsn_master_add
                             }
                         end
         case "HIREDCOMP"  : begin  --policy level
                               if l_hiredcomp_only_once = 0 then
                                {
                                  l_hiredcomp_only_once = 1
                                  l_premium = sfpmaster:other_totals[4]
                                  do gsn_master_add
                                }
                         end
         case "NONOWNED"  : begin   --policy level
                              if l_nonowned_only_once = 0 then
                                {
                                  l_nonowned_only_once = 1
                                  l_premium = sfpmaster:total[11]
                                  do gsn_master_add
                                }
                         end
         case "NONMEDPAY"  : begin --policy level
                               if l_nonmedpay_only_once = 0 then
                                 {
                                   l_nonmedpay_only_once = 1
                                   l_premium = sfpmaster:other_totals[6]
                                   do gsn_master_add
                                 }

                         end
         case "NONLIAB"  : begin      --policy level
                             if l_nonliab_only_once = 0 then
                               {
                                 l_nonliab_only_once = 1
                                 l_premium = sfpmaster:other_totals[7]
                                 do gsn_master_add
                               }
                         end
         case "DOC"  : begin      --policy level
                           if l_doc_only_once = 0 then
                             {
                               l_premium = sfpmaster:other_totals[1]
                               l_doc_only_once = 1
                               do gsn_master_add
                             }
                       end
         case "DOCLIAB"  : begin      --policy level
                             if l_docliab_only_once = 0 then
                               {
                                 l_docliab_only_once = 1
                                 l_premium = sfpmaster:other_totals[2]
                                 do gsn_master_add
                               }
                         end
         case "SOUND"  : begin      --policy_level
                           l_premium = sfpmaster:other_totals[15]
                               do gsn_master_add
                         end
         case "GAP"  : begin      --policy_level
                           l_premium = sfpmaster:other_totals[14]
                           do gsn_master_add
                         end
         case "PACKAGE"  : begin      --policy_level
                             if l_package_only_once = 1 then
                               {
                                 l_package_only_once = 0
                                 l_premium = sfpmaster:other_totals[20]
                                 do gsn_master_add
                               }
                           end

       end
      next  sfsline_by_subline
    }

END

procedure broaded_pip

BEGIN
  access capdoc,
     set capdoc:policy_no    = l_policy_no,
         capdoc:pol_year     = l_pol_year,
         capdoc:end_sequence = l_end_sequence, generic

  l_broadened_pip = 0
  while capdoc:policy_no    = l_policy_no and
        capdoc:pol_year     = l_pol_year and
        capdoc:end_sequence = l_end_sequence
    {
      l_broadened_pip = l_broadened_pip + capdoc:broadened_premium
      next capdoc
    }
END

procedure process_umbrella

BEGIN
  access cppumunderlying,
     set cppumunderlying:policy_no    = l_policy_no,
         cppumunderlying:pol_year     = l_pol_year,
         cppumunderlying:end_sequence = l_end_sequence, generic

  l_class_code = 99935
  l_iso_class_code = "99935"

  access sfsline_by_subline,
     set sfsline_by_subline:company_id       = sfsline:company_id,
         sfsline_by_subline:line_of_business = sfsline:line_of_business, generic

  while sfsline_by_subline:company_id       = sfsline:company_id and
        sfsline_by_subline:line_of_business = sfsline:line_of_business
    {
      l_lob_subline = sfsline_by_subline:lob_subline
      switch (sfsline_by_subline:lob_code)
        case "TERROR"  : begin
                           l_premium = sfpmaster:terrorism_premium
                           do gsn_master_add
                         end
        case "ONE"  : begin
                           l_premium = sfpmaster:total[1]
                           do gsn_master_add
                         end
        case "TWO"  : begin
                           l_premium = sfpmaster:total[2]
                           do gsn_master_add
                         end
        case "THREE"  : begin
                           l_premium = sfpmaster:total[3]
                           do gsn_master_add
                         end
        case "FOUR"  : begin
                           l_premium = sfpmaster:total[4]
                           do gsn_master_add
                         end
        case "FIVE"  : begin
                           l_premium = sfpmaster:total[5]
                           do gsn_master_add
                         end
        case "ELONE"  : begin
                           l_premium = sfpmaster:other_totals[1]
                           do gsn_master_add
                         end
        case "ELTWO"  : begin
                           l_premium = sfpmaster:other_totals[2]
                           do gsn_master_add
                         end
        case "ELTHREE"  : begin
                           l_premium = sfpmaster:other_totals[3]
                           do gsn_master_add

                         end
        case "ELFOUR"  : begin
                           l_premium = sfpmaster:other_totals[4]
                           do gsn_master_add
                         end
        case "ELFIVE"  : begin
                           l_premium = sfpmaster:other_totals[5]
                           do gsn_master_add
                         end
      end
      next sfsline_by_subline
    }
END

procedure process_scp      --contractors

BEGIN
  access sfsline_by_subline,
     set sfsline_by_subline:company_id       = sfsline:company_id,
         sfsline_by_subline:line_of_business = sfsline:line_of_business, generic

  while sfsline_by_subline:company_id       = sfsline:company_id and
        sfsline_by_subline:line_of_business = sfsline:line_of_business
    {
      do get_contractor_info

      if scpcontractor:policy_no    = sfplocation:policy_no and
         scpcontractor:pol_year     = sfplocation:pol_year and
         scpcontractor:end_sequence = sfplocation:end_sequence and
         scpcontractor:prem_no      = sfplocation:prem_no and
         scpcontractor:build_no     = sfplocation:build_no then
        {
          do check_for_county(scpcontractor:state,scpcontractor:county)
          l_year_built = 0
          l_state = scpcontractor:state
          do fill_in_locals_by_LOB
          l_lob_subline = sfsline_by_subline:lob_subline
          l_premium = 0
      switch (sfsline_by_subline:lob_code)
        case "TERROR"  : begin
                           l_premium = sfpmaster:terrorism_premium
                           do gsn_master_add
                         end
        CASE "THEFT"   : begin
                           if l_identity_theft = 0 then
                             {
                               l_identity_theft = 1
                               l_premium = sfpmaster:total[7]
                               do gsn_master_add
                             }
                         end
        Case "LIABILITY" : BEGIN
                             if l_liability_is_policy_wide = 0 then
                               {
                                 l_liability_is_policy_wide = 1
                                 L_PREMIUM = sfpmaster:total[1] - sfpmaster:total[10] - sfpmaster:total[9]           --irpm is in total[19]
                                 do gsn_master_add
                               }
                           end
        case "PROPERTY" : BEGIN
                            L_PREMIUM = scpcontractor:building_premium + scpcontractor:property_premium + scpcontractor:expanded_premium +
                                        scpcontractor:personal_premium + scpcontractor:loss_premium + scpCONTRACTOR:EXPANDED_PREMIUM_PERSONAL_PROP
                            access sfpend,
                               set sfpend:policy_no     = l_policy_no,
                                   sfpend:pol_year      = l_pol_year,
                                   sfpend:end_sequence  = l_end_sequence,
                                   sfpend:prem_no       = l_prem_no,
                                   sfpend:build_no      = l_build_no, generic
                            l_limit[10] = 0
                            while sfpend:policy_no    = l_policy_no and
                                  sfpend:pol_year     = l_pol_year and
                                  sfpend:end_sequence = l_end_sequence and
                                  sfpend:prem_no      = l_prem_no and
                                  sfpend:build_No     = l_build_no
                              {
                                if sfpend:code one of "MSC713D" then
                                  {
                                    l_premium = l_premium + sfpend:premium
                                  }
                                next sfpend
                              }
                            access scpendorse,
                               set scpendorse:policy_no     = l_policy_no,
                                   scpendorse:pol_year      = l_pol_year,
                                   scpendorse:end_sequence  = l_end_sequence,
                                   scpendorse:prem_no       = l_prem_no,
                                   scpendorse:build_no      = l_build_no,
                                   scpendorse:code          = sfpend:code, generic

                            while scpendorse:policy_no     = l_policy_no and
                                  scpendorse:pol_year      = l_pol_year and
                                  scpendorse:end_sequence  = l_end_sequence and
                                  scpendorse:prem_no       = l_prem_no and
                                  scpendorse:build_no      = l_build_no and
                                  scpendorse:code          = sfpend:code
                              {
                                if scpendorse:code one of "MSC713D" then
                                  {
                                    l_limit[10] = l_limit[10] + scpendorse:limit[1] + scpendorse:limit[2] + scpendorse:limit[3] + scpendorse:limit[4]+ scpendorse:limit[5] + scpendorse:limit[6] + scpendorse:limit[7]

                                  }
                                next scpendorse
                              }

                            access scpmoney,
                               set scpmoney:policy_no    = scpcontractor:policy_no,
                                   scpmoney:pol_year     = scpcontractor:pol_year,
                                   scpmoney:end_sequence = scpcontractor:end_sequence, exact

                            if scpmoney:policy_no    = scpcontractor:policy_no and
                               scpmoney:pol_year     = scpcontractor:pol_year and
                               scpmoney:end_sequence = scpcontractor:end_sequence then
                              {
                                l_calculate_money_once = 1
                                l_premium = l_premium + scpMONEY:MONEY_PREMIUM
                              }
                            do gsn_master_add
                          end
        CASE "INLAND"  : BEGIN
                           if sfsline_by_subline:lob_subline one of "89" then
                             {
                               access sfpend,
                                  set sfpend:policy_no     = l_policy_no,
                                      sfpend:pol_year      = l_pol_year,
                                      sfpend:end_sequence  = l_end_sequence,
                                      sfpend:prem_no       = l_prem_no,
                                      sfpend:build_no      = l_build_no, generic
                               l_limit[27] = 0
                               while sfpend:policy_no    = l_policy_no and
                                     sfpend:pol_year     = l_pol_year and
                                     sfpend:end_sequence = l_end_sequence and
                                     sfpend:prem_no      = l_prem_no and
                                     sfpend:build_No     = l_build_no
                                 {
                                   access scpendorse,
                                      set scpendorse:policy_no     = l_policy_no,
                                          scpendorse:pol_year      = l_pol_year,
                                          scpendorse:end_sequence  = l_end_sequence,
                                          scpendorse:prem_no       = l_prem_no,
                                          scpendorse:build_no      = l_build_no,
                                          scpendorse:code          = sfpend:code, generic

                                   while scpendorse:policy_no     = l_policy_no and
                                         scpendorse:pol_year      = l_pol_year and
                                         scpendorse:end_sequence  = l_end_sequence and
                                         scpendorse:prem_no       = l_prem_no and
                                         scpendorse:build_no      = l_build_no and
                                         scpendorse:code          = sfpend:code
                                     {
                                       if scpendorse:code one of "GIM121","MIM012" then
                                         {
                                           l_limit[27] = l_limit[27] + scpendorse:limit[1] + scpendorse:limit[2] + scpendorse:limit[3] + scpendorse:limit[4]+ scpendorse:limit[5] + scpendorse:limit[6] + scpendorse:limit[7]
                                         }
                                       next scpendorse
                                     }
                                   if sfpend:code one of "GIM121","MIM012" then
                                     {
                                       l_premium = l_premium + sfpend:premium
                                     }
                                   next sfpend
                                 }
                                do gsn_master_add
                             }
                         end
      END
      }
      next sfsline_by_subline
    }  --while
END

procedure process_bop

BEGIN
  local unsigned ascii number l_BOP_subline_only_once[1];
  local unsigned ascii number l_do_minimum_premium_only_once[1];
  l_bop_subline_only_once = 0
  access sfsline_by_subline,
     set sfsline_by_subline:company_id       = sfsline:company_id,
         sfsline_by_subline:line_of_business = sfsline:line_of_business, generic

  while sfsline_by_subline:company_id       = sfsline:company_id and
        sfsline_by_subline:line_of_business = sfsline:line_of_business
    {
      l_lob_subline = sfsline_by_subline:lob_subline
      l_sub_code = 0
      switch (sfsline_by_subline:lob_code)
        case "BOILER"  : begin
                           l_premium = bopgeneral:boilers_premium
                           do gsn_master_add
                         end
        case "TERROR"  : begin
                           l_premium = sfpmaster:terrorism_premium
                           if l_terrorism_only_once = 0 then
                             {
                               l_terrorism_only_once = 1
                               do gsn_master_add
                             }
                         end
        CASE "THEFT"   : begin
                           l_premium = sfpmaster:total[7]
                           if l_identity_theft_only_once = 0 then
                             {
                               L_identity_theft_only_once = 1
                               do gsn_master_add
                             }
                         end
        CASE "BOP"     : begin
                           if l_bop_subline_only_once = 0 then
                             {
                               l_bop_subline_only_once = 1
                               l_do_minimum_premium_only_once = 0
                               if sfpmaster:irpm <> 0 then
                                 {
                                   do get_sfpend_total    -- this will add up all endorsements into the policy
                                 }
                               for l_loop = 1 to 2
                                 {
                                   if sfpmaster:form one of 1 then
                                     {
                                       l_lob_subline = "60"
                                     }
                                   else
                                     {
                                       l_lob_subline = "70"
                                     }
                                   if sfpmaster:irpm <> 0 then
                                     {
                                       l_premium = ((bopgeneral:location_premium + bopgeneral:territory_charge_credit - l_sfpend_premium  - bopgeneral:boilers_premium) * (1 + (sfpmaster:irpm * 0.01))) + l_sfpend_premium
                                     }
                                   else
                                     {
                                       l_premium = bopgeneral:location_premium + bopgeneral:territory_charge_credit - bopgeneral:boilers_premium
                                     }

                                   if l_do_minimum_premium_only_once = 0 then    --added up total for minimum premium the compares it to sfscontrol:minimum.
                                     {
                                       l_do_minimum_premium_only_once = 1
                                       l_current_total_premium = l_current_total_premium + l_premium
                                     }
                                   if l_loop = 1 then   --split out for property and liability
                                     {
                                       l_iso_statement_line = "051"
                                       l_premium = l_premium * 0.60
                                     }
                                   else
                                     {
                                       l_iso_statement_line = "052"
                                       l_premium = l_premium * 0.40
                                     }
                                   l_sub_code = l_sub_code + 1
                                   do gsn_master_add
                                 }
                             }
                         end
      END
      next sfsline_by_subline
    }  --while
END


procedure get_sfpend_total     --this will only total up the bu2510 and bu2597

BEGIN
  access sfpend,
     set sfpend:policy_no     = l_policy_no,
         sfpend:pol_year      = l_pol_year,
         sfpend:end_sequence  = l_end_sequence,
         sfpend:prem_no       = l_prem_no,
         sfpend:build_no      = l_build_no, generic

  l_sfpend_premium = 0
  while sfpend:policy_no    = l_policy_no and
        sfpend:pol_year     = l_pol_year and
        sfpend:end_sequence = l_end_sequence and
        sfpend:prem_no      = l_prem_no and
        sfpend:build_No     = l_build_no
    BEGIN
      if sfpend:code one of "BU2510", "BU2597" then  --THESE need to be subtracted out of the total for location if an IRPM is applied.  then added back in after the irpm is taken off.
        {
          l_sfpend_premium = l_sfpend_premium + sfpend:premium
        }

      next sfpend
    End

  access sfpend,
     set sfpend:policy_no     = l_policy_no,
         sfpend:pol_year      = l_pol_year,
         sfpend:end_sequence  = l_end_sequence,
         sfpend:prem_no       = 0,
         sfpend:build_no      = 0, generic

  if l_sfpend_forms_only_once = 0 then
    {
      while sfpend:policy_no    = l_policy_no and              --only need to do these once for the entire policy
            sfpend:pol_year     = l_pol_year and
            sfpend:end_sequence = l_end_sequence and
            sfpend:prem_no      = 0 and
            sfpend:build_No     = 0
        BEGIN
          if sfpend:code one of "BU2510", "BU2597" then  --THESE need to be subtracted out of the total for location if an IRPM is applied.  then added back in after the irpm is taken off.
            {
              l_sfpend_forms_only_once = 1
              l_sfpend_premium = l_sfpend_premium + sfpend:premium
            }
          next sfpend
        END
    }
END

procedure access_cpsclass(number p_state,
                          number p_group_no,
                          number p_sub_group,
                          number p_class_code)

BEGIN
  local unsigned ascii number l_cpsclass_line_of_business = 8;
  l_iso_prop_class_code  = ""
  l_iso_liab_class_code  = ""
  l_iso_sic_code         = ""
  l_iso_crime_class_code = ""
  l_iso_class_code       = ""
/*  if l_policy_no one of 2434 then
    {
      write("%c<014>%S%x",05001,"l_policy_no",l_policy_no)
      write("%c%S%x",06001,"p_state",p_state)
      write("%c%S%x",07001,"p_state",p_group_no)
      write("%c%S%x",08001,"p_state",p_sub_group)
      write("%c%S%x",09001,"p_class_code",p_class_code)
      Read (23,1,"Press Enter to Continue ",L_ENTER,1)
    }*/
  Access CPSCLASS_ALIAS,
     Set CPSCLASS_ALIAS:COMPANY_ID       = l_COMPANY_ID,
         CPSCLASS_ALIAS:STATE            = p_STATE,
         CPSCLASS_ALIAS:LINE_OF_BUSINESS = l_cpsclass_line_of_business,
         cpsclass_alias:group_no         = p_group_no,
         cpsclass_alias:sub_group        = p_sub_group,
         cpsclass_alias:class_code       = p_class_code, generic

    while CPSCLASS_ALIAS:COMPANY_ID       = sfpNAME:COMPANY_ID and
          CPSCLASS_ALIAS:STATE            = p_STATE and
          CPSCLASS_ALIAS:LINE_OF_BUSINESS = l_cpsclass_line_of_business and
          CPSCLASS_ALIAS:group_no         = p_group_no and
          cpsclass_alias:sub_group        = p_sub_group and
          cpsclass_alias:class_code       = p_class_code
      begin
        if (sfpname:eff_date >= cpsclass_alias:eff_date and
           (sfpname:eff_date <= cpsclass_alias:exp_date or
           cpsclass_alias:exp_date = 0)) then
          {
            l_iso_prop_class_code  = cpsclass_alias:iso_prop_class_code
            l_iso_liab_class_code  = cpsclass_alias:iso_liab_class_code
            l_iso_sic_code         = cpsclass_alias:sic
            l_iso_crime_class_code = cpsclass_alias:iso_crime_class_code
            if trun(l_iso_crime_class_code) = "" and  l_iso_prop_class_code <> "" then
              {
                l_iso_crime_class_code = cpsclass_alias:iso_prop_class_code
              }
          }
        next cpsclass_alias
      END
END

procedure access_cpstransitional(number p_state,
                                 number p_group_no,
                                 number p_sub_group,
                                 number p_class_code,
                                 number p_sub_code)

BEGIN
  local unsigned ascii number l_cpstransitional_line_of_business = 8;

  Access cpstransitional_ALIAS,
     Set cpstransitional_ALIAS:COMPANY_ID       = l_COMPANY_ID,
         cpstransitional_ALIAS:STATE            = p_STATE,
         cpstransitional_ALIAS:LINE_OF_BUSINESS = l_cpstransitional_line_of_business,
         cpstransitional_alias:group_no         = p_group_no,
         cpstransitional_alias:sub_group        = p_sub_group,
         cpstransitional_alias:class_code       = p_class_code,
         cpstransitional_alias:sub_code         = p_sub_code, generic

    while cpstransitional_ALIAS:COMPANY_ID       = sfpNAME:COMPANY_ID and
          cpstransitional_ALIAS:STATE            = p_STATE and
          cpstransitional_ALIAS:LINE_OF_BUSINESS = l_cpstransitional_line_of_business and
          cpstransitional_ALIAS:group_no         = p_group_no and
          cpstransitional_alias:sub_group        = p_sub_group and
          cpstransitional_alias:class_code       = p_class_code and
          cpstransitional_alias:sub_code         = p_sub_code
      begin
        if (sfpname:eff_date >= cpstransitional_alias:eff_date and
           (sfpname:eff_date <= cpstransitional_alias:exp_date or
           cpstransitional_alias:exp_date = 0)) then
          {
            l_iso_prop_class_code  = cpstransitional_alias:iso_prop_class_code
            if cppgeneral:res_condo = 1 and
               cppgeneral:class_code one of 0030,0031 then
              {
                l_iso_prop_class_code  = "0332"
              }
            l_iso_sic_code         = cpstransitional_alias:sic
          }
        next cpstransitional_alias
      END
END

Procedure PRO_RATA

Begin
  I_EFF_DATE = Dateadd(sfpmaster_check_endorsement:TRANS_EXP,0,-1)
  I_SHORT_RATE = sfpmaster_check_endorsement:SHORT_RATE
  I_TOTAL_DAYS = I_EFF_DATE - sfpmaster_check_endorsement:TRANS_EXP
  I_CX_DAYS = I_EFF_DATE - sfpmaster_check_endorsement:TRANS_EFF
  Include "prorata.pro"
End


procedure check_for_deleted_location

--this procedure will access the gsn_master file and check to see if the prior endorsement to the current endorsement has any missing locations/coverages.

BEGIN
local file gsn_master_prior = alias for gsn_master;
local file sfpname_current = alias for sfpname;
local file sfpmaster_current = alias for sfpmaster;

local signed ascii number l_difference[9] = 0,
                          l_save_prem_no[4],
                          l_prior_end_sequence[4],
                          l_save_build_no[4];

local array [10] of unsigned ascii number l_saved_subline[4];
local unsigned ascii number l_looping[4];
string l_policy_suffix[3];
local unsigned ascii number L_current_trans_code[2],
                            l_flag[1];
wdate l_trans_date,
      l_policy_eff_date,
      l_trans_eff_date,
      l_trans_exp_date,
      l_policy_exp_date;

access gsn_master_loop,
   set gsn_master_loop:policy_no        = l_hold_policy_no,
       gsn_master_loop:pol_year         = l_hold_pol_year,
       gsn_master_loop:end_sequence     = l_hold_end_sequence, generic      --use the current endorsement to access when the endorsement in the the same as the l_endorsement and the pol_year and policy is the same

--I need to find the previous end_sequence.  it will not always be end_sequence -1 so If I go previous here I can save the previous end_sequence and then access it with the correct end_sequence.
--I only need to check the prior endorsment no others are needed because this is done every time a policy endorsement is finished.

while gsn_master_loop:policy_no        = l_hold_policy_no and
      gsn_master_loop:pol_year         = l_hold_pol_year and
      gsn_master_loop:end_sequence     = l_hold_end_sequence
  {
    previous gsn_master_loop
  }

if gsn_master_loop:policy_no        = l_hold_policy_no and   --make sure there is a prior to add something from.
   gsn_master_loop:pol_year         = l_hold_pol_year then
  {
    l_prior_end_sequence = gsn_master_loop:end_sequence    --need to save this to use later so I know the end_sequence to check with.

    --I have to loop from all the location of the prior record and compare it to the one that was just entered to see if there are any deleted location
    --If I find something that is not in the current endorsement then I need to add the prior record into the current and put it as a negative premium

    access gsn_master_current,
       set gsn_master_current:policy_no    = l_hold_policy_no,
           gsn_master_current:pol_year     = l_hold_pol_year,
           gsn_master_current:end_sequence = l_hold_end_sequence, generic

    access sfpname_current,
       set sfpname_current:policy_no    = l_hold_policy_no,
           sfpname_current:pol_year     = l_hold_pol_year,
           sfpname_current:end_sequence = l_hold_end_sequence, generic

    access sfpmaster_current,
       set sfpmaster_current:policy_no    = l_hold_policy_no,
           sfpmaster_current:pol_year     = l_hold_pol_year,
           sfpmaster_current:end_sequence = l_hold_end_sequence, generic

    --I need to get the dates of the current endorsement and save them so I can then add them back in when I add in the missing location with the current endorsments dates.

    if gsn_master_current:policy_no    = l_hold_policy_no and
       gsn_master_current:pol_year     = l_hold_pol_year and
       gsn_master_current:end_sequence = l_hold_end_sequence then
      {
        l_current_trans_code  = gsn_master_current:trans_code
        l_trans_date          = gsn_master_current:trans_date
        l_policy_eff_date     = gsn_master_current:policy_eff_date
        l_policy_exp_date     = gsn_master_current:policy_exp_date
        l_trans_eff_date      = gsn_master_current:trans_eff_date
        l_trans_exp_date      = gsn_master_current:trans_exp_date
        l_policy_suffix       = gsn_master_current:policy_suffix
      }

    access gsn_master_prior,
       set gsn_master_prior:policy_no        = l_hold_policy_no,
           gsn_master_prior:pol_year         = l_hold_pol_year,
           gsn_master_prior:end_sequence     = l_prior_end_sequence, generic

    while gsn_master_prior:policy_no        = l_hold_policy_no and
          gsn_master_prior:pol_year         = l_hold_pol_year and
          gsn_master_prior:end_sequence     = l_prior_end_sequence
      {

        if l_line_of_business one of 5,51,50 and
           l_lob_subline one of "60","70" then
          {
            access gsn_master_current,
               set gsn_master_current:policy_no        = gsn_master_prior:policy_no,
                   gsn_master_current:pol_year         = gsn_master_prior:pol_year,
                   gsn_master_current:end_sequence     = l_hold_end_sequence,
                   gsn_master_current:prem_no          = gsn_master_prior:prem_no,
                   gsn_master_current:build_no         = gsn_master_prior:build_no,
                   gsn_master_current:line_of_business = gsn_master_prior:line_of_business,
                   gsn_master_current:lob_subline      = gsn_master_prior:lob_subline,
                   gsn_master_current:sub_code          = gsn_master_prior:sub_code, exact
          }
        else
          {
            access gsn_master_current,
               set gsn_master_current:policy_no        = gsn_master_prior:policy_no,
                   gsn_master_current:pol_year         = gsn_master_prior:pol_year,
                   gsn_master_current:end_sequence     = l_hold_end_sequence,
                   gsn_master_current:prem_no          = gsn_master_prior:prem_no,
                   gsn_master_current:build_no         = gsn_master_prior:build_no,
                   gsn_master_current:line_of_business = gsn_master_prior:line_of_business,
                   gsn_master_current:lob_subline      = gsn_master_prior:lob_subline, generic
          }



/*        write("%c<014>%x%x l_end_sequence -->%x<--- L_hold_end_sequence --%x<--",01001,"gsn_master_current:policy_no",  gsn_master_current:policy_no, l_end_sequence,l_hold_end_sequence)

        write("%c%x%x",02001,"gsn_master_current:pol_year",        gsn_master_current:pol_year)
        write("%c%x%x",03001,"gsn_master_current:end_sequence",    gsn_master_current:end_sequence)
        write("%c%x%x",04001,"gsn_master_current:prem_no",         gsn_master_current:prem_no)
        write("%c%x%x",05001,"gsn_master_current:build_no",        gsn_master_current:build_no)
        write("%c%x%x",06001,"gsn_master_current:line_of_business",gsn_master_current:line_of_business)
        write("%c%x%x",07001,"gsn_master_current:lob_subline",     gsn_master_current:lob_subline)

        write("%c%x%x",11001,"gsn_master_prior:policy_no",       gsn_master_prior:policy_no)
        write("%c%x%x",12001,"gsn_master_prior:pol_year",        gsn_master_prior:pol_year)
        write("%c%x%x",13001,"gsn_master_prior:end_sequence",    gsn_master_prior:end_sequence)
        write("%c%x%x",14001,"gsn_master_prior:prem_no",         gsn_master_prior:prem_no)
        write("%c%x%x",15001,"gsn_master_prior:build_no",        gsn_master_prior:build_no)
        write("%c%x%x",16001,"gsn_master_prior:line_of_business",gsn_master_prior:line_of_business)
        write("%c%x%x",17001,"gsn_master_prior:lob_subline",     gsn_master_prior:lob_subline)
        write("%c%x%x",18001,"gsn_master_prior:premium ",     gsn_master_prior:premium)
        write("%c%x%x",19001,"gsn_master_prior:annual  ",     gsn_master_prior:annual_premium)

      --  Read (23,1,"Press Enter to Continue ",L_ENTER,1)*/

        if gsn_master_current:policy_no        <> gsn_master_prior:policy_no or
           gsn_master_current:pol_year         <> gsn_master_prior:pol_year or
           gsn_master_current:end_sequence     <> l_hold_end_sequence or
           gsn_master_current:prem_no          <> gsn_master_prior:prem_no or
           gsn_master_current:build_no         <> gsn_master_prior:build_no or
           gsn_master_current:line_of_business <> gsn_master_prior:line_of_business or
           gsn_master_current:lob_subline      <> gsn_master_prior:lob_subline then
          {
            l_premium = gsn_master_prior:annual_premium
            if sfpmaster_current:trans_eff <> sfpname_current:eff_date then
              {
                I_EFF_DATE = Dateadd(l_trans_exp_date,0,-1)
                I_SHORT_RATE = SFPMASTER_current:SHORT_RATE
                I_TOTAL_DAYS = I_EFF_DATE - l_TRANS_EXP_date
                I_CX_DAYS = I_EFF_DATE - l_TRANS_EFF_date
                Include "prorata.pro"
                l_difference = l_premium * I_pro_rata
                l_premium = l_difference
              }
            l_premium = l_premium * -1
            if gsn_master_prior:mark_as_deleted_location not one of 1 then   --this will eliminate adding the location to every subsquent endorsement
              {
                add gsn_master_current
                  begin
                    gsn_MASTER_current:POLICY_NO                = gsn_master_prior:policy_no
                    gsn_MASTER_current:POL_YEAR                 = gsn_master_prior:pol_year
                    gsn_MASTER_current:END_SEQUENCE             = l_hold_end_sequence
                    gsn_MASTER_current:PREM_NO                  = gsn_master_prior:prem_no
                    gsn_MASTER_current:BUILD_NO                 = gsn_master_prior:build_No
                    gsn_master_current:lob_subline              = gsn_master_prior:lob_subline
                    gsn_master_current:line_of_business         = gsn_master_prior:line_of_business
                    gsn_MASTER_current:SUB_CODE                 = gsn_master_prior:sub_code
                    gsn_master_current:record_rdf               = gsn_master_prior:record_rdf/raw
                    gsn_master_current:trans_date               = l_trans_date
                    gsn_master_current:trans_code               = l_current_trans_code
                    gsn_master_current:policy_eff_date          = l_policy_eff_date
                    gsn_master_current:trans_eff_date           = l_trans_eff_date
                    gsn_master_current:trans_exp_date           = l_trans_exp_date
                    gsn_master_current:save_current_premium     = l_premium
                    gsn_master_current:premium                  = l_Premium
                    gsn_master_current:annual_premium           = gsn_master_prior:annual_premium
                    gsn_master_current:accounting_date          = l_ending_date
                    gsn_master_current:mark_as_deleted_location = 1
                  END
              }
          }
        next gsn_master_prior
      }
  } --end of the if
END

procedure check_for_endorsement

BEGIN
  local unsigned ascii number l_previous_end_sequence;
  local signed ascii number l_previous_total;
  local signed ascii number l_diff_total;
  l_save_premium = 0

  access sfpmaster_check_endorsement,
     set sfpmaster_check_endorsement:policy_no    = l_policy_no,
         sfpmaster_check_endorsement:pol_year     = l_pol_year,
         sfpmaster_check_endorsement:end_sequence = l_end_sequence, generic

  if sfpmaster_check_endorsement:trans_code one of 11,12,13,15,16 then
    {  --check if prior endorsement is there
      l_previous_end_sequence = l_end_sequence - 1
      access gsn_master_previous,
         set gsn_master_previous:policy_no        = l_policy_no,
             gsn_master_previous:pol_year         = l_pol_year,
             gsn_master_previous:end_sequence     = l_previous_end_sequence,
             gsn_master_previous:prem_no          = l_prem_no,
             gsn_master_previous:build_no         = l_build_no,
             gsn_master_previous:line_of_business = l_line_of_business,
             gsn_master_previous:lob_subline      = l_lob_subline,
             gsn_master_previous:sub_code         = l_sub_code, exact

      if gsn_master_previous:policy_no        = l_policy_no and
         gsn_master_previous:pol_year         = l_pol_year and
         gsn_master_previous:end_sequence     = l_previous_end_sequence and
         gsn_master_previous:prem_no          = l_prem_no and
         gsn_master_previous:build_no         = l_build_no and
         gsn_master_previous:line_of_business = l_line_of_business and
         gsn_master_previous:lob_subline      = l_lob_subline and
         gsn_master_previous:sub_code         = l_sub_code then
        {
          l_previous_total = 0
          l_previous_total = gsn_master_previous:annual_premium
          l_save_premium = l_premium
          l_diff_total = l_premium - l_previous_total     --take current_premium - previous end_sequence premium to get the current_premium to add to gsn_master.
          l_annual_premium = l_premium
/*          if gsn_master_previous:policy_no = 800002246 and
             l_lob_subline one of "10" then
            {
              write("%c%x%x",1001,"gsn_master_previous:policy_no",       gsn_master_previous:policy_no)
              write("%c%x%x",2001,"gsn_master_previous:pol_year",        gsn_master_previous:pol_year)
              write("%c%x%x",3001,"gsn_master_previous:end_sequence",    gsn_master_previous:end_sequence)
              write("%c%x%x",4001,"gsn_master_previous:prem_no",         gsn_master_previous:prem_no)
              write("%c%x%x",5001,"gsn_master_previous:build_no",        gsn_master_previous:build_no)
              write("%c%x%x",6001,"gsn_master_previous:line_of_business",gsn_master_previous:line_of_business)
              write("%c%x%x",7001,"gsn_master_previous:lob_subline",     gsn_master_previous:lob_subline)
              write("%c%x%x",8001,"gsn_master_previous:sub_code",        gsn_master_previous:sub_code)
              write("%c%x%x",9001,"gsn_master_previous:premium ",        gsn_master_previous:premium)
              write("%c%x%x",10001,"gsn_master_previous:annual  ",        gsn_master_previous:annual_premium)
              write("%c%x%x",11001,"l_premium                    ",      l_premium )
              write("%c%x%x",12001,"l_annual premium             ",      l_annual_premium )
              write("%c%x%x",13001,"DEBUG OUTPUTard l_diff_premium               ",l_diff_total)
              write("%c%x%x",13001,"i_pro_rata              ",I_pro_rata )
              Read (23,1,"Press Enter to Continue ",L_ENTER,1)
            } */

          if sfpmaster_check_endorsement:trans_code one of 11 then
            {
              if sfpmaster_check_endorsement:trans_eff = sfpname:eff_date then
                {
                  l_annual_premium = l_annual_premium * -1
                  l_premium = l_premium * -1
                }
              else
                {
                  do pro_rata
                  l_diff_total = l_annual_premium * I_pro_rata
                  l_premium = l_diff_total * -1
                  l_annual_premium = l_annual_premium * -1
                }
            }
          else
            if sfpmaster_check_endorsement:trans_code one of 16 then
              {
                if sfpmaster_check_endorsement:trans_eff = sfpname:eff_date then
                  {
                    l_premium = l_premium
                    l_annual_premium = l_annual_premium
                  }
                else
                  {
                    do pro_rata
                    l_diff_total = l_annual_premium * I_pro_rata
                    l_annual_premium = l_annual_premium
                    l_premium = l_diff_total
                  }
              }
            else
              if l_diff_total <> 0 then
                {
                  if sfpmaster_check_endorsement:trans_eff <> sfpname:eff_date then
                    {
                      do pro_rata
                      l_diff_total = l_diff_total * I_pro_rata
                    }
                  l_premium = l_diff_total
                }
        }
      else   --was not found on prevous endorsement and need to check date to see if pro_rata is needed else just use l_premium
        {
          if sfpmaster_check_endorsement:trans_eff <> sfpname:eff_date then
            {
              do pro_rata
              l_premium = l_premium  * I_pro_rata
            }
        }
    }

END

procedure write_difference_in_premium

BEGIN
  -- L_premium is the total premium of the current subline and endorsement.
  signed ascii number l_new_premium_to_add[9],
                      l_save_annual_prior[9],
                      l_current_premium_to_add[9];


  access gsn_master_loop,
     set gsn_master_loop:policy_no        = l_policy_no,
         gsn_master_loop:pol_year         = l_pol_year,  generic      --beginning of the current policy and pol_year

  while gsn_master_loop:policy_no    = l_policy_no and
        gsn_master_loop:pol_year     = l_pol_year
    {
      if gsn_master_loop:prem_no     = l_prem_no and
         gsn_master_loop:build_No    = l_build_no and
         gsn_master_loop:lob_subline = l_lob_subline then
        {
          if l_line_of_business one of 5,50,51 and
             l_lob_subline one of "60", "70" then
            {
              if l_iso_statement_line = gsn_master_loop:annual_statement_lob then
                {
                  l_current_premium_to_add = l_current_premium_to_add + gsn_master_loop:premium
                  l_save_annual_prior = gsn_master_loop:annual_premium
                }
            }
          else
            if l_line_of_business one of 8 and
               l_lob_subline one of "81" then
              {
                if l_iso_class_code = gsn_master_loop:iso_class_code then
                  {
                    l_current_premium_to_add = l_current_premium_to_add + gsn_master_loop:premium    --was just premium
                    l_save_annual_prior = gsn_master_loop:annual_premium
                  }
              }
            else
              {
                l_current_premium_to_add = l_current_premium_to_add + gsn_master_loop:premium    --was just premium
                l_save_annual_prior = gsn_master_loop:annual_premium
              }
        }
      next gsn_master_loop
    }  --now I should have the correct total for this endorsement now I need to compare it to the the premium I am adding.

/*
if sfpmaster:policy_no one of 20084 and
   sfpmaster:end_sequence one of 2 and
   l_lob_subline one of "90" then
  {
    write("%c<014>%s%x",01041,"l_policy_no     = ",l_POLICY_NO )
    write("%c%s%x",02041,"l_pol_year           = ",l_POL_YEAR  )
    write("%c%s%x",03041,"l_end_sequence       = ",l_END_SEQUENCE)
    write("%c%s%x",04041,"l_prem_no            = ",l_PREM_NO   )
    write("%c%s%x",05041,"l_build_No           = ",l_BUILD_NO  )
    write("%c%s%x",06041,"l_premium            = ",l_premium)
    write("%c%s%x",07041,"l_current_premium    = ",l_current_premium_to_add)
    write("%c%s%x",08041,"l_save_annual_prior  = ",l_save_annual_prior)
    write("%c%s%x",09041,"iso_class_code       = ",l_iso_class_code)
    write("%c%s%x",10041,"l_iso_statement_line = ",l_iso_statement_line)
    write("%c%s%x",11041,"l_line_of_business   = ",l_line_of_business)
    write("%c%s%x",12041,"l_LOB_subline        = ",l_LOB_subline)
    read(20,1,"press enter to continue",l_enter,1)
  }
*/
if sfpmaster:trans_eff <> sfpname:eff_date then --prorat
  {
    if l_save_annual_prior = l_annual_premium then
      {
        l_premium = 0
        l_save_premium = 0
      }
    else
      if l_lob_subline one of "50" and     --identity theft
         l_line_of_business one of 5,50,51 then
        {
          if l_save_annual_prior < l_annual_premium then   --mean identity theft went up.  prorata is already calcualated
            {
              l_premium = l_premium  --just put it in the file
            }
        }
      else
        if l_premium >= l_current_premium_to_add then      --  l_current_premium_to_add >= l_premium then
          {

            l_new_premium_to_add = l_premium - l_current_premium_to_add
            l_save_premium = l_premium
            l_premium = l_new_premium_to_add
          }
        else
          {
            l_premium = l_premium
            l_save_premium = l_current_premium_to_add + l_premium
          }
  }
else
  if l_save_annual_prior = l_annual_premium then
    {
      l_premium = 0
      l_save_premium = 0
    }
  else
    if l_premium >= l_current_premium_to_add then
      {
        l_new_premium_to_add = l_premium - l_current_premium_to_add
        l_save_premium = l_premium
        l_premium = l_new_premium_to_add
      }
END

procedure gsn_master_add

BEGIN
  string l_auto_state[2];
  l_annual_premium = l_premium
  if l_end_sequence > 0 then
    {
/*      if gsn_master:policy_no = 5718 then
         l_lob_subline one of "70" then
        {
          write("%c<014>%s%x",01041,"in add gsn_master l_policy_no = ", l_POLICY_NO )
          write("%c%s%x",02041,"l_pol_year = ",    l_POL_YEAR  )
          write("%c%s%x",03041,"l_end_sequence = ",l_END_SEQUENCE)
          write("%c%s%x",04041,"l_prem_no  = ",    l_PREM_NO   )
          write("%c%s%x",05041,"l_build_No = ",    l_BUILD_NO  )
          write("%c%s%x",06041,"l_premium  = ",    l_premium)
          read(20,1,"press enter to continue",l_enter,1)
        }
*/
      do check_for_endorsement

      if sfpmaster:trans_code not one of 11,16 then
        {
          do write_difference_in_premium
        }
    }
/*
if l_policy_no one of 973 and l_lob_subline one of "60" then
  {
    write("%c<014>%s%x",01041,"in add gsn_master l_policy_no = ", l_POLICY_NO )
    write("%c%s%x",02041,"l_pol_year = ",   l_POL_YEAR  )
    write("%c%s%x",03041,"l_end_sequence = ",l_END_SEQUENCE)
    write("%c%s%x",04041,"l_prem_no  = ",    l_PREM_NO   )
    write("%c%s%x",05041,"l_build_No = ",    l_BUILD_NO  )
    write("%c%s%x",06041,"l_premium  = ",    l_premium)
    read(20,1,"press enter to continue",l_enter,1)
  }  */
    add gsn_master
      begin
        gsn_MASTER:POLICY_NO                         = l_policy_no
        gsn_MASTER:POL_YEAR                          = l_pol_year
        gsn_MASTER:END_SEQUENCE                      = l_end_sequence
        gsn_MASTER:PREM_NO                           = l_prem_no
        gsn_MASTER:BUILD_NO                          = l_build_No
        gsn_master:lob_subline                       = l_lob_subline
        gsn_master:line_of_business                  = l_Line_of_business
        gsn_MASTER:SUB_CODE                          = l_sub_code
        gsn_MASTER:SEQUENCE_NUMBER                   = l_END_SEQUENCE
        if sfpname:original_eff_date <= 01.25.2016 and
           sfpname:eff_date >= 01.25.2016 then
          {
            access sfpname_alias,
               set sfpname_alias:policy_no    = sfpname:policy_no,
                   sfpname_alias:pol_year     = sfpname:pol_year,
                   sfpname_alias:end_sequence = 0, exact

            if sfpname_alias:policy_no    = sfpname:policy_no and
               sfpname_alias:pol_year     = sfpname:pol_year and
               sfpname_alias:end_sequence = 0 then
              {
                if sfpname_alias:trans_code one of 10 then
                  {
                    l_policy_suffix = 0
                  }
                else
                  {
                    l_policy_suffix = year(sfpname:eff_date) - year(sfsdefault:starting_date)
                  }
              }
            else
              {
                l_policy_suffix = year(sfpname:eff_date) - year(sfsdefault:starting_date)
              }
          }
        else
          {
            l_policy_suffix = 0
          }
        gsn_master:policy_suffix                     = str(l_policy_suffix,"999")
        gsn_MASTER:ACCOUNTING_DATE                   = l_ending_date
        gsn_master:eff_date                          = sfpname:eff_date
        gsn_MASTER:POLICY_EFF_DATE                   = sfpname:eff_date
        gsn_MASTER:POLICY_EXP_DATE                   = sfpname:exp_date
        gsn_master:trans_exp_date                    = sfpmaster:trans_exp
        gsn_MASTER:POLICY_INDICATOR                  = L_POLICY_INDICATOR
        gsn_MASTER:TRANS_EFF_DATE                    = sfpmaster:trans_eff
        gsn_master:trans_code                        = sfpmaster:trans_code
        gsn_MASTER:CLAIMS_MADE_POLICY_INDICATOR      = "OCCURRENCE"
        gsn_MASTER:RETROACTIVE_DATE                  = 00.00.0000
        gsn_MASTER:DISCOVERY_DATE                    = 00.00.0000
        L_insured_name = ""
        I_rev_name = ""
        access sfscompany,
           set sfscompany:company_id = l_company_id, exact
        I_name = sfpname:name[1]
        include "sfsrevname7.pro"
        l_insured_name = I_rev_name
        if trun(sfpname:name[2]) <> "" then
          {
            I_name = sfpname:name[2]
            include "sfsrevname7.pro"
            l_insured_name = trun(l_insured_name) + " " + I_rev_name
          }
        if trun(sfpname:name[3]) <> "" then
          {
            I_name = sfpname:name[3]
            include "sfsrevname7.pro"
            l_insured_name = trun(l_insured_name) + " " + I_rev_name
          }

        gsn_MASTER:INSURED_NAME                      = l_insured_name
        gsn_MASTER:INSURED_ADDRESS                   = trun(sfpname:address[1]) + " " + trun(sfpname:address[2]) + " " + trun(sfpname:address[3])
        gsn_MASTER:INSURED_CITY                      = sfpname:city
        gsn_MASTER:INSURED_STATE                     = sfpname:str_state
        gsn_MASTER:INSURED_ZIP[1,5]                  = sfpname:str_zipCode[1,5]
        gsn_MASTER:SIC_CODE                          = l_iso_sic_code
        gsn_MASTER:TYPE_OF_POLICY                    = str(l_type_of_policy)  --"32"
        gsn_MASTER:COMPANY_NAME                      = trun(sfscompany:name[1]) + " " + sfscompany:name[2]
        gsn_MASTER:COMPANY_CODE                      = "GSN"             --need claification from ani
        gsn_MASTER:FAC_INDICATOR                     = L_FAC_INDICATOR
        if l_line_of_business one of 15,16 then   --auto
          {
            gsn_MASTER:SITE_ADDRESS                  = "Unknown"
            switch (capvehicle:state)
              case 29 : l_auto_state = "NJ"
              case 7  : l_auto_state = "DE"
              case 37 : l_auto_state = "PA"
            end

            gsn_MASTER:SITE_STATE                    = l_auto_state
            gsn_MASTER:SITE_CITY                     = capVEHICLE:TERRITORY_DESCRIPTION
            gsn_MASTER:SITE_ZIP                      = capvehicle:str_zipCode[1,5]
          }
        else
          {
            gsn_MASTER:SITE_ADDRESS                  = Trun(sfplocation:address) + trun(SFPLOCATION:ADDRESS1[1]) + " " + trun(SFPLOCATION:ADDRESS1[2]) + " " + TRUN(SFPLOCATION:ADDRESS1[3])
            gsn_MASTER:SITE_CITY                     = SFPLOCATION:CITY
            gsn_MASTER:SITE_STATE                    = SFPLOCATiON:str_STATE
            gsn_MASTER:SITE_ZIP                      = SFPLOCATION:str_ZIPCODE[1,5]
          }
        gsn_MASTER:SITE_COUNTY                       = L_COUNTY_STR
        gsn_MASTER:TERRITORY_CODE_ISO                = ""
        gsn_MASTER:CONSTRUCTION_CLASS                = l_construction_class
        switch (l_protection)
          case "5" : l_protection1 = "10"   --correct
          case "4" : l_protection1 = "5"
          case "3" : l_protection1 = "5"
          case "2" : l_protection1 = "5"
          case "1" : l_protection1 = "5"
        end
        gsn_MASTER:PROTECTION_CLASS_ISO              = l_protection1
        gsn_MASTER:CLASS_CODE                        = l_class_code
        gsn_master:iso_class_code                    = l_iso_class_code
        gsn_MASTER:wind_DEDUCTIBLE                   = val(l_wind_deductible)
        gsn_MASTER:BCEG                              = ""  --something in iso ask ani
        gsn_MASTER:PREMIUM                           = l_premium
        if sfpmaster:trans_code one of 10,14 then
          {
            gsn_master:save_current_premium          = l_premium
          }
        else
          {
            gsn_master:save_current_premium          = l_save_premium
          }
        access sfsline2,
           set sfsline2:Company_id       = l_company_id,
               sfsline2:line_of_business = l_line_of_business,
               sfsline2:lob_subline      = l_lob_subline , exact

        if gsn_master:line_of_business one of 5,50,51 and
           gsn_master:lob_subline one of "60","70" then
          {
            gsn_MASTER:ANNUAL_STATEMENT_LOB          = l_iso_statement_line
          }
        else
          {
            gsn_MASTER:ANNUAL_STATEMENT_LOB          = sfsline2:ISO_STMT_LOB
          }
        gsn_MASTER:DEDUCTIBLE                        = val(l_deductible)
        if l_line_of_business one of 11 then
          {
            gsn_master:property_deductible           = "0"
          }
        else
          {
            gsn_master:property_deductible           = l_deductible
          }
        gsn_MASTER:LIABILITY_DEdUCTIBLE              = l_liability_deductible
        switch (gsn_master:line_of_business)
          case 5,50,51 : begin                --bop
                           l_limit[4] = 0
                           l_limit[5] = 0
                           l_limit[7] = 0
                           l_limit[8] = 0
                           l_limit[9] = 0
                           l_limit[11] = 0
                           l_limit[12] = 0
                           l_limit[13] = 0
                           l_limit[14] = 0
                           l_limit[15] = 0
                           l_limit[16] = 0
                           l_limit[17] = 0
                           l_limit[18] = 0
                           l_limit[19] = 0
                           l_limit[20] = 0
                           l_limit[21] = 0
                           l_limit[22] = 0
                           l_limit[23] = 0
                           l_limit[24] = 0
                           l_limit[25] = 0
                           l_limit[26] = 0
                           l_limit[27] = 0
                           l_limit[28] = 0
                           l_limit[29] = 0
                           l_limit[29] = 0
                           l_Limit[30] = 0
                         end
          case 6 : begin             --contractors
                     l_limit[4] = 0
                     l_limit[5] = 0
                     l_limit[7] = 0
                     l_limit[8] = 0
                     l_limit[9] = 0
                     l_limit[17] = 0
                     l_limit[18] = 0
                     l_limit[19] = 0
                     l_limit[20] = 0
                     l_limit[21] = 0
                     l_limit[22] = 0
                     l_limit[23] = 0
                     l_limit[24] = 0
                     l_limit[25] = 0
                     l_limit[26] = 0
                     l_limit[27] = 0
                     l_limit[28] = 0
                     l_limit[29] = 0
                     l_limit[29] = 0
                     l_limit[30] = 0
                   end
          case 7 : BEGIN              --umbrella
                     l_limit[1] = 0
                     l_limit[2] = 0
                     l_limit[3] = 0
                     l_limit[4] = 0
                     l_limit[5] = 0
                     l_limit[6] = 0
                     l_limit[10] = 0
                     l_limit[11] = 0
                     l_limit[13] = 0
                     l_limit[14] = 0
                     l_limit[15] = 0
                     l_limit[16] = 0
                     l_limit[17] = 0
                     l_limit[18] = 0
                     l_limit[19] = 0
                     l_limit[20] = 0
                     l_limit[21] = 0
                     l_limit[22] = 0
                     l_limit[23] = 0
                     l_limit[24] = 0
                     l_limit[25] = 0
                     l_limit[26] = 0
                     l_limit[27] = 0
                     l_limit[28] = 0
                     l_limit[29] = 0
                     l_limit[30] = 0
                   END
          case 15,16 : BEGIN               --auto
                         l_limit[1] = 0
                         l_limit[2] = 0
                         l_limit[3] = 0
                         l_limit[4] = 0
                         l_limit[7] = 0
                         l_limit[8] = 0
                         l_limit[9] = 0
                         l_limit[10] = 0
                         l_limit[11] = 0
                         l_limit[12] = 0
                         l_limit[13] = 0
                         l_limit[15] = 0
                         l_limit[16] = 0
                         l_limit[17] = 0
                         l_limit[18] = 0
                         l_limit[19] = 0
                         l_limit[20] = 0
                         l_limit[21] = 0
                         l_limit[22] = 0
                         l_limit[23] = 0
                         l_limit[24] = 0
                         l_limit[25] = 0
                         l_limit[26] = 0
                         l_limit[27] = 0
                         l_limit[30] = 0
                       END
        end    --switch
        gsn_MASTER:LIMIT[1]                          = l_limit[1]
        gsn_MASTER:LIMIT[2]                          = l_limit[2]
        gsn_MASTER:LIMIT[3]                          = l_limit[3]
        gsn_MASTER:LIMIT[4]                          = l_limit[4]
        gsn_MASTER:LIMIT[5]                          = l_limit[5]
        gsn_MASTER:LIMIT[6]                          = l_limit[6]
        gsn_MASTER:LIMIT[7]                          = l_limit[7]
        gsn_MASTER:LIMIT[8]                          = l_limit[8]
        gsn_MASTER:LIMIT[9]                          = l_limit[9]
        gsn_MASTER:LIMIT[10]                         = l_limit[10]
        gsn_MASTER:LIMIT[11]                         = l_limit[11]
        gsn_MASTER:LIMIT[12]                         = l_limit[12]
        gsn_MASTER:LIMIT[13]                         = l_limit[13]
        gsn_MASTER:LIMIT[14]                         = l_limit[14]
        gsn_MASTER:LIMIT[15]                         = l_limit[15]
        gsn_MASTER:LIMIT[16]                         = l_limit[16]
        gsn_MASTER:LIMIT[17]                         = l_limit[17]
        gsn_MASTER:LIMIT[18]                         = l_limit[18]
        gsn_MASTER:LIMIT[19]                         = l_limit[19]
        gsn_MASTER:LIMIT[20]                         = l_limit[20]
        gsn_MASTER:LIMIT[21]                         = l_limit[21]
        gsn_MASTER:LIMIT[22]                         = l_limit[22]
        gsn_MASTER:LIMIT[23]                         = l_limit[23]
        gsn_MASTER:LIMIT[24]                         = l_limit[24]
        gsn_MASTER:LIMIT[25]                         = l_limit[25]
        gsn_MASTER:LIMIT[26]                         = l_limit[26]
        gsn_MASTER:LIMIT[27]                         = l_limit[27]
        gsn_MASTER:LIMIT[28]                         = l_limit[28]
        gsn_MASTER:LIMIT[29]                         = l_limit[29]
        gsn_MASTER:LIMIT[30]                         = l_limit[30]
        gsn_MASTER:CO_INSURANCE_FACTOR               = l_coinsurance_factor
        gsn_MASTER:SUBLINE_CODE                      = l_lob_subline
        gsn_MASTER:ISOCOVERAGECODE                   = ""
        gsn_MASTER:TERRORISM_COVERAGE_CODE           = ""  --mcm412 excludes it and mcm411 includes
        gsn_MASTER:STATEEXCEPTIONCODE                = ""
        gsn_MASTER:RATINGIDCODE                      = ""
        gsn_MASTER:ORDINANCELAWID                    = "5"   --need to change this based on gsn
        gsn_MASTER:RATEGROUP                         = ""
        gsn_MASTER:CLASS_LIMIT                       = ""
        gsn_MASTER:LCE_EFF_DATE                      = 00.00.0000
        gsn_MASTER:TYPEOFEQUIPMENTCODE               = ""
        gsn_MASTER:EMPLOYEES                         = ""
        gsn_MASTER:RATABLEEMPLOYEES                  = ""
        gsn_MASTER:PREMISES                          = ""
        gsn_MASTER:FORM_CODE                         = l_form
        gsn_MASTER:LIMIT_ID                          = ""
        gsn_MASTER:DEDUCTIBLE_BASIS                  = "DOLLARS"
        gsn_MASTER:CO_INSURANCE_MODIFIER             = ""
        gsn_MASTER:INFLATION_GUARD_FACTOR            = ""
        gsn_MASTER:INCREASED_LIMITS_FACTOR           = ""
        gsn_MASTER:DEDUCTIBLE_FACtor                 = ""
        gsn_MASTER:SCHEDULE_RATING_FACTOR            = ""
        gsn_MASTER:EXPERIENCE_RATING_MOD_FACTOR      = ""
        gsn_MASTER:RATE_DEPARTURE_LCM                = ""
        gsn_MASTER:IND_RISK_PREMIUM_MOD_FACTOR_IRPM  = ""
        gsn_MASTER:EXPENSE_MOD_PREMIUM_DIS_FACTOR    = ""
        gsn_MASTER:PACKAGE_MOD_FACTOR                = ""
        gsn_MASTER:AGREED_AMOUNT_MODIFIER            = ""
        gsn_MASTER:TERRITORY_MODIFIER                = ""
        gsn_MASTER:PRIOR_ACTS_FACTOR                 = ""
        gsn_MASTER:UNITS_DISCOUNT_FACTOR             = ""
        gsn_MASTER:DEFENSE_IN_OR_OUT_OF_LIMIT_DOL    = ""
        gsn_MASTER:FIRST_DOLLAR_MODIFIER             = ""
        gsn_MASTER:COVERAGE_EXPOSURE                 = ""
        gsn_master:line_of_business                  = l_line_of_business
        gsn_master:AGENCY_COMMISSION                 = 25
        if l_line_of_business one of 7 then
          {
            gsn_master:attachment_point              = 1000000
          }
        else
          {
            gsn_master:attachment_point              = 0
          }
        gsn_master:iso_subline_code                  = str(sfsline2:ISO_SUBLINE)
        gsn_master:trans_date                        = sfpmaster:PREMIUM_TRANS_DATE
        do check_prior_policy_no
        gsn_master:prior_policy_number               = l_prior_policy_number          --check_prior_policy_no()
        gsn_master:prior_policy_number_eff_date      = l_prior_policy_eff_date     --get_previous_pol_eff_date()
        gsn_master:prior_policy_number_prefix        = l_prior_policy_number_prefix
        gsn_master:res_condo                         = l_res_condo
        gsn_master:annual_premium                    = l_annual_premium
--      end
     }
END

--number function check_prior_policy_no()
procedure check_prior_policy_no

BEGIN
  local file sfpname_prior_term = alias for sfpname;
  local file sfpname_current_term = alias for sfpname;
  local file sfpname_previous_policy_term = alias for sfpname;

  unsigned ascii number l_prior_year[4],
                        l_prior_end_sequence[4] = 0,
                        l_current_end_sequence[4] = 0;

  l_prior_policy_number_prefix = ""

  l_prior_year = sfpname:pol_year - 1

  access sfpname_current_term,
     set sfpname_current_term:policy_no     = sfpname:policy_no ,
         sfpname_current_term:pol_year      = sfpname:pol_year,
         sfpname_current_term:end_sequence  = l_current_end_sequence, exact    --always look at endorsement 0 see if it is a 10 for later.

  access sfpname_prior_term,
     set sfpname_prior_term:policy_no     = sfpname:policy_no ,
         sfpname_prior_term:pol_year      = l_prior_year,
         sfpname_prior_term:end_sequence  = l_prior_end_sequence, exact

  access sfpname_previous_policy_term,
     set sfpname_previous_policy_term:policy_no     = sfpname:previous_policy_no ,
         sfpname_previous_policy_term:pol_year      = l_prior_year,
         sfpname_previous_policy_term:end_sequence  = l_prior_end_sequence, exact

  if sfpname_current_term:trans_code one of 10 then
    {
      l_prior_policy_number   = 0
      l_prior_policy_eff_date = 01.01.1900
    }
  else
    if sfpname_prior_term:policy_no     = sfpname:policy_no and
       sfpname_prior_term:pol_year      = l_prior_year and
       sfpname_prior_term:end_sequence  = l_prior_end_sequence then  --means found a prior term of the policy so assign the policy number
      {
        l_prior_policy_number        = sfpname:policy_no
        l_prior_policy_eff_date      = sfpname_prior_term:eff_date
        l_prior_policy_number_prefix = sfsline:alpha
      }
    else  --lets try looking it up by the prior policy number
      if sfpname_previous_policy_term:policy_no     = sfpname:previous_policy_no and
         sfpname_previous_policy_term:pol_year      = l_prior_year and
         sfpname_previous_policy_term:end_sequence  = l_prior_end_sequence then  --found the previous policy number as a policy in the system.
        {
          access sfsline_alias,
             set sfsline_alias:Company_id       = sfpname_previous_policy_term:company_id,
                 sfsline_alias:line_of_business = sfpname_previous_policy_term:line_of_business,
                 sfsline_alias:lob_subline      = "00" , exact

          l_prior_policy_number        = sfpname:previous_policy_no
          l_prior_policy_eff_date      = sfpname_previous_policy_term:eff_date
          l_prior_policy_number_prefix = sfsline_alias:alpha
        }
      else
        {
          l_prior_policy_number   = 0   --default it to current policy
          l_prior_policy_eff_date = 01.01.1900
        }
--  return l_prior_policy_number
END

wdate function get_previous_pol_eff_date()

BEGIN
  local file sfpname_previous_policy = alias for sfpname;
  local file sfpname_current_term = alias for sfpname;
  wdate l_prior_policy_eff_date;
  unsigned ascii number l_prior_year[4];
  unsigned ascii number l_prior_end_sequence[4] = 0;
  unsigned ascii number l_current_term_end_sequence[4] = 0;

  access sfpcurrent,
     set sfpcurrent:policy_no    = sfpname:previous_policy_no, exact

  if sfpname:previous_policy_no <> 0 then
    {
      l_prior_year         = sfpcurrent:pol_year - 1

      access sfpname_previous_policy,
         set sfpname_previous_policy:policy_no     = sfppoint:policy_no ,
             sfpname_previous_policy:pol_year      = l_prior_year,
             sfpname_previous_policy:end_sequence  = l_prior_end_sequence, exact

      if sfpname_previous_policy:policy_no     = sfppoint:policy_no and
         sfpname_previous_policy:pol_year      = l_prior_year  and
         sfpname_previous_policy:end_sequence  = l_prior_end_sequence then
        {
          l_prior_policy_eff_date = sfpname_previous_policy:eff_date
        }
      else
        {
          l_prior_policy_eff_date = 01.01.1900
        }
    }
  else
    if sfpname:previous_policy_no = 0 then
      {
        access sfpname_current_term,
           set sfpname_current_term:policy_no     = sfpname:policy_no ,
               sfpname_current_term:pol_year      = sfpname:pol_year,
               sfpname_current_term:end_sequence  = l_current_term_end_sequence, exact

        if sfpname_current_term:policy_no    = sfpname:policy_no and
           sfpname_current_term:pol_year     = sfpname:pol_year and
           sfpname_current_term:end_sequence = l_current_term_end_sequence then
          {
            if sfpname_current_term:trans_code one of 10 then
              {
                l_prior_policy_eff_date = 01.01.1900
              }
            else
              {
                l_prior_policy_eff_date = sfpname_current_term:eff_date
              }
          }
      }
  if l_prior_policy_eff_date <= 01.25.2016 then  --gang started with gsn 09/01/2011 so I have to go one year after that to find prior valid policies
    {
      l_prior_policy_eff_date = 01.01.1900
    }
  return l_prior_policy_eff_date
END

End
