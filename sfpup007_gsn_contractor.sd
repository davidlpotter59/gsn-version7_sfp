%%                                  
/*
Date Written: 09/12/2011

Name: sfpup007_contractor.sd

Copyright (c) 2013, SCIPS.com Inc.

Modify
Date                   By                  Comment
--------------------------------------------------------------
09/12/2011            REL                 This program is for the interface with gsn.  i
                                          It will collect all field that gsn needs by policy_no on a location basis.
==============================================================
*/

Program
  Name = "sfpup007_gsn_contractor";
  Type = "File";
  Domain = "dummy";
  Padcharacter = Space;
  array [30] of unsigned ascii number l_limit[9];
  array [4] of signed ascii number l_misc_premium[9];
  unsigned ascii number l_counter[6],
                        l_claim_count[4],
                        l_bpsclass_sub_code[4];

  wdate l_eff_date,
        I_EFF_DATE,
        l_starting_date,
        l_prior_policy_eff_date,
        l_ending_date;

  wdate function get_previous_pol_eff_date();
  number function cal_num_vehicle (number,number,number);

  unSigned ascii number  l_claims_count[4],
                         l_class_code[5],
                         l_exposure[9],
                         l_prior_policy_number[9],
                         l_cppbusiness_only_once[1],
                         l_year_of_construction[4],
                         L_liability_is_policy_wide[1],
                         l_sfpend_forms_only_once[1],
                         l_calculate_money_once[1],
                         l_identity_theft[1],
                         l_type_of_policy[2],
                         l_hold_pol_year[4],
                         l_hold_end_sequence[4],
                         l_hold_policy_no[9],
                         l_hold_prem_no[4],
                         l_hold_build_no[4],
                         l_hold_line_of_business[4],
                         l_policy_no[9],                 --used because of scope rules in cyberscience.
                         l_res_condo[1],
                         l_sfpend_premium[9],
                         l_pol_year[4],
                         l_end_sequence[4],
                         L_identity_theft_only_once[1],
                         l_prem_no[4],
                         l_build_no[4],
                         l_hired_only_once[1],
                         l_hiredcomp_only_once[1],
                         l_nonowned_only_once[1],
                         l_add_per_payroll_once_per_loc[1],
                         l_waive_deductible_charge[3],
                         l_nonmedpay_only_once[1],
                         l_BRpip_only_once[1],
                         l_doc_only_once[1],
                         l_docliab_only_once[1] ,
                         l_nonliab_only_once[1],
                         l_package_only_once[1],
                         l_line_of_business[4],
                         l_state[2],
                         l_loop[2],
                         l_liability_code[2],
                         l_total_premium[9],
                         l_broadened_pip[9],
                         l_process_umbrella_once[1],
                         l_sub_code[4],
                         l_do_only_once[1],
                         l_misc[1] ,  --this is for misc premium
                         l_do_terrorism_only_once[1],
                         l_terrorism_only_once[1],
                         l_payment_plan[4];
                         
    local unsigned ascii number l_num_vehicle[4];

  signed ascii number l_premium[9],
                      l_save_premium[9],
                      l_annual_premium[9],
                      l_current_total_premium[9],
                      l_short_rate[4]=0/dec=2;

  STRING L_POLICY_INDICATOR[20],
         l_iso_prop_class_code[5],
         l_iso_liab_class_code[5],
         l_iso_crime_class_code[5],
         l_rate_group[2],
         l_state_exception_code[6],
         l_exposure_base[3],
         l_iso_policy_limits[2],
         l_deductible_bi[2],
         l_deductible_pd[2],
         l_insured_name[152];

  local file sfsline_by_subline = alias for sfsline;

  unsigned ascii number l_policy_suffix[3];

  string l_fac_indicator[1],
         l_building_deductible[6],
         l_iso_statement_line[3],
         l_prior_policy_number_prefix[5],
         l_construction_year[4],
         l_bceg[6],
         l_lob_subline[2],
         l_hold_lob_subline[2],
         l_wind_deductible[6],
         l_company_id[10] = "",
         l_county_str[40],
         l_construction_class[1],
         l_protection[6],
         l_protection1[6],
         l_coinsurance_factor[4],
         l_deductible[6],
         l_limit_id[6],
         l_liability_deductible[6],
         l_occupancy_type[2],
         l_site_description[100],
         l_rating_id_code[3],
         l_form[4],
         l_line_type[1]="",
         l_enter[1],
         l_coverage[3],
         l_iso_class_code[6],
         l_base_class_code[6],         --used if the cinland and for item that do not have class code need to use the base.
         l_iso_sic_code[6],
         l_mold_coverage[1],
         l_coverage_retroactive_date[6],
         l_no_units[3];

  signed ascii number l_percent_of_prsmaster[6]/dec=4,
                      l_diff_total[9],
                      l_prsmaster_total[9]/dec=2;

  local file sfpmaster_check_endorsement = alias for sfpmaster;

  include "prorata.var"
  include "sfsrevname.var"

initialization
  l_STARTING_DATE = Date(COMMANDLINE[1,8])
  l_ENDING_DATE   = Date(COMMANDLINE[9,16])
  l_hold_policy_no = 0
  l_hold_pol_year = 0
  l_hold_end_sequence = 0
  write("<014>")
  access sfplocation,
     set sfplocation:policy_no  = "", approximate    --sets the file to beginning of the file.

  access sfpname,
     set sfpname:policy_no    = sfplocation:policy_no,
         sfpname:pol_year     = sfplocation:pol_year,
         sfpname:end_sequence = sfplocation:end_sequence, generic

  access sfsline,
     set sfsline:Company_id       = sfpname:company_id,
         sfsline:line_of_business = sfpname:line_of_business,
         sfsline:lob_subline      = "00" , exact

  access sfppoint,
     set sfppoint:policy_no       = sfpname:policy_no,
         sfppoint:pol_year        = sfpname:pol_year, exact

  access gsn_master,
     set gsn_master:policy_no        = sfplocation:policy_no,
         gsn_master:pol_year         = sfplocation:pol_year,
         gsn_master:end_sequence     = sfplocation:end_sequence,
         gsn_master:prem_no          = sfplocation:prem_no,
         gsn_master:build_no         = sfplocation:build_no,
         gsn_master:line_of_business = l_line_of_business, generic

--  do process_scips_premium_file

  access sfplocation,
     set sfplocation:policy_no  = "", approximate    --sets the file to beginning of the file.

  while sfplocation:errornumber = 0
    {
      access sfpmaster,
         set sfpmaster:policy_no    = sfplocation:policy_no,
             sfpmaster:pol_year     = sfplocation:pol_year,
             sfpmaster:end_sequence = sfplocation:end_sequence, generic

      access sfpname,
         set sfpname:policy_no    = sfplocation:policy_no,
             sfpname:pol_year     = sfplocation:pol_year,
             sfpname:end_sequence = sfplocation:end_sequence, generic

      access sfsline,
         set sfsline:Company_id       = sfpname:company_id,
             sfsline:line_of_business = sfpname:line_of_business,
             sfsline:lob_subline      = "00" , exact


      if sfsline:lob_code one of "SCP" then
        {
          access sfppoint,
             set sfppoint:policy_no       = sfpname:policy_no,
                 sfppoint:pol_year        = sfpname:pol_year, exact
          l_line_of_business = sfpname:line_of_business
          l_company_id       = sfpname:company_id
          access sfscompany,
             set sfscompany:company_id = sfpname:company_id , exact

          If ((sfpmaster:PREMIUM_TRANS_DATE < l_starting_date and
               sfpmaster:trans_eff => l_starting_date and
               sfpmaster:trans_eff <= l_ending_date) or

              -- TRANSACTED WITHIN THE START DATE and THE END DATE WITH
              --   EFFECTIVE DATES NOT > THE G_ending_date

              (sfpmaster:PREMIUM_TRANS_DATE  => l_starting_date and
               sfpmaster:PREMIUM_TRANS_DATE  <= l_ending_date and
               sfpmaster:trans_eff   <= l_ending_date)) and

               sfpmaster:policy_no    = sfplocation:policy_no and
               sfpmaster:pol_year     = sfplocation:pol_year and
               sfpmaster:end_sequence = sfplocation:end_sequence and
               sfpmaster:trans_code   < 17 and
               sfpname:eff_date >= 12.01.2018 then
            {
              l_policy_no    = sfplocation:policy_no
              l_pol_year     = sfplocation:pol_year
              l_end_sequence = sfplocation:end_sequence
              l_build_no     = sfplocation:build_no
              l_prem_no      = sfplocation:prem_no
              l_exposure     = 0
              l_payment_plan = sfpname:payment_plan
              
              if (sfppoint:converted one of "Y" or
                 (sfppoint:converted one of "N" and
                  sfpmaster:end_sequence < sfppoint:end_sequence)) then           --check to make sure the transaction was updated if not do not have it included.
                {
                  if l_hold_policy_no    <> l_policy_no or
                     l_hold_pol_year     <> l_pol_Year or
                     l_hold_end_sequence <> l_end_sequence then
                    {
                      for l_loop = 1 to 30
                        {
                          l_limit[l_loop]   = 0
                        }
                    }

                  if l_build_no     <> sfplocation:build_no or   --this keep subcode same for each end_sequence.. I use this in bop because of the two sublines. 60 40 split
                     l_prem_no      <> sfplocation:prem_no or
                     l_end_sequence <> sfplocation:end_sequence then
                    {
                      l_sub_code = 0
                    }

                  access gsn_master,
                     set gsn_master:policy_no        = sfplocation:policy_no,
                         gsn_master:pol_year         = sfplocation:pol_year,
                         gsn_master:end_sequence     = sfplocation:end_sequence,
                         gsn_master:prem_no          = sfplocation:prem_no,
                         gsn_master:build_no         = sfplocation:build_no,
                         gsn_master:line_of_business = l_line_of_business, generic

                  if gsn_master:policy_no        <> sfplocation:policy_no or
                     gsn_master:pol_year         <> sfplocation:pol_year or
                     gsn_master:end_sequence     <> sfplocation:end_sequence or
                     gsn_master:prem_no          <> sfplocation:prem_no or
                     gsn_master:build_no         <> sfplocation:build_no or
                     gsn_master:line_of_business <> l_line_of_business or
                     gsn_master:lob_subline      <> l_lob_subline then
                    {
                      access sfscompany,
                         set sfscompany:company_id = l_company_id , exact
                      do add_to_gsn_master
                    }
                } -- if it was updated within the period
            }   -- if transacted in the period
        }
      next sfplocation
    }

do process_gsn_master_premium_by_subline
do check_diffence_between_files

update

procedure definition

procedure check_diffence_between_files
BEGIN
access gsn_master_premium, set gsn_master_premium:company_id = "", approximate

while gsn_master_premium:errornumber = 0
    begin
    if ((gsn_master_premium:trans_date < l_starting_date and
         gsn_master_premium:trans_eff => l_starting_date and
         gsn_master_premium:trans_eff <= l_ending_date) or
        (gsn_master_premium:trans_date => l_starting_date and
         gsn_master_premium:trans_date <= l_ending_date and
         gsn_master_premium:trans_eff <= l_ending_date) and
         gsn_master_premium:line_of_business one of 6) then
        begin
        access gsn_master_compare,
           set gsn_master_compare:company_id       = l_company_id,
               gsn_master_compare:policy_no        = gsn_master_premium:policy_no,
               gsn_master_compare:pol_year         = gsn_master_premium:pol_year,
               gsn_master_compare:end_sequence     = gsn_master_premium:end_sequence,
               gsn_master_compare:line_of_business = gsn_master_premium:line_of_business,
               gsn_master_compare:lob_subline      = gsn_master_premium:lob_subline,
               gsn_master_compare:trans_date       = gsn_master_premium:trans_date,
               gsn_master_compare:trans_code       = gsn_master_premium:trans_code, exact

        if gsn_master_compare:company_id       = l_company_id and
           gsn_master_compare:policy_no        = gsn_master_premium:policy_no and
           gsn_master_compare:pol_year         = gsn_master_premium:pol_year and
           gsn_master_compare:end_sequence     = gsn_master_premium:end_sequence and
           gsn_master_compare:line_of_business = gsn_master_premium:line_of_business and
           gsn_master_compare:lob_subline      = gsn_master_premium:lob_subline and
           gsn_master_compare:trans_date       = gsn_master_premium:trans_date and
           gsn_master_compare:trans_code       = gsn_master_premium:trans_code then
            begin
            if gsn_master_compare:premium <> gsn_master_premium:premium then
                begin
                access gsn_master, set gsn_master:policy_no        = gsn_master_compare:policy_no,
                                         gsn_master:pol_year         = gsn_master_compare:pol_year,
                                         gsn_master:end_sequence     = gsn_master_compare:end_sequence,
                                         gsn_master:prem_no          = gsn_master_compare:prem_no,
                                         gsn_master:build_no         = gsn_master_compare:build_no,
                                         gsn_master:line_of_business = gsn_master_compare:line_of_business,
                                         gsn_master:lob_subline      = gsn_master_compare:lob_subline,
                                         gsn_master:line_type        = gsn_master_compare:line_type,
                                         gsn_master:sub_code         = gsn_master_compare:sub_code, exact

                if gsn_master:policy_no        = gsn_master_compare:policy_no and
                   gsn_master:pol_year         = gsn_master_compare:pol_year and
                   gsn_master:end_sequence     = gsn_master_compare:end_sequence and
                   gsn_master:prem_no          = gsn_master_compare:prem_no and
                   gsn_master:build_no         = gsn_master_compare:build_no and
                   gsn_master:line_of_business = gsn_master_compare:line_of_business and
                   gsn_master:lob_subline      = gsn_master_compare:lob_subline and
                   gsn_master:line_type        = gsn_master_compare:line_type and
                   gsn_master:sub_code         = gsn_master_compare:sub_code and
                   gsn_master:line_of_business one of 6 then
                  begin
                    l_diff_total = gsn_master_premium:premium - gsn_master_compare:premium

                    change gsn_master
                        begin
                        gsn_master:premium = gsn_master:premium + l_diff_total
                        end
                  end

                end

            end
        end

    next gsn_master_premium
    end

END

procedure process_gsn_master_premium_by_subline
BEGIN
local file gsn_master_just_added = alias for gsn_master;

l_company_id = "GGUND"

access gsn_master_just_added, set gsn_master_just_added:policy_no = "", generic

while gsn_master_just_added:errornumber = 0
    begin
    if (((gsn_master_just_added:trans_date     < l_starting_date and
          gsn_master_just_added:trans_eff_date => l_starting_date and
          gsn_master_just_added:trans_eff_date <= l_ending_date) or

        (gsn_master_just_added:trans_date     => l_starting_date and
         gsn_master_just_added:trans_date     <= l_ending_date and
         gsn_master_just_added:trans_eff_date <= l_ending_date)) and

         gsn_master_just_added:trans_code < 17 and
         gsn_master_just_added:line_of_business one of 6) then

        begin
        access gsn_master_compare, set gsn_master_compare:company_id       = l_company_id,
                                         gsn_master_compare:policy_no        = gsn_master_just_added:policy_no,
                                         gsn_master_compare:pol_year         = gsn_master_just_added:pol_year,
                                         gsn_master_compare:end_sequence     = gsn_master_just_added:end_sequence,
                                         gsn_master_compare:line_of_business = gsn_master_just_added:line_of_business,
                                         gsn_master_compare:lob_subline      = gsn_master_just_added:lob_subline,
                                         gsn_master_compare:trans_date       = gsn_master_just_added:trans_date,
                                         gsn_master_compare:trans_code       = gsn_master_just_added:trans_code, exact

        if gsn_master_compare:company_id       <> l_company_id or
           gsn_master_compare:policy_no        <> gsn_master_just_added:policy_no or
           gsn_master_compare:pol_year         <> gsn_master_just_added:pol_year or
           gsn_master_compare:end_sequence     <> gsn_master_just_added:end_sequence or
           gsn_master_compare:line_of_business <> gsn_master_just_added:line_of_business or
           gsn_master_compare:lob_subline      <> gsn_master_just_added:lob_subline or
           gsn_master_compare:trans_date       <> gsn_master_just_added:trans_date or
           gsn_master_compare:trans_code       <> gsn_master_just_added:trans_code then
            begin
              add gsn_master_compare
                begin
                gsn_master_compare:company_id       = l_company_id
                gsn_master_compare:policy_no        = gsn_master_just_added:policy_no
                gsn_master_compare:pol_year         = gsn_master_just_added:pol_year
                gsn_master_compare:end_sequence     = gsn_master_just_added:end_sequence
                gsn_master_compare:line_of_business = gsn_master_just_added:line_of_business
                gsn_master_compare:lob_subline      = gsn_master_just_added:lob_subline
                gsn_master_compare:trans_date       = gsn_master_just_added:trans_date
                gsn_master_compare:trans_code       = gsn_master_just_added:trans_code
                gsn_master_compare:TRANS_EFF        = gsn_master_just_added:TRANS_EFF_DATE
                gsn_master_compare:EFF_DATE         = gsn_master_just_added:POLICY_EFF_DATE
                gsn_master_compare:prem_no          = gsn_master_just_added:prem_no
                gsn_master_compare:build_no         = gsn_master_just_added:BUILD_NO
                gsn_master_compare:sub_code         = gsn_master_just_added:sub_code
                gsn_master_compare:premium          = gsn_master_just_added:premium
                gsn_master_compare:line_type        = gsn_master_just_added:line_type
               end
            end
        else
        if gsn_master_compare:company_id       = l_company_id and
           gsn_master_compare:policy_no        = gsn_master_just_added:policy_no and
           gsn_master_compare:pol_year         = gsn_master_just_added:pol_year and
           gsn_master_compare:end_sequence     = gsn_master_just_added:end_sequence and
           gsn_master_compare:line_of_business = gsn_master_just_added:line_of_business and
           gsn_master_compare:lob_subline      = gsn_master_just_added:lob_subline and
           gsn_master_compare:trans_date       = gsn_master_just_added:trans_date and
           gsn_master_compare:trans_code       = gsn_master_just_added:trans_code and
           gsn_master_compare:trans_eff        = gsn_master_just_added:trans_eff_date and
           gsn_master_compare:eff_date         = gsn_master_just_added:policy_eff_date then
            begin
            change gsn_master_compare
                begin
                gsn_master_compare:company_id       = l_company_id
                gsn_master_compare:policy_no        = gsn_master_just_added:policy_no
                gsn_master_compare:pol_year         = gsn_master_just_added:pol_year
                gsn_master_compare:end_sequence     = gsn_master_just_added:end_sequence
                gsn_master_compare:line_of_business = gsn_master_just_added:line_of_business
                gsn_master_compare:lob_subline      = gsn_master_just_added:lob_subline
                gsn_master_compare:trans_date       = gsn_master_just_added:trans_date
                gsn_master_compare:trans_code       = gsn_master_just_added:trans_code
                gsn_master_compare:TRANS_EFF        = gsn_master_just_added:TRANS_EFF_DATE
                gsn_master_compare:EFF_DATE         = gsn_master_just_added:POLICY_EFF_DATE
                gsn_master_compare:prem_no          = gsn_master_just_added:prem_no
                gsn_master_compare:build_no         = gsn_master_just_added:BUILD_NO
                gsn_master_compare:sub_code         = gsn_master_just_added:sub_code
                gsn_master_compare:premium          = gsn_master_compare:premium + gsn_master_just_added:premium
                gsn_master_compare:line_type        = gsn_master_just_added:line_type
                end
            end

        end

    next gsn_master_just_added
    end

END

procedure process_scips_premium_file

--this procedure will create a new file from premium that has the following key
--COMPANY_ID+POLICY_NO+POL_YEAR+END_SEQUENCE+LINE_OF_BUSINESS+LOB_SUBLINE+TRANS_DATE+TRANS_CODE
--this will then allow me to access this file by subline and trans_date to verify that my total for all my location are correct


BEGIN
  local unsigned ascii number l_count_change[8];
  access prsmaster,
     set prsmaster:company_id = "", generic

  while prsmaster:errornumber = 0
    {
      if ((prsmaster:trans_date < l_starting_date and
           prsmaster:trans_eff => l_starting_date and
           prsmaster:trans_eff <= l_ending_date) or

          (prsmaster:trans_date => l_starting_date and
           prsmaster:trans_date <= l_ending_date and
           prsmaster:trans_eff <= l_ending_date)) and

           prsmaster:trans_eff <> prsmaster:trans_exp and
           prsmaster:line_of_business one of 6 and
           prsmaster:trans_code < 17 and 
           prsmaster:trans_eff => 11.20.2018 then
        {
          access gsn_master_premium,
             set gsn_master_premium:company_id       = prsmaster:company_id,
                 gsn_master_premium:policy_no        = prsmaster:policy_no,
                 gsn_master_premium:pol_year         = prsmaster:pol_year,
                 gsn_master_premium:end_sequence     = prsmaster:end_sequence,
                 gsn_master_premium:line_of_business = prsmaster:line_of_business,
                 gsn_master_premium:lob_subline      = prsmaster:lob_subline,
                 gsn_master_premium:trans_date       = prsmaster:trans_date,
                 gsn_master_premium:trans_code       = prsmaster:trans_code, exact

          if gsn_master_premium:company_id       <> prsmaster:company_id or
             gsn_master_premium:policy_no        <> prsmaster:policy_no or
             gsn_master_premium:pol_year         <> prsmaster:pol_year or
             gsn_master_premium:end_sequence     <> prsmaster:end_sequence or
             gsn_master_premium:line_of_business <> prsmaster:line_of_business or
             gsn_master_premium:lob_subline      <> prsmaster:lob_subline or
             gsn_master_premium:trans_date       <> prsmaster:trans_date or
             gsn_master_premium:trans_code       <> prsmaster:trans_code then
            {
              add gsn_master_premium
                begin
                  gsn_master_premium:company_id       = prsmaster:company_id
                  gsn_master_premium:policy_no        = prsmaster:policy_no
                  gsn_master_premium:pol_year         = prsmaster:pol_year
                  gsn_master_premium:end_sequence     = prsmaster:end_sequence
                  gsn_master_premium:line_of_business = prsmaster:line_of_business
                  gsn_master_premium:lob_subline      = prsmaster:lob_subline
                  gsn_master_premium:trans_date       = prsmaster:trans_date
                  gsn_master_premium:trans_code       = prsmaster:trans_code
                  gsn_master_premium:trans_eff        = prsmaster:trans_eff
                  gsn_master_premium:eff_date         = prsmaster:eff_date
                  gsn_master_premium:premium          = prsmaster:premium
                end
            }
          else
            {
              change gsn_master_premium
                begin
                  gsn_master_premium:company_id       = prsmaster:company_id
                  gsn_master_premium:policy_no        = prsmaster:policy_no
                  gsn_master_premium:pol_year         = prsmaster:pol_year
                  gsn_master_premium:end_sequence     = prsmaster:end_sequence
                  gsn_master_premium:line_of_business = prsmaster:line_of_business
                  gsn_master_premium:lob_subline      = prsmaster:lob_subline
                  gsn_master_premium:trans_date       = prsmaster:trans_date
                  gsn_master_premium:trans_code       = prsmaster:trans_code
                  gsn_master_premium:trans_eff        = prsmaster:trans_eff
                  gsn_master_premium:eff_date         = prsmaster:eff_date
                  gsn_master_premium:premium          = gsn_master_premium:premium + prsmaster:premium
                end
               l_count_change = l_count_change + 1
             }
        }
      next prsmaster
    }
END

procedure get_contractor_info

BEGIN
  access scpcontractor_alias,
     set scpcontractor_alias:policy_no        = sfplocation:policy_no,
         scpcontractor_alias:pol_year         = sfplocation:pol_year,
         scpcontractor_alias:end_sequence     = sfplocation:end_sequence, generic    --used for accessing the classcode first location

    access scpcontractor,
       set scpcontractor:policy_no        = sfplocation:policy_no,
           scpcontractor:pol_year         = sfplocation:pol_year,
           scpcontractor:end_sequence     = sfplocation:end_sequence,
           scpcontractor:prem_no          = sfplocation:prem_no,
           scpcontractor:build_no         = sfplocation:build_no, generic


  l_iso_class_code = ""
  l_iso_sic_code   = ""
  access scpclasscode,
     set scpclasscode:policy_no        = scpcontractor_alias:policy_no,
         scpclasscode:pol_year         = scpcontractor_alias:pol_year,
         scpclasscode:end_sequence     = scpcontractor_alias:end_sequence, generic

  while scpclasscode:policy_no        = scpcontractor:policy_no and
        scpclasscode:pol_year         = scpcontractor:pol_year and
        scpclasscode:end_sequence     = scpcontractor:end_sequence
    {
      Access SCSCLASSCODE,
         Set SCSCLASSCODE:COMPANY_ID       = l_COMPANY_ID,
             SCSCLASSCODE:STATE            = L_STATE,
             SCSCLASSCODE:LINE_OF_BUSINESS = l_LINE_OF_BUSINESS,
             SCSCLASSCODE:CLASS_CODE       = scpCLASSCODE:CLASS_CODE, approximate

      l_eff_date = 00.00.0000

      while SCSCLASSCODE:COMPANY_ID       = l_COMPANY_ID and
            SCSCLASSCODE:STATE            = L_STATE and
            SCSCLASSCODE:LINE_OF_BUSINESS = l_LINE_OF_BUSINESS and
            SCSCLASSCODE:CLASS_CODE       = scpCLASSCODE:CLASS_CODE
        begin
           If sfpNAME:EFF_DATE >= SCSCLASSCODE:EFF_DATE Then
             {
               l_eff_date               = SCSCLASSCODE:eff_date
             }
           Next SCSCLASSCODE
        End

      Access SCSCLASSCODE,
         Set SCSCLASSCODE:COMPANY_ID       = l_COMPANY_ID,
             SCSCLASSCODE:STATE            = L_STATE,
             SCSCLASSCODE:LINE_OF_BUSINESS = l_LINE_OF_BUSINESS,
             SCSCLASSCODE:CLASS_CODE       = scpCLASSCODE:CLASS_CODE,
             scsclasscode:eff_date         = l_eff_date, exact

      if scpclasscode:class_code <> 0 then
        {
          l_class_code     = scpclasscode:class_code
          l_iso_class_code = scsclasscode:iso_liab_class_code
        }
      l_iso_sic_code   = scsclasscode:sic

      next scpclasscode
    }
  Access scpLIABLIMITS,
     Set scpLIABLIMITS:policy_NO    = sfpname:policy_NO ,
         scpliablimits:pol_year     = sfpname:pol_year,
         scpliablimits:end_sequence = sfpname:end_sequence, Generic
END

procedure check_if_claim_was_made(number p_policy_no,
                                  rwdate p_eff_date,
                                  rwdate p_exp_date)

BEGIN
  access lrssetup,
     set lrssetup:policy_no  = p_policy_no, exact

  l_claims_count = 0
  while lrssetup:policy_no = p_policy_no
    {
      if lrssetup:loss_date >= p_eff_date and
         lrssetup:loss_date <= p_exp_date  then
        {
          l_claim_count = l_claim_count + 1
        }
      next lrssetup
    }
END

procedure check_for_county(number p_state, number p_county)

BEGIN
  unsigned ascii number l_state[2] = p_state ;
  unsigned ascii number l_county[3] = p_county;
  access sfsstate,
     set sfsstate:company_id = sfpname:company_id,
         sfsstate:state      = l_state,
         sfsstate:county     = l_county, generic

  l_county_str  = SFSSTATE:DESCRIPTION
END

procedure fill_in_locals_by_LOB

BEGIN
  unsigned ascii number l_loop[2];
  l_deductible          = ""
  l_occupancy_type      = ""
  l_no_units            = ""
  l_premium             = 0
  l_building_deductible = ""
  l_wind_deductible     = ""
  l_form                = ""
  l_liability_code      = 0

  l_protection          = ""
  for l_loop = 1 to 30
    {
      l_limit[l_loop]   = 0
    }

  switch (sfsline:lob_code)
    case "SCP" : BEGIN
                   l_construction_class = str(scpCONTRACTOR:construction)
                   l_deductible         = str(sfpMASTER:DEDUCTIBLE)
                   l_construction_year  = str(scpcontractor:YEAR_CONSTRUCTION)
                   if val(trun(l_construction_year)) < 3 then
                     {
                       l_construction_year = "Unknown"
                     }
                   l_wind_deductible    = str(scpcontractor:wind_deductible)
                   l_occupancy_type     = ""
                   l_form               = str(sfpmaster:form)
                   l_limit[1]           = scpcontractor:building_limit
                   l_limit[2]           = scpcontractor:PROPERTY_LIMIT
                   l_limit[3]           = scpcontractor:personal_limit
                   l_protection         = str(scpcontractor:protection)
                   l_site_description   = scpCONTRACTOR:BUSINESS_DESC[1] + scpCONTRACTOR:BUSINESS_DESC[2]
                   l_liability_code     = scpLIABLIMITS:AGGREGATE

                   access scpliablimits,
                      set scpliablimits:policy_no     = l_policy_no,
                          scpliablimits:pol_year      = l_pol_year,
                          scpliablimits:end_sequence  = l_end_sequence, exact

                   l_limit[11]          = scpliablimits:OCCURRENCE
                   l_limit[12]          = scpliablimits:general_aggregate
                   l_limit[13]          = scpliablimits:aggregate
                   l_limit[14]          = scpliablimits:medical_payments
                   l_limit[15]          = scpliablimits:fire_legal
                   l_limit[16]          = scpliablimits:PERSONAL_INJURY

                   l_limit[10]          = scpCONTRACTOR:AR_LIMIT +
                                          scpCONTRACTOR:GLASS_LIMIT +
                                          scpCONTRACTOR:SIGNS_ATTACHED_LIMIT +
                                          scpCONTRACTOR:DEBRIS_LIMIT +
                                          scpCONTRACTOR:OFF_PREM_LIMIT +
                                          scpCONTRACTOR:OUTDOOR_PROPERTY_LIMIT +
                                          scpCONTRACTOR:WATER_BKUP_LIMIT +
                                          scpCONTRACTOR:OUTDOOR_PROPERTY_LIMIT +
                                          scpCONTRACTOR:PERSONAL_EFFECTS +
                                          scpCONTRACTOR:WATER_BKUP_LIMIT +
                                          scpCONTRACTOR:COMPUTER_LIMIT +
                                          scpcontractor:OFF_PREM_LIMIT_PER +
                                          scpcontractor:employee_tools_limit +
                                          scpcontractor:personal_property_of_others +
                                          scpcontractor:pollution_limit

                   l_waive_deductible_charge = scpliablimits:waive_deductible_charge
                   l_res_condo = 0
                 END
  }

END

procedure add_to_gsn_master

BEGIN
  local file cppliability_all_locations  = alias for cppliability;
  unsigned ascii number l_add_products[1],
                        l_add_premise[1],
                        l_add_crime[1],
                        l_add_inland[1],
                        l_add_glass[1],
                        l_stored_loc[2],
                        l_add_irpm_only_once[1];
  string l_crime_form[1];

  access sfsdefault,
     set sfsdefault:sfs_code = "SFS", exact

  if l_hold_policy_no    <> l_policy_no or
     l_hold_pol_year     <> l_pol_Year or
     l_hold_end_sequence <> l_end_sequence then
    {
      --put the check for deleted location here.
      if (l_hold_policy_no <> l_policy_no and
          l_hold_policy_no <> 0) or
         (l_hold_end_sequence <> l_end_sequence and
          l_hold_policy_no = l_policy_no) then
        {
          do check_for_deleted_location
        }

      --calculate the prsmaster:total and sfplocation:totals
      l_current_total_premium    = 0
      L_identity_theft_only_once = 0
      l_terrorism_only_once      = 0
      l_sfpend_forms_only_once = 0
      l_percent_of_prsmaster   = 0
      l_hold_policy_no         = l_policy_no
      l_hold_pol_Year          = l_pol_year
      l_hold_end_sequence      = l_end_sequence
      l_hold_prem_no           = l_prem_no
      l_hold_build_no          = l_build_no
      l_hold_line_of_business  = l_line_of_business
      l_hold_lob_subline       = l_lob_subline
      l_sub_code               = 0
      l_do_only_once           = 0
      l_calculate_money_once   = 0
      l_do_terrorism_only_once = 0
      l_misc                   = 0
      l_liability_deductible   = ""
      l_deductible             = ""
      l_iso_statement_line     = ""
      l_county_str             = ""
      l_process_umbrella_once  = 0
      l_liability_is_policy_wide = 0  --used for contractors to only total liabiity once
      l_identity_theft = 0            --used for contractors to only total theft once
    }

  switch (sfpmaster:trans_code)
    case 10 : l_policy_indicator = "NEW"
    case 11 : l_policy_indicator = "CANCELLED"
    case 12 : l_policy_indicator = "INCREASE COVERAGE"
    case 13 : l_policy_indicator = "DECREASE COVERAGE"
    case 14 : BEGIN
                if sfpname:eff_date >= 01.25.2016 then
                  l_policy_indicator = "RENEWAL"
                else
                  l_policy_indicator = "NEW"
              END
    case 15 : l_policy_indicator = "AUDIT"
    case 16 : l_policy_indicator = "REINSTATEMENT"
  END

  do check_if_claim_was_made(sfpname:policy_no,sfpname:eff_date, sfpname:exp_date)

  if sfsline:LOB_CODE one of "SCP" then
    {
      do process_scp    --contractors
    }
end

procedure collect_misc_premium

BEGIN
  Access sfpMISC,
     Set sfpMISC:policy_NO    = l_policy_NO,
         sfpmisc:pol_Year     = l_pol_Year,
         sfpmisc:end_sequence = l_end_sequence, Generic
  if L_misc one of 0 then
    {
      While sfpMISC:policy_NO    = l_policy_NO and
            sfpmisc:pol_year     = l_pol_year and
            sfpmisc:end_sequence = l_end_sequence
        Begin
          switch (sfpMISC:LOB_END_CODE)
            case "P" : L_MISC_PREMIUM[1] = L_MISC_PREMIUM[1] + sfpMISC:PREMIUM
            case "L" : l_misc_premium[2] = L_MISC_PREMIUM[2] + sfpMISC:PREMIUM  --liability
            case "I" : l_misc_premium[3] = L_MISC_PREMIUM[3] + sfpMISC:PREMIUM  --inland marine
            case "U" : l_misc_premium[4] = L_MISC_PREMIUM[4] + sfpMISC:PREMIUM  --umbrella
          End
          l_misc = 1
          Next sfpMISC
        END
   }
End

procedure process_scp      --contractors

BEGIN
  access sfsline_by_subline,
     set sfsline_by_subline:company_id       = sfsline:company_id,
         sfsline_by_subline:line_of_business = sfsline:line_of_business, generic

  while sfsline_by_subline:company_id       = sfsline:company_id and
        sfsline_by_subline:line_of_business = sfsline:line_of_business
    {
      do get_contractor_info

      if scpcontractor:policy_no    = sfplocation:policy_no and
         scpcontractor:pol_year     = sfplocation:pol_year and
         scpcontractor:end_sequence = sfplocation:end_sequence and
         scpcontractor:prem_no      = sfplocation:prem_no and
         scpcontractor:build_no     = sfplocation:build_no then
        {
          do check_for_county(scpcontractor:state,scpcontractor:county)
          l_state = scpcontractor:state
          do fill_in_locals_by_LOB
          l_lob_subline = sfsline_by_subline:lob_subline
          l_premium = 0
          l_coverage  = ""

      switch (sfsline_by_subline:lob_code)
        case "TERROR"  : begin
                           l_year_of_construction = 0
                           l_mold_coverage = "8"
                           l_coverage = "3"
                           l_rate_group = ""
                           l_rating_id_code = "9"
                           l_coverage_retroactive_date = ""
                           if sfplocation:str_state = "NJ" then
                             begin
                               if sfplocation:year_construction < 1978 and
                                  sfplocation:year_construction <> 0 then
                                 {
                                   l_state_exception_code = "1"
                                   l_year_of_construction = sfplocation:year_construction
                                 }
                               else
                                 {
                                   l_year_of_construction = sfplocation:year_construction
                                   l_state_exception_code = "9"
                                 }
                             end
                           else
                             {
                               l_state_exception_code = "N/A"
                               l_year_of_construction = sfplocation:year_construction
                             }
                           l_premium = sfpmaster:terrorism_premium
                           l_type_of_policy = 78
                           switch(scpLIABLIMITS:occurrence)
                             case 300000 : l_iso_policy_limits = "64"
                             case 500000 : switch(scpLIABLIMITS:general_aggregate)
                                                   case 1000000 : l_iso_policy_limits = "68"
                                                   default      : l_iso_policy_limits = "69"
                                                end
                             case 1000000 : switch(scpLIABLIMITS:general_aggregate)
                                              case 2000000 : l_iso_policy_limits = "73"
                                              default      : l_iso_policy_limits = "72"
                                            end
                           end
                           l_exposure_base = "N/A"
                           do gsn_master_add
                         end
        CASE "THEFT"   : begin
                           l_mold_coverage = "8"
                           l_rating_id_code = ""
                           l_rate_group = "B"
                           l_coverage = "999999"
                           l_coverage_retroactive_date = ""
                           l_state_exception_code = "N/A"
                           if l_identity_theft = 0 then
                             {
                               l_coinsurance_factor  = "0"
                               l_identity_theft = 1
                               l_iso_policy_limits = ""
                               l_premium = sfpmaster:total[7]
                               l_type_of_policy = 95
                               switch(scpCONTRACTOR:RATING_TYPE)
                                 case 1 : l_iso_class_code = "0702"
                                 case 2 : l_iso_class_code = "1650"
                                 default : l_iso_class_code = "999999"
                               end
                               l_deductible_pd = "01"
                               l_exposure_base = "N/A"
                               do gsn_master_add
                             }
                         end
        Case "LIABILITY" : BEGIN
                             if l_liability_is_policy_wide = 0 then
                               {
                                 l_year_of_construction = 0
                                 if sfplocation:str_state = "NJ" then
                                   begin
                                     if sfplocation:year_construction < 1978 and
                                        sfplocation:year_construction <> 0 then
                                       {
                                         l_state_exception_code = "1"
                                         l_year_of_construction = sfplocation:year_construction
                                       }
                                     else
                                       {
                                         l_state_exception_code = "9"
                                         l_year_of_construction = sfplocation:year_construction
                                       }
                                   end
                                 else
                                   {
                                     l_state_exception_code = "N/A"
                                     l_year_of_construction = sfplocation:year_construction
                                   }
                                 l_coinsurance_factor  = "0"
                                 l_rate_group = ""
                                 l_rating_id_code = "9"
                                 l_coverage_retroactive_date = ""
                                 l_mold_coverage = "8"
                                 l_deductible_bi = "01"  --defaulted to 01
                                 l_deductible_pd = "01"
                                 if scpLIABLIMITS:LIAB_DEDUCTIBLE <> 0 then
                                   begin
                                     switch(scpLIABLIMITS:LIAB_DEDUCTIBLE)
                                       case 250 : l_deductible_pd = "04"
                                       case 500 : l_deductible_pd = "05"
                                       default  : l_deductible_pd = "01"
                                     end
                                   end
                                 l_coverage = "3"    --occurrence
                                 l_liability_is_policy_wide = 1
--                                 L_PREMIUM = sfpmaster:total[1] - sfpmaster:total[10] - sfpmaster:total[9]           --irpm is in total[19]

                                 l_type_of_policy     = 78
                                 switch(scpLIABLIMITS:occurrence)
                                   case 300000 : l_iso_policy_limits = "64"
                                   case 500000 : switch(scpLIABLIMITS:general_aggregate)
                                                   case 1000000 : l_iso_policy_limits = "68"
                                                   default      : l_iso_policy_limits = "69"
                                                end
                                   case 1000000 : switch(scpLIABLIMITS:general_aggregate)
                                                    case 2000000 : l_iso_policy_limits = "73"
                                                    default      : l_iso_policy_limits = "72"
                                                  end
                                 end

                                 if (scpCLASSCODE:policy_NO    <> scpcontractor:policy_no or
                                     scpclasscode:pol_year     <> scpcontractor:pol_year or
                                     scpclasscode:end_sequence <> scpcontractor:end_sequence) or

                                    (scpCLASSCODE:policy_NO    = scpcontractor:policy_no and
                                     scpclasscode:pol_year     = scpcontractor:pol_year and
                                     scpclasscode:end_sequence = scpcontractor:end_sequence) and
                                     scpCLASSCODE:PREM_NO      <> scpcontractor:prem_no then
                                   {
                                     l_add_per_payroll_once_per_loc = 0
                                   }

                                 Access scpCLASSCODE,
                                    Set scpCLASSCODE:policy_NO    = scpcontractor:policy_no,
                                        scpclasscode:pol_year     = scpcontractor:pol_year,
                                        scpclasscode:end_sequence = scpcontractor:end_sequence,
                                        scpCLASSCODE:PREM_NO      = scpcontractor:prem_no,
                                        scpCLASSCODE:BUILD_NO     = scpcontractor:build_no, generic

                                 l_exposure = 0
                                 l_premium = 0

                                --l_add_per_payroll_once_per_loc = 0
                                 access sfpend,
                                    set sfpend:policy_no     = scpcontractor:policy_no,
                                        sfpend:pol_year      = scpcontractor:pol_year,
                                        sfpend:end_sequence  = scpcontractor:end_sequence, generic
--                                        sfpend:prem_no       = l_prem_no,
--                                        sfpend:build_No      = l_build_no, generic

                                 while sfpend:policy_no    = scpcontractor:policy_no and
                                       sfpend:pol_year     = scpcontractor:pol_year and
                                       sfpend:end_sequence = scpcontractor:end_sequence
--                                       sfpend:prem_no      = l_prem_no and
--                                       sfpend:build_No     = l_build_no
                                   {
                                     if sfpend:code not one of "MSC713D" then
                                       {
                                       if sfpend:terrorism_form <> 1 then
                                           l_premium = l_premium + sfpend:premium
                                       }
                                     next sfpend
                                   }

                                 while scpCLASSCODE:policy_NO    = scpcontractor:policy_no and
                                       scpclasscode:pol_year     = scpcontractor:pol_year and
                                       scpclasscode:end_sequence = scpcontractor:end_sequence and
                                       scpCLASSCODE:PREM_NO      = scpcontractor:prem_no and
                                       scpCLASSCODE:BUILD_NO     = scpcontractor:build_no
                                   {
                                     l_exposure = l_exposure + scpCLASSCODE:payroll_amount   --this was added 6/18/2014 per kunal email exposure for contractor for liability was not correct.
                                     l_premium  = l_premium + scpclasscode:payroll_premium
                                     next scpCLASSCODE
                                   }
                                 if sfpmaster:policy_no    = scpcontractor:policy_no and
                                    sfpmaster:pol_year     = scpcontractor:pol_year and
                                    sfpmaster:end_sequence = scpcontractor:end_sequence then
                                   {
                                     l_premium = l_premium + sfpmaster:other_totals[2] + sfpmaster:total[19] + l_waive_deductible_charge                            --flat charge payroll other_totals[2] and irpm total[19]
                                   }
                                 l_exposure_base = "N/A"
                                 do gsn_master_add
                               }
                             l_coverage = "3"    --occurrence
                             do additional_liability_class_codes
                           end
        case "PROPERTY" : BEGIN
                            l_exposure = 0
                            l_mold_coverage = "8"
                            l_coverage_retroactive_date = ""
                            l_iso_policy_limits = ""
                            l_rate_group = "B"
                            l_type_of_policy     = 96
                            l_state_exception_code = "N/A"
                            l_rating_id_code = "2"
                            l_coinsurance_factor  = "0"
                            for l_loop = 1 to 2   --1 is for building  --2 is personal property
                              {
                                switch (l_loop)
                                  case 1 : begin
                                             l_coverage = "1"
                                             l_sub_code = l_sub_code + 1
                                             l_premium = 0
                                             L_PREMIUM = scpcontractor:building_premium
                                             l_exposure = scpCONTRACTOR:BUILDING_LIMIT +
                                                          scpcontractor:fire_premium


                                             do gsn_master_add
                                           end
                                  case 2 : BEGIN
                                           l_coverage = "2"
                                           l_sub_code = l_sub_code + 1
                                           l_exposure = scpCONTRACTOR:PROPERTY_LIMIT + scpCONTRACTOR:PERSONAL_LIMIT
                                           l_premium = 0
                                           l_premium = scpcontractor:property_premium +
                                                         scpcontractor:expanded_premium +
                                                         scpcontractor:personal_premium +
                                                         scpcontractor:loss_premium +
                                                         scpCONTRACTOR:EXPANDED_PREMIUM_PERSONAL_PROP +
                                                         scpcontractor:off_preM_premium +
                                                         scpcontractor:computer_premium +
                                                         scpcontractor:debris_premium +
                                                         scpcontractor:contents_acv_premium +
                                                         scpcontractor:BUILDING_CODE_PREMIUM +
                                                         scpcontractor:building_acv_premium +
                                                         scpcontractor:SIGNS_not_PREMium +
                                                         scpcontractor:water_bKUP_premium +
                                                         scpcontractor:SIGNS_ATTACHED_PREM +
                                                         SCPCONTRACTOR:GLASS_PREMIUM +
                                                         scpcontractor:AR_PREMIUM +
                                                         scpcontractor:VALUABLE_PAPERS_PREMIUM +
                                                         SCPCONTRACTOR:PERsonal_EFFects_PREMIUM +
                                                         SCPCONTRACTOR:OUTDOOR_PROPERTY_PREMIUM +
                                                         scpcontractor:EXTERIOR_GLASS_PREM

                                             access sfpend,
                                                set sfpend:policy_no     = scpcontractor:policy_no,
                                                    sfpend:pol_year      = scpcontractor:pol_year,
                                                    sfpend:end_sequence  = scpcontractor:end_sequence, generic
--                                                    sfpend:prem_no       = l_prem_no,
--                                                    sfpend:build_no      = l_build_no, generic

                                             l_limit[10] = 0

                                             while sfpend:policy_no    = scpcontractor:policy_no and
                                                   sfpend:pol_year     = scpcontractor:pol_year and
                                                   sfpend:end_sequence = scpcontractor:end_sequence
--                                                   sfpend:prem_no      = l_prem_no and
--                                                   sfpend:build_No     = l_build_no
                                               {
                                                 if sfpend:code one of "MSC713D" then
                                                   {
                                                     l_premium = l_premium + sfpend:premium
                                                   }
                                                 next sfpend
                                               }
                                             access scpendorse,
                                                set scpendorse:policy_no     = scpcontractor:policy_no,
                                                    scpendorse:pol_year      = scpcontractor:pol_year,
                                                    scpendorse:end_sequence  = scpcontractor:end_sequence,
                                                    scpendorse:prem_no       = scpcontractor:prem_no,
                                                    scpendorse:build_no      = scpcontractor:build_no,
                                                    scpendorse:code          = "MSC713D", generic

                                             while scpendorse:policy_no     = scpcontractor:policy_no and
                                                   scpendorse:pol_year      = scpcontractor:pol_year and
                                                   scpendorse:end_sequence  = scpcontractor:end_sequence and
                                                   scpendorse:prem_no       = scpcontractor:prem_no and
                                                   scpendorse:build_no      = scpcontractor:build_no and
                                                   scpendorse:code          = "MSC713D"
                                               {
                                                 if scpendorse:code one of "MSC713D" then
                                                   {
                                                     --l_limit[10] = l_limit[10] + scpendorse:limit[1] + scpendorse:limit[2] + scpendorse:limit[3] + scpendorse:limit[4]+ scpendorse:limit[5] + scpendorse:limit[6] + scpendorse:limit[7]

-- per 07/23/2020 do not include liability to total exposure - limit[6] = liability
                                                     l_limit[10] = l_limit[10] + scpendorse:limit[1] + 
                                                                   scpendorse:limit[2] + scpendorse:limit[3] + 
                                                                   scpendorse:limit[4]+ scpendorse:limit[5] + 
                                                                   scpendorse:limit[7]
                                                     l_exposure = l_exposure + l_limit[10]
                                                   }
                                                 next scpendorse
                                               }

                                             access scpmoney,
                                                set scpmoney:policy_no    = scpcontractor:policy_no,
                                                    scpmoney:pol_year     = scpcontractor:pol_year,
                                                    scpmoney:end_sequence = scpcontractor:end_sequence, exact

                                             if scpmoney:policy_no    = scpcontractor:policy_no and
                                                scpmoney:pol_year     = scpcontractor:pol_year and
                                                scpmoney:end_sequence = scpcontractor:end_sequence then
                                               {
                                                 l_calculate_money_once = 1
                                                 l_premium = l_premium + scpMONEY:MONEY_PREMIUM
                                               }
                                            switch(scpCONTRACTOR:RATING_TYPE)
                                              case 1 : l_iso_class_code = "0702"    --the mso class codes were from connie and the iso classcode is from the file in cpp  property mso class codes based on rate type.
                                              case 2 : l_iso_class_code = "1650"
                                            end
                                             l_exposure_base = "N/A"
                                             do gsn_master_add
                                           END
                                end
                              }
                          end
        CASE "INLAND"  : BEGIN
                           if sfsline_by_subline:lob_subline one of "89" then  --do not remove because of 90 from legacy system
                             {
                               l_coinsurance_factor  = "0"
                               l_mold_coverage = ""
                               l_type_of_policy = 78
                               l_coverage = "999999"
                               l_state_exception_code = "N/A"
                               access sfpend,
                                  set sfpend:policy_no     = l_policy_no,
                                      sfpend:pol_year      = l_pol_year,
                                      sfpend:end_sequence  = l_end_sequence,
                                      sfpend:prem_no       = l_prem_no,
                                      sfpend:build_no      = l_build_no, generic
                               l_limit[27] = 0
                               while sfpend:policy_no    = l_policy_no and
                                     sfpend:pol_year     = l_pol_year and
                                     sfpend:end_sequence = l_end_sequence and
                                     sfpend:prem_no      = l_prem_no and
                                     sfpend:build_No     = l_build_no
                                 {
                                   access scpendorse,
                                      set scpendorse:policy_no     = l_policy_no,
                                          scpendorse:pol_year      = l_pol_year,
                                          scpendorse:end_sequence  = l_end_sequence,
                                          scpendorse:prem_no       = l_prem_no,
                                          scpendorse:build_no      = l_build_no,
                                          scpendorse:code          = sfpend:code, generic

                                   while scpendorse:policy_no     = l_policy_no and
                                         scpendorse:pol_year      = l_pol_year and
                                         scpendorse:end_sequence  = l_end_sequence and
                                         scpendorse:prem_no       = l_prem_no and
                                         scpendorse:build_no      = l_build_no and
                                         scpendorse:code          = sfpend:code
                                     {
                                       if scpendorse:code one of "GIM121","MIM012" then
                                         {
                                           l_limit[27] = l_limit[27] + scpendorse:limit[1] + scpendorse:limit[2] + scpendorse:limit[3] + scpendorse:limit[4]+ scpendorse:limit[5] + scpendorse:limit[6] + scpendorse:limit[7]

                                           l_exposure = l_exposure + l_limit[27]
                                         }
                                       next scpendorse
                                     }
                                   if sfpend:code one of "GIM121","MIM012" then
                                     {
                                       l_premium = l_premium + sfpend:premium
                                     }
                                   next sfpend
                                 }
                               l_iso_class_code = "798"
                               l_exposure_base = "N/A"
                               do gsn_master_add
                             }
                         end
      END
      }
      next sfsline_by_subline
    }  --while
END

procedure additional_liability_class_codes

BEGIN
  access scpadditionalclass_alias,
     set scpadditionalclass_alias:policy_no    = sfplocation:policy_no,
         scpadditionalclass_alias:pol_year     = sfplocation:pol_year,
         scpadditionalclass_alias:end_sequence = sfplocation:end_sequence,
         scpadditionalclass_alias:prem_no      = sfplocation:prem_no,
         scpadditionalclass_alias:build_no     = sfplocation:build_no, generic
 l_premium = 0
 l_exposure = 0
 l_exposure_base = "N/A"
 while scpadditionalclass_alias:policy_no    = sfplocation:policy_no and
       scpadditionalclass_alias:pol_year     = sfplocation:pol_year and
       scpadditionalclass_alias:end_sequence = sfplocation:end_sequence and
       scpadditionalclass_alias:prem_no      = sfplocation:prem_no and
       scpadditionalclass_alias:build_no     = sfplocation:build_no
   {
     do get_additional_iso_class_codes(scpadditionalclass_alias:class_code)
     l_premium = scpadditionalclass_alias:premium
     l_exposure = scpadditionalclass_alias:exposure_base
     l_exposure_base = scpadditionalclass_alias:exposure_type
     l_class_code = scpadditionalclass_alias:class_code
     l_sub_code = l_sub_code + 1
     do gsn_master_add
     next scpadditionalclass_alias
   }
END

procedure get_additional_iso_class_codes(number p_class_code)

BEGIN
  access scp_add_class_to_iso,
     set scp_add_class_to_iso:state            = l_state,
         scp_add_class_to_iso:line_of_business = l_line_of_business,
         scp_add_class_to_iso:class_code       = p_class_code, exact

  if scp_add_class_to_iso:state            = l_state and
     scp_add_class_to_iso:line_of_business = l_line_of_business and
     scp_add_class_to_iso:class_code       = p_class_code then
    {
      l_iso_class_code = scp_add_class_to_iso:iso_class_code
    }
END


procedure get_sfpend_total     --this will only total up the bu2510 and bu2597

BEGIN
  access sfpend,
     set sfpend:policy_no     = l_policy_no,
         sfpend:pol_year      = l_pol_year,
         sfpend:end_sequence  = l_end_sequence,
         sfpend:prem_no       = l_prem_no,
         sfpend:build_no      = l_build_no, generic

  l_sfpend_premium = 0
  while sfpend:policy_no    = l_policy_no and
        sfpend:pol_year     = l_pol_year and
        sfpend:end_sequence = l_end_sequence and
        sfpend:prem_no      = l_prem_no and
        sfpend:build_No     = l_build_no
    BEGIN
      if sfpend:code one of "BU2510", "BU2597" then  --THESE need to be subtracted out of the total for location if an IRPM is applied.  then added back in after the irpm is taken off.
        {
          l_sfpend_premium = l_sfpend_premium + sfpend:premium
        }
      next sfpend
    End

  access sfpend,
     set sfpend:policy_no     = l_policy_no,
         sfpend:pol_year      = l_pol_year,
         sfpend:end_sequence  = l_end_sequence,
         sfpend:prem_no       = 0,
         sfpend:build_no      = 0, generic

  if l_sfpend_forms_only_once = 0 then
    {
      while sfpend:policy_no    = l_policy_no and              --only need to do these once for the entire policy
            sfpend:pol_year     = l_pol_year and
            sfpend:end_sequence = l_end_sequence and
            sfpend:prem_no      = 0 and
            sfpend:build_No     = 0
        BEGIN
          if sfpend:code one of "BU2510", "BU2597" then  --THESE need to be subtracted out of the total for location if an IRPM is applied.  then added back in after the irpm is taken off.
            {
              l_sfpend_forms_only_once = 1
              l_sfpend_premium = l_sfpend_premium + sfpend:premium
            }
          next sfpend
        END
    }
END

Procedure PRO_RATA

Begin
  I_EFF_DATE = Dateadd(sfpmaster_check_endorsement:TRANS_EXP,0,-1)
  I_SHORT_RATE = sfpmaster_check_endorsement:SHORT_RATE
  I_TOTAL_DAYS = I_EFF_DATE - sfpmaster_check_endorsement:TRANS_EXP
  I_CX_DAYS = I_EFF_DATE - sfpmaster_check_endorsement:TRANS_EFF
  Include "prorata.pro"
End


procedure check_for_deleted_location

--this procedure will access the gsn_master file and check to see if the prior endorsement to the current endorsement has any missing locations/coverages.

BEGIN
local file gsn_master_prior = alias for gsn_master;
local file sfpname_current = alias for sfpname;
local file sfpmaster_current = alias for sfpmaster;

local signed ascii number l_difference[9] = 0,
                          l_save_prem_no[4],
                          l_prior_end_sequence[4],
                          l_save_build_no[4];

local array [10] of unsigned ascii number l_saved_subline[4];
local unsigned ascii number l_looping[4];
string l_policy_suffix[3];
local unsigned ascii number L_current_trans_code[2],
                            l_flag[1];
wdate l_trans_date,
      l_policy_eff_date,
      l_trans_eff_date,
      l_trans_exp_date,
      l_policy_exp_date;

access gsn_master_loop,
   set gsn_master_loop:policy_no        = l_hold_policy_no,
       gsn_master_loop:pol_year         = l_hold_pol_year,
       gsn_master_loop:end_sequence     = l_hold_end_sequence, generic      --use the current endorsement to access when the endorsement in the the same as the l_endorsement and the pol_year and policy is the same

--I need to find the previous end_sequence.  it will not always be end_sequence -1 so If I go previous here I can save the previous end_sequence and then access it with the correct end_sequence.
--I only need to check the prior endorsment no others are needed because this is done every time a policy endorsement is finished.

while gsn_master_loop:policy_no        = l_hold_policy_no and
      gsn_master_loop:pol_year         = l_hold_pol_year and
      gsn_master_loop:end_sequence     = l_hold_end_sequence
  {
    previous gsn_master_loop
  }

if gsn_master_loop:policy_no        = l_hold_policy_no and   --make sure there is a prior to add something from.
   gsn_master_loop:pol_year         = l_hold_pol_year then
  {
    l_prior_end_sequence = gsn_master_loop:end_sequence    --need to save this to use later so I know the end_sequence to check with.

    --I have to loop from all the location of the prior record and compare it to the one that was just entered to see if there are any deleted location
    --If I find something that is not in the current endorsement then I need to add the prior record into the current and put it as a negative premium

    access gsn_master_current,
       set gsn_master_current:policy_no    = l_hold_policy_no,
           gsn_master_current:pol_year     = l_hold_pol_year,
           gsn_master_current:end_sequence = l_hold_end_sequence, generic

    access sfpname_current,
       set sfpname_current:policy_no    = l_hold_policy_no,
           sfpname_current:pol_year     = l_hold_pol_year,
           sfpname_current:end_sequence = l_hold_end_sequence, generic

    access sfpmaster_current,
       set sfpmaster_current:policy_no    = l_hold_policy_no,
           sfpmaster_current:pol_year     = l_hold_pol_year,
           sfpmaster_current:end_sequence = l_hold_end_sequence, generic

    --I need to get the dates of the current endorsement and save them so I can then add them back in when I add in the missing location with the current endorsments dates.

    if gsn_master_current:policy_no    = l_hold_policy_no and
       gsn_master_current:pol_year     = l_hold_pol_year and
       gsn_master_current:end_sequence = l_hold_end_sequence then
      {
        l_current_trans_code  = gsn_master_current:trans_code
        l_trans_date          = gsn_master_current:trans_date
        l_policy_eff_date     = gsn_master_current:policy_eff_date
        l_policy_exp_date     = gsn_master_current:policy_exp_date
        l_trans_eff_date      = gsn_master_current:trans_eff_date
        l_trans_exp_date      = gsn_master_current:trans_exp_date
        l_policy_suffix       = gsn_master_current:policy_suffix
      }

    access gsn_master_prior,
       set gsn_master_prior:policy_no        = l_hold_policy_no,
           gsn_master_prior:pol_year         = l_hold_pol_year,
           gsn_master_prior:end_sequence     = l_prior_end_sequence, generic

    while gsn_master_prior:policy_no        = l_hold_policy_no and
          gsn_master_prior:pol_year         = l_hold_pol_year and
          gsn_master_prior:end_sequence     = l_prior_end_sequence
      {

--        if l_line_of_business one of 5,51,50 and
--           l_lob_subline one of "60","70" then
--          {
--            access gsn_master_current,
--               set gsn_master_current:policy_no        = gsn_master_prior:policy_no,
--                   gsn_master_current:pol_year         = gsn_master_prior:pol_year,
--                   gsn_master_current:end_sequence     = l_hold_end_sequence,
--                   gsn_master_current:prem_no          = gsn_master_prior:prem_no,
--                   gsn_master_current:build_no         = gsn_master_prior:build_no,
--                   gsn_master_current:line_of_business = gsn_master_prior:line_of_business,
--                   gsn_master_current:lob_subline      = gsn_master_prior:lob_subline,
--                   gsn_master_current:line_type        = gsn_master_prior:line_type,
--                   gsn_master_current:sub_code         = gsn_master_prior:sub_code, exact
--          }
--        else
--          {
            access gsn_master_current,
               set gsn_master_current:policy_no        = gsn_master_prior:policy_no,
                   gsn_master_current:pol_year         = gsn_master_prior:pol_year,
                   gsn_master_current:end_sequence     = l_hold_end_sequence,
                   gsn_master_current:prem_no          = gsn_master_prior:prem_no,
                   gsn_master_current:build_no         = gsn_master_prior:build_no,
                   gsn_master_current:line_of_business = gsn_master_prior:line_of_business,
                   gsn_master_current:lob_subline      = gsn_master_prior:lob_subline, generic
--          }




        if gsn_master_current:policy_no        <> gsn_master_prior:policy_no or
           gsn_master_current:pol_year         <> gsn_master_prior:pol_year or
           gsn_master_current:end_sequence     <> l_hold_end_sequence or
           gsn_master_current:prem_no          <> gsn_master_prior:prem_no or
           gsn_master_current:build_no         <> gsn_master_prior:build_no or
           gsn_master_current:line_of_business <> gsn_master_prior:line_of_business or
           gsn_master_current:lob_subline      <> gsn_master_prior:lob_subline then
          {
            l_premium = gsn_master_prior:annual_premium
            if sfpmaster_current:trans_eff <> sfpname_current:eff_date then
              {
                I_EFF_DATE = Dateadd(l_trans_exp_date,0,-1)
                I_SHORT_RATE = SFPMASTER_current:SHORT_RATE
                I_TOTAL_DAYS = I_EFF_DATE - l_TRANS_EXP_date
                I_CX_DAYS = I_EFF_DATE - l_TRANS_EFF_date
                Include "prorata.pro"
                l_difference = l_premium * I_pro_rata
                l_premium = l_difference
              }
            l_premium = l_premium * -1
            if gsn_master_prior:mark_as_deleted_location not one of 1 then   --this will eliminate adding the location to every subsquent endorsement
              {
                add gsn_master_current
                  begin
                    gsn_master_current:POLICY_NO                = gsn_master_prior:policy_no
                    gsn_master_current:POL_YEAR                 = gsn_master_prior:pol_year
                    gsn_master_current:END_SEQUENCE             = l_hold_end_sequence
                    gsn_master_current:PREM_NO                  = gsn_master_prior:prem_no
                    gsn_master_current:BUILD_NO                 = gsn_master_prior:build_No
                    gsn_master_current:lob_subline              = gsn_master_prior:lob_subline
                    gsn_master_current:line_of_business         = gsn_master_prior:line_of_business
                    gsn_master_current:SUB_CODE                 = gsn_master_prior:sub_code
                    gsn_master_current:record_rdf               = gsn_master_prior:record_rdf/raw
                    gsn_master_current:trans_date               = l_trans_date
                    gsn_master_current:trans_code               = l_current_trans_code
                    gsn_master_current:policy_eff_date          = l_policy_eff_date
                    gsn_master_current:trans_eff_date           = l_trans_eff_date
                    gsn_master_current:trans_exp_date           = l_trans_exp_date
                    gsn_master_current:save_current_premium     = l_premium
                    gsn_master_current:premium                  = l_Premium
                    gsn_master_current:annual_premium           = gsn_master_prior:annual_premium
                    gsn_master_current:accounting_date          = l_ending_date
                    gsn_master_current:mark_as_deleted_location = 1
                    gsn_master_current:TERRORISM_COVERAGE_CODE  = "2"
                    gsn_master_current:iso_cf_year_of_construction  = l_construction_year
                    gsn_master_current:iso_bop_year_of_construction = "N/A"
                  END
              }
          }
        next gsn_master_prior
      }
  } --end of the if
END

procedure check_for_endorsement

BEGIN
  local unsigned ascii number l_previous_end_sequence;
  local signed ascii number l_previous_total;
  local signed ascii number l_diff_total;
  l_save_premium = 0

  access sfpmaster_check_endorsement,
     set sfpmaster_check_endorsement:policy_no    = l_policy_no,
         sfpmaster_check_endorsement:pol_year     = l_pol_year,
         sfpmaster_check_endorsement:end_sequence = l_end_sequence, generic

  if sfpmaster_check_endorsement:trans_code one of 11,12,13,15,16 then
    {  --check if prior endorsement is there
      l_previous_end_sequence = l_end_sequence - 1
      access gsn_master_previous,
         set gsn_master_previous:policy_no        = l_policy_no,
             gsn_master_previous:pol_year         = l_pol_year,
             gsn_master_previous:end_sequence     = l_previous_end_sequence,
             gsn_master_previous:prem_no          = l_prem_no,
             gsn_master_previous:build_no         = l_build_no,
             gsn_master_previous:line_of_business = l_line_of_business,
             gsn_master_previous:lob_subline      = l_lob_subline,
             gsn_master_previous:line_type        = l_line_type,
             gsn_master_previous:sub_code         = l_sub_code, exact

      if gsn_master_previous:policy_no        = l_policy_no and
         gsn_master_previous:pol_year         = l_pol_year and
         gsn_master_previous:end_sequence     = l_previous_end_sequence and
         gsn_master_previous:prem_no          = l_prem_no and
         gsn_master_previous:build_no         = l_build_no and
         gsn_master_previous:line_of_business = l_line_of_business and
         gsn_master_previous:lob_subline      = l_lob_subline and
         gsn_master_previous:sub_code         = l_sub_code then
        {
          l_previous_total = 0
          l_previous_total = gsn_master_previous:annual_premium
          l_save_premium = l_premium
          l_diff_total = l_premium - l_previous_total     --take current_premium - previous end_sequence premium to get the current_premium to add to gsn_master.
          l_annual_premium = l_premium

          if sfpmaster_check_endorsement:trans_code one of 11 then
            {
              if sfpmaster_check_endorsement:trans_eff = sfpname:eff_date then
                {
                  l_annual_premium = l_annual_premium * -1
                  l_premium = l_premium * -1
                }
              else
                 {
                  do pro_rata
                  l_diff_total = l_annual_premium * I_pro_rata
                  l_premium = l_diff_total * -1
                  l_annual_premium = l_annual_premium * -1
                }
            }
          else
            if sfpmaster_check_endorsement:trans_code one of 16 then
              {
                if sfpmaster_check_endorsement:trans_eff = sfpname:eff_date then
                  {
                    l_premium = l_premium
                    l_annual_premium = l_annual_premium
                  }
                else
                  {
                    do pro_rata
                    l_diff_total = l_annual_premium * I_pro_rata
                    l_annual_premium = l_annual_premium
                    l_premium = l_diff_total
                  }
              }
            else
              if l_diff_total <> 0 then
                {
                  if sfpmaster_check_endorsement:trans_eff <> sfpname:eff_date then
                    {
                      do pro_rata
                      l_diff_total = l_diff_total * I_pro_rata
                    }
                  l_premium = l_diff_total
                }
            else
            if l_diff_total = 0 then
                l_premium = l_diff_total
        }
      else   --was not found on prevous endorsement and need to check date to see if pro_rata is needed else just use  l_premium
        {
          if sfpmaster_check_endorsement:trans_eff <> sfpname:eff_date then
            {
              do pro_rata
              l_premium = l_premium  * I_pro_rata
            }
        }
    }

END

procedure write_difference_in_premium

BEGIN
  -- L_premium is the total premium of the current subline and endorsement.
  signed ascii number l_new_premium_to_add[9],
                      l_save_annual_prior[9],
                      l_current_premium_to_add[9];

  l_current_premium_to_add = 0
  access gsn_master_loop,
     set gsn_master_loop:policy_no        = l_policy_no,
         gsn_master_loop:pol_year         = l_pol_year,  generic      --beginning of the current policy and pol_year

  while gsn_master_loop:policy_no    = l_policy_no and
        gsn_master_loop:pol_year     = l_pol_year
    {
      if gsn_master_loop:prem_no     = l_prem_no and
         gsn_master_loop:build_No    = l_build_no and
         gsn_master_loop:lob_subline = l_lob_subline then
        {
          if gsn_master_loop:exposure_base = "N/A" then
            {

              l_current_premium_to_add = l_current_premium_to_add + gsn_master_loop:premium    --was just premium
              l_save_annual_prior = gsn_master_loop:annual_premium
            }
        }
      next gsn_master_loop
    }  --now I should have the correct total for this endorsement now I need to compare it to the the premium I am adding.


if sfpmaster:trans_eff <> sfpname:eff_date then --prorat
    {
    if l_save_annual_prior = l_annual_premium then
        {
        l_premium = 0
        l_save_premium = 0
        }
    else
    if l_premium >= l_current_premium_to_add then      --  l_current_premium_to_add >= l_premium then
        {
        l_new_premium_to_add = l_premium - l_current_premium_to_add
        l_save_premium = l_premium
        l_premium = l_new_premium_to_add
        }
    else
        {
        l_premium = l_premium
        l_save_premium = l_current_premium_to_add + l_premium
        }
    }
else
if l_save_annual_prior = l_annual_premium then
    {
    l_premium = 0
    l_save_premium = 0
    }
else
if l_premium >= l_current_premium_to_add then
    {
    l_new_premium_to_add = l_premium - l_current_premium_to_add
    l_save_premium = l_premium
    l_premium = l_new_premium_to_add
    }

END

procedure write_subline_additional_class_code_premium

BEGIN
  unsigned ascii number l_previous_end_sequence = l_end_sequence - 1;
  signed ascii number l_new_premium_to_add[9];
  local file gsn_master_additional_class  = alias for gsn_master;

  access gsn_master_additional_class,
     set gsn_master_additional_class:policy_no        = l_policy_no,
         gsn_master_additional_class:pol_year         = l_pol_year,
         gsn_master_additional_class:end_sequence     = l_previous_end_sequence,
         gsn_master_additional_class:prem_no          = l_prem_no,
         gsn_master_additional_class:build_no         = l_build_no,
         gsn_master_additional_class:line_of_business = l_line_of_business,
         gsn_master_additional_class:LOB_SUBLINE      = l_lob_subline,
         gsn_master_additional_class:line_type        = l_line_type,
         gsn_master_additional_class:SUB_CODE         = l_sub_code, generic      --beginning of the current policy and pol_year

  if gsn_master_additional_class:policy_no        = l_policy_no and
     gsn_master_additional_class:pol_year         = l_pol_year and
     gsn_master_additional_class:end_sequence     = l_previous_end_sequence and
     gsn_master_additional_class:prem_no          = l_prem_no and
     gsn_master_additional_class:build_no         = l_build_no and
     gsn_master_additional_class:line_of_business = l_line_of_business and
     gsn_master_additional_class:LOB_SUBLINE      = l_lob_subline and
     gsn_master_additional_class:line_type        = l_line_type and
     gsn_master_additional_class:SUB_CODE         = l_sub_code then
   {
--     if gsn_master_additional_class:exposure_base = "N/A" then

         l_new_premium_to_add = l_premium - gsn_master_additional_class:premium
         l_save_premium = l_premium
         l_premium = l_new_premium_to_add
   }
END

procedure gsn_master_add

BEGIN
  string l_auto_state[2];
  l_annual_premium = l_premium

  if l_end_sequence > 0 then
    {
      do check_for_endorsement
      if sfpmaster:trans_code not one of 11,16 then
        {
          if l_line_of_business = 6 and
             l_lob_subline one of "83" and
             l_exposure_base <> "N/A" then
            {
              do write_subline_additional_class_code_premium
            }
          else
            {
              do write_difference_in_premium
            }
        }
    }
    access gsn_master,
       set gsn_master:policy_no           = l_policy_no,
           gsn_master:POL_YEAR            = l_pol_year,
           gsn_master:END_SEQUENCE        = l_end_sequence,
           gsn_master:PREM_NO             = l_prem_no ,
           gsn_master:BUILD_NO            = l_build_No,
           gsn_master:lob_subline         = l_lob_subline ,
           gsn_master:line_of_business    = l_Line_of_business,
           gsn_master_previous:line_type  = l_line_type,
           gsn_master:SUB_CODE            = l_sub_code , exact

/*  if gsn_master:policy_no           <> l_policy_no or
       gsn_master:POL_YEAR            <> l_pol_year or
       gsn_master:END_SEQUENCE        <> l_end_sequence or
       gsn_master:PREM_NO             <> l_prem_no  or
       gsn_master:BUILD_NO            <> l_build_No or
       gsn_master:lob_subline         <> l_lob_subline  or
       gsn_master:line_of_business    <> l_Line_of_business or
       gsn_master_previous:line_type  <> l_line_type or
       gsn_master:SUB_CODE            <> l_sub_code then*/
      {
    add gsn_master
      begin
        gsn_master:POLICY_NO                         = l_policy_no
        gsn_master:POL_YEAR                          = l_pol_year
        gsn_master:END_SEQUENCE                      = l_end_sequence
        gsn_master:PREM_NO                           = l_prem_no
        gsn_master:BUILD_NO                          = l_build_No
        gsn_master:lob_subline                       = l_lob_subline
        gsn_master:line_of_business                  = l_Line_of_business
        gsn_master:line_type                         = l_line_type
        gsn_master:SUB_CODE                          = l_sub_code
        gsn_master:SEQUENCE_NUMBER                   = l_END_SEQUENCE
        gsn_master:payment_plan                      = l_payment_plan
        gsn_master:CLAIMS_MADE_POLICY_INDICATOR      = "OCCURRENCE"
        
        if sfpname:original_eff_date <= 01.25.2016 and
           sfpname:eff_date >= 01.25.2016 then
          {
            access sfpname_alias,
               set sfpname_alias:policy_no    = sfpname:policy_no,
                   sfpname_alias:pol_year     = sfpname:pol_year,
                   sfpname_alias:end_sequence = 0, exact

            if sfpname_alias:policy_no    = sfpname:policy_no and
               sfpname_alias:pol_year     = sfpname:pol_year and
               sfpname_alias:end_sequence = 0 then
              {
                if sfpname_alias:trans_code one of 10 then
                  {
                    l_policy_suffix = 0
                  }
                else
                  {
                    l_policy_suffix = year(sfpname:eff_date) - year(sfsdefault:starting_date)
                  }
              }
            else
              {
                l_policy_suffix = year(sfpname:eff_date) - year(sfsdefault:starting_date)
              }
          }
        else
          {
            l_policy_suffix = 0
          }
        gsn_master:policy_suffix                     = str(l_policy_suffix,"999")
        gsn_master:ACCOUNTING_DATE                   = l_ending_date
        gsn_master:eff_date                          = sfpname:eff_date
        gsn_master:POLICY_EFF_DATE                   = sfpname:eff_date
        gsn_master:POLICY_EXP_DATE                   = sfpname:exp_date
        gsn_master:trans_exp_date                    = sfpmaster:trans_exp
        gsn_master:POLICY_INDICATOR                  = L_POLICY_INDICATOR
        gsn_master:TRANS_EFF_DATE                    = sfpmaster:trans_eff
        gsn_master:trans_code                        = sfpmaster:trans_code
        gsn_master:CLAIMS_MADE_POLICY_INDICATOR      = "OCCURRENCE"
        gsn_master:RETROACTIVE_DATE                  = 00.00.0000
        gsn_master:DISCOVERY_DATE                    = 00.00.0000
        L_insured_name = ""
        I_rev_name = ""
        access sfscompany,
           set sfscompany:company_id = l_company_id, exact
        I_name = sfpname:name[1]
        include "sfsrevname7.pro"
        l_insured_name = I_rev_name
        if trun(sfpname:name[2]) <> "" then
          {
            I_name = sfpname:name[2]
            include "sfsrevname7.pro"
            l_insured_name = trun(l_insured_name) + " " + I_rev_name
          }
        if trun(sfpname:name[3]) <> "" then
          {
            I_name = sfpname:name[3]
            include "sfsrevname7.pro"
            l_insured_name = trun(l_insured_name) + " " + I_rev_name
          }

        gsn_master:INSURED_NAME                      = l_insured_name
        gsn_master:INSURED_ADDRESS                   = trun(sfpname:address[1]) + " " + trun(sfpname:address[2]) + " " + trun(sfpname:address[3])
        gsn_master:INSURED_CITY                      = sfpname:city
        gsn_master:INSURED_STATE                     = sfpname:str_state
        gsn_master:INSURED_ZIP[1,5]                  = sfpname:str_zipCode[1,5]
        gsn_master:SIC_CODE                          = l_iso_sic_code
        gsn_master:TYPE_OF_POLICY                    = str(l_type_of_policy)
        gsn_master:COMPANY_NAME                      = trun(sfscompany:name[1]) + " " + sfscompany:name[2]
        gsn_master:COMPANY_CODE                      = "GSN"             --need claification from ani
        gsn_master:FAC_INDICATOR                     = L_FAC_INDICATOR

        gsn_master:SITE_ADDRESS                  = Trun(sfplocation:address) + trun(SFPLOCATION:ADDRESS1[1]) + " " + trun(SFPLOCATION:ADDRESS1[2]) + " " + TRUN(SFPLOCATION:ADDRESS1[3])
        gsn_master:SITE_CITY                     = SFPLOCATION:CITY
        gsn_master:SITE_STATE                    = SFPLOCATiON:str_STATE
        gsn_master:SITE_ZIP                      = SFPLOCATION:str_ZIPCODE[1,5]

        gsn_master:SITE_COUNTY                       = L_COUNTY_STR
        if l_line_of_business one of 15,16 then
          {
            gsn_master:TERRITORY_CODE_ISO = ""  -- not neede because of state nj,de,pa adopted the zipcode terrioty rating
          }
        else
          {
            gsn_master:TERRITORY_CODE_ISO = ""
          }
        gsn_master:territory_code_iso    = str(scpcontractor:rating_territory)
        gsn_master:CONSTRUCTION_CLASS                = l_construction_class
        gsn_master:iso_construction_code_ot_bgii     = l_construction_class
        gsn_master:rategroup                         = l_rate_group
        switch (l_protection)
          case "5" : l_protection1 = "8"   --correct
          case "4" : l_protection1 = "8"
          case "3" : l_protection1 = "8"
          case "2" : l_protection1 = "9"
          case "1" : l_protection1 = "10"
        end
        gsn_master:PROTECTION_CLASS_ISO              = l_protection1
        gsn_master:CLASS_CODE                        = l_class_code
        gsn_master:iso_class_code                    = l_iso_class_code
        gsn_master:wind_DEDUCTIBLE                   = if val(l_wind_deductible) > 0 then
                                                           7
                                                         else
                                                           9
        gsn_master:BCEG                              = "99"

        gsn_master:PREMIUM                           = l_premium
        if sfpmaster:trans_code one of 10,14 then
          {
            gsn_master:save_current_premium          = l_premium
          }
        else
          {
            gsn_master:save_current_premium          = l_save_premium
          }
        access sfsline2,
           set sfsline2:Company_id       = l_company_id,
               sfsline2:line_of_business = l_line_of_business,
               sfsline2:lob_subline      = l_lob_subline , exact

        if gsn_master:line_of_business one of 5,50,51 and
           gsn_master:lob_subline one of "60","70" then
          {
            gsn_master:ANNUAL_STATEMENT_LOB          = l_iso_statement_line
          }
        else
          {
            gsn_master:ANNUAL_STATEMENT_LOB          = sfsline2:ISO_STMT_LOB
          }
        gsn_master:DEDUCTIBLE                        = val(l_deductible)
        if l_line_of_business one of 11 then
          {
            gsn_master:property_deductible           = "0"
          }
        else
          {
            gsn_master:property_deductible           = l_deductible
          }
        gsn_master:LIABILITY_DEdUCTIBLE              = l_liability_deductible
        switch (gsn_master:line_of_business)
          case 6 : begin             --contractors
                     l_limit[4] = 0
                     l_limit[5] = 0
                     l_limit[7] = 0
                     l_limit[8] = 0
                     l_limit[9] = 0
                     l_limit[17] = 0
                     l_limit[18] = 0
                     l_limit[19] = 0
                     l_limit[20] = 0
                     l_limit[21] = 0
                     l_limit[22] = 0
                     l_limit[23] = 0
                     l_limit[24] = 0
                     l_limit[25] = 0
                     l_limit[26] = 0
                     l_limit[27] = 0
                     l_limit[28] = 0
                     l_limit[29] = 0
                     l_limit[29] = 0
                     l_limit[30] = 0
                   end
        end    --switch
        gsn_master:LIMIT[1]                          = l_limit[1]
        gsn_master:LIMIT[2]                          = l_limit[2]
        gsn_master:LIMIT[3]                          = l_limit[3]
        gsn_master:LIMIT[4]                          = l_limit[4]
        gsn_master:LIMIT[5]                          = l_limit[5]
        gsn_master:LIMIT[6]                          = l_limit[6]
        gsn_master:LIMIT[7]                          = l_limit[7]
        gsn_master:LIMIT[8]                          = l_limit[8]
        gsn_master:LIMIT[9]                          = l_limit[9]
        gsn_master:LIMIT[10]                         = l_limit[10]
        gsn_master:LIMIT[11]                         = l_limit[11]
        gsn_master:LIMIT[12]                         = l_limit[12]
        gsn_master:LIMIT[13]                         = l_limit[13]
        gsn_master:LIMIT[14]                         = l_limit[14]
        gsn_master:LIMIT[15]                         = l_limit[15]
        gsn_master:LIMIT[16]                         = l_limit[16]
        gsn_master:LIMIT[17]                         = l_limit[17]
        gsn_master:LIMIT[18]                         = l_limit[18]
        gsn_master:LIMIT[19]                         = l_limit[19]
        gsn_master:LIMIT[20]                         = l_limit[20]
        gsn_master:LIMIT[21]                         = l_limit[21]
        gsn_master:LIMIT[22]                         = l_limit[22]
        gsn_master:LIMIT[23]                         = l_limit[23]
        gsn_master:LIMIT[24]                         = l_limit[24]
        gsn_master:LIMIT[25]                         = l_limit[25]
        gsn_master:LIMIT[26]                         = l_limit[26]
        gsn_master:LIMIT[27]                         = l_limit[27]
        gsn_master:LIMIT[28]                         = l_limit[28]
        gsn_master:LIMIT[29]                         = l_limit[29]
        gsn_master:LIMIT[30]                         = l_limit[30]
        gsn_master:CO_INSURANCE_FACTOR               = l_coinsurance_factor
        gsn_master:SUBLINE_CODE                      = l_lob_subline
        gsn_master:ISOCOVERAGECODE                   = l_coverage
        gsn_master:TERRORISM_COVERAGE_CODE           = "2"
        gsn_master:STATEEXCEPTIONCODE                = l_state_exception_code
        gsn_master:RATINGIDCODE                      = l_rating_id_code
        gsn_master:RATEGROUP                         = ""
        gsn_master:CLASS_LIMIT                       = ""
        gsn_master:LCE_EFF_DATE                      = 00.00.0000
        gsn_master:TYPEOFEQUIPMENTCODE               = ""
        gsn_master:EMPLOYEES                         = ""
        gsn_master:RATABLEEMPLOYEES                  = ""
        gsn_master:PREMISES                          = ""
        gsn_master:FORM_CODE                         = l_form
        gsn_master:LIMIT_ID                          = "1"
        gsn_master:total_rating_mod_factor           = str(1 + (sfpmaster:irpm divide 100))
        gsn_master:DEDUCTIBLE_BASIS                  = "DOLLARS"
        gsn_master:CO_INSURANCE_MODIFIER             = ""
        gsn_master:INFLATION_GUARD_FACTOR            = ""
        gsn_master:INCREASED_LIMITS_FACTOR           = ""
        gsn_master:DEDUCTIBLE_FACtor                 = ""
        gsn_master:SCHEDULE_RATING_FACTOR            = ""
        gsn_master:EXPERIENCE_RATING_MOD_FACTOR      = ""
        gsn_master:RATE_DEPARTURE_LCM                = "999"  --lcm default to 999 per meeting on 11/06/2013
        gsn_master:IND_RISK_PREMIUM_MOD_FACTOR_IRPM  = ""
        gsn_master:EXPENSE_MOD_PREMIUM_DIS_FACTOR    = ""
        gsn_master:PACKAGE_MOD_FACTOR                = ""
        gsn_master:AGREED_AMOUNT_MODIFIER            = ""
        gsn_master:TERRITORY_MODIFIER                = ""
        gsn_master:PRIOR_ACTS_FACTOR                 = ""
        gsn_master:UNITS_DISCOUNT_FACTOR             = ""
        gsn_master:DEFENSE_IN_OR_OUT_OF_LIMIT_DOL    = ""
        gsn_master:FIRST_DOLLAR_MODIFIER             = ""
        gsn_master:COVERAGE_EXPOSURE                 = str(l_exposure)
        gsn_master:line_of_business                  = l_line_of_business
        gsn_master:AGENCY_COMMISSION                 = 25
        gsn_master:attachment_point                  = 0
        gsn_master:iso_subline_code                  = str(sfsline2:ISO_SUBLINE)
        gsn_master:trans_date                        = sfpmaster:PREMIUM_TRANS_DATE
        do check_prior_policy_no
        gsn_master:prior_policy_number               = l_prior_policy_number          --check_prior_policy_no()
        gsn_master:prior_policy_number_eff_date      = l_prior_policy_eff_date     --get_previous_pol_eff_date()
        gsn_master:prior_policy_number_prefix        = l_prior_policy_number_prefix
        gsn_master:res_condo                         = l_res_condo
        gsn_master:annual_premium                    = l_annual_premium
        gsn_master:ISO_Policy_Limits_Code            = l_iso_policy_limits
        gsn_master:ISO_Mold_Coverage_Code            = l_mold_coverage
        gsn_master:Coverage_Retroactive_Date         = date(l_coverage_retroactive_date)
        gsn_master:iso_green_upgrade_indicator_cf    = "9"
        gsn_master:ORDINANCELAWID                    = "5"
        gsn_master:Loss_Cost_Multiplier              = "999"
        gsn_master:ISO_Endorsement_Id_Code           = "N/A"
        gsn_master:ISO_Co_Insurance_Code_CF          = "9"
        gsn_master:year_of_construction              = str(l_year_of_construction)
        gsn_master:ISO_Type_Deductible_Code          = "01"
        gsn_master:ISO_Type_Deductible_Code_pd       = l_deductible_pd
        gsn_master:exposure_BASE                     = l_exposure_base
        gsn_master:iso_cf_year_of_construction       = l_construction_year
        gsn_master:iso_bop_year_of_construction      = "N/A"
     end
    }
END

procedure check_prior_policy_no

BEGIN
  local file sfpname_prior_term = alias for sfpname;
  local file sfpname_current_term = alias for sfpname;
  local file sfpname_previous_policy_term = alias for sfpname;

  unsigned ascii number l_prior_year[4],
                        l_prior_end_sequence[4] = 0,
                        l_current_end_sequence[4] = 0;

  l_prior_policy_number_prefix = ""

  l_prior_year = sfpname:pol_year - 1

  access sfpname_current_term,
     set sfpname_current_term:policy_no     = sfpname:policy_no ,
         sfpname_current_term:pol_year      = sfpname:pol_year,
         sfpname_current_term:end_sequence  = l_current_end_sequence, exact    --always look at endorsement 0 see if it is a 10 for later.

  access sfpname_prior_term,
     set sfpname_prior_term:policy_no     = sfpname:policy_no ,
         sfpname_prior_term:pol_year      = l_prior_year,
         sfpname_prior_term:end_sequence  = l_prior_end_sequence, exact

  access sfpname_previous_policy_term,
     set sfpname_previous_policy_term:policy_no     = sfpname:previous_policy_no ,
         sfpname_previous_policy_term:pol_year      = l_prior_year,
         sfpname_previous_policy_term:end_sequence  = l_prior_end_sequence, exact

  if sfpname_current_term:trans_code one of 10 then
    {
      l_prior_policy_number   = 0
      l_prior_policy_eff_date = 01.01.1900
    }
  else
    if sfpname_prior_term:policy_no     = sfpname:policy_no and
       sfpname_prior_term:pol_year      = l_prior_year and
       sfpname_prior_term:end_sequence  = l_prior_end_sequence then  --means found a prior term of the policy so assign the policy number
      {
        l_prior_policy_number        = sfpname:policy_no
        l_prior_policy_eff_date      = sfpname_prior_term:eff_date
        l_prior_policy_number_prefix = sfsline:alpha
      }
    else  --lets try looking it up by the prior policy number
      if sfpname_previous_policy_term:policy_no     = sfpname:previous_policy_no and
         sfpname_previous_policy_term:pol_year      = l_prior_year and
         sfpname_previous_policy_term:end_sequence  = l_prior_end_sequence then  --found the previous policy number as a policy in the system.
        {
          access sfsline_alias,
             set sfsline_alias:Company_id       = sfpname_previous_policy_term:company_id,
                 sfsline_alias:line_of_business = sfpname_previous_policy_term:line_of_business,
                 sfsline_alias:lob_subline      = "00" , exact

          l_prior_policy_number        = sfpname:previous_policy_no
          l_prior_policy_eff_date      = sfpname_previous_policy_term:eff_date
          l_prior_policy_number_prefix = sfsline_alias:alpha
        }
      else
        {
          l_prior_policy_number   = 0   --default it to current policy
          l_prior_policy_eff_date = 01.01.1900
        }
--  return l_prior_policy_number
END

wdate function get_previous_pol_eff_date()

BEGIN
  local file sfpname_previous_policy = alias for sfpname;
  local file sfpname_current_term = alias for sfpname;
  wdate l_prior_policy_eff_date;
  unsigned ascii number l_prior_year[4];
  unsigned ascii number l_prior_end_sequence[4] = 0;
  unsigned ascii number l_current_term_end_sequence[4] = 0;

  access sfpcurrent,
     set sfpcurrent:policy_no    = sfpname:previous_policy_no, exact

  if sfpname:previous_policy_no <> 0 then
    {
      l_prior_year         = sfpcurrent:pol_year - 1

      access sfpname_previous_policy,
         set sfpname_previous_policy:policy_no     = sfppoint:policy_no ,
             sfpname_previous_policy:pol_year      = l_prior_year,
             sfpname_previous_policy:end_sequence  = l_prior_end_sequence, exact

      if sfpname_previous_policy:policy_no     = sfppoint:policy_no and
         sfpname_previous_policy:pol_year      = l_prior_year  and
         sfpname_previous_policy:end_sequence  = l_prior_end_sequence then
        {
          l_prior_policy_eff_date = sfpname_previous_policy:eff_date
        }
      else
        {
          l_prior_policy_eff_date = 01.01.1900
        }
    }
  else
    if sfpname:previous_policy_no = 0 then
      {
        access sfpname_current_term,
           set sfpname_current_term:policy_no     = sfpname:policy_no ,
               sfpname_current_term:pol_year      = sfpname:pol_year,
               sfpname_current_term:end_sequence  = l_current_term_end_sequence, exact

        if sfpname_current_term:policy_no    = sfpname:policy_no and
           sfpname_current_term:pol_year     = sfpname:pol_year and
           sfpname_current_term:end_sequence = l_current_term_end_sequence then
          {
            if sfpname_current_term:trans_code one of 10 then
              {
                l_prior_policy_eff_date = 01.01.1900
              }
            else
              {
                l_prior_policy_eff_date = sfpname_current_term:eff_date
              }
          }
      }
  if l_prior_policy_eff_date <= 01.25.2016 then  --gang started with gsn 09/01/2011 so I have to go one year after that to find prior valid policies
    {
      l_prior_policy_eff_date = 01.01.1900
    }
  return l_prior_policy_eff_date
END

End
